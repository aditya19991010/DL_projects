{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/socruz/mnist-handwriting?scriptVersionId=271907945\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"15f1b60f","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2025-10-29T19:36:31.091621Z","iopub.status.busy":"2025-10-29T19:36:31.091374Z","iopub.status.idle":"2025-10-29T19:37:17.271514Z","shell.execute_reply":"2025-10-29T19:37:17.270931Z"},"papermill":{"duration":46.184473,"end_time":"2025-10-29T19:37:17.272766","exception":false,"start_time":"2025-10-29T19:36:31.088293","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["2025-10-29 19:36:37.430189: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n","WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n","E0000 00:00:1761766597.663501      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n","E0000 00:00:1761766597.739412      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"]},{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","\u001b[1m11490434/11490434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 0us/step\n","X_train: (60000, 28, 28)\n","y_train: (60000,)\n","X_test: (10000, 28, 28)\n","y_test: (10000,)\n","\n","Convert data to tensor\n","\n","Convert tensor to tensor dataset\n","\n","Data loaded successfully\n","Starting training with 5 epochs... \n","\n","Train Accuracy: 0.9414833333333333\n","\n","Test Accuracy: 0.9805\n","\n","\tEpoch 0\n","Train loss: \t0.2815256099954351\n","Test loss: \t0.06343690314846244\n","\n","Epoch 0\n","Train loss at Epoch 0 = 0.2815256099954351\n","Test loss at Epoch 0 = 0.06343690314846244\n","\n","Train Accuracy: 0.9774\n","\n","Test Accuracy: 0.9865\n","\n","\tEpoch 1\n","Train loss: \t0.0781868640185723\n","Test loss: \t0.04116327061123588\n","\n","Train Accuracy: 0.9805166666666667\n","\n","Test Accuracy: 0.9878\n","\n","\tEpoch 2\n","Train loss: \t0.06485241352026212\n","Test loss: \t0.03843551374168082\n","\n","Train Accuracy: 0.9817166666666667\n","\n","Test Accuracy: 0.9846\n","\n","\tEpoch 3\n","Train loss: \t0.06336457223098016\n","Test loss: \t0.056617002323222386\n","\n","Train Accuracy: 0.9832833333333333\n","\n","Test Accuracy: 0.9866\n","\n","\tEpoch 4\n","Train loss: \t0.05923031224303994\n","Test loss: \t0.040844602669755314\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["## Training MNIST handwriting data\n","import matplotlib.pyplot as plt\n","import torch\n","from tensorflow.keras.datasets import mnist\n","from torch import nn\n","from torch.utils.data import DataLoader, TensorDataset\n","from torchvision import transforms\n","import numpy as np\n","\n","device = torch.device(\"cuda\")\n","\n","## Model \n","class CNN(nn.Module):\n","    def __init__(self, op=10):\n","        super(CNN, self).__init__()\n","\n","        self.features = nn.Sequential(\n","            nn.Conv2d(1, 32, kernel_size=3, padding=1),  # 1x28x28 -> 32x28x28\n","            nn.BatchNorm2d(32),\n","            nn.ReLU(inplace=True),\n","            nn.MaxPool2d(2, 2),                         # 32x14x14\n","\n","            nn.Conv2d(32, 64, kernel_size=3, padding=1), # 64x14x14\n","            nn.BatchNorm2d(64),\n","            nn.ReLU(inplace=True),\n","        )\n","\n","        self.classifier = nn.Sequential(\n","            nn.Dropout(0.5),\n","            nn.Linear(64*14*14, 128),\n","            nn.ReLU(),\n","            nn.Linear(128, op)\n","        )\n","\n","    def forward(self, x):\n","        x = self.features(x)\n","        x = torch.flatten(x,1)\n","        x = self.classifier(x)\n","        return x\n","\n","\n","## Training loop\n","def training_loop(dataloader,loss_func, optim, model):\n","    model.train()\n","    tot_loss = 0\n","    correct=0\n","    # iterate through each batch of the dataloader\n","    # print(f'Training model...')\n","    for X_train, y_train in dataloader:\n","\n","        # move the data into the device (gpu/cpu)\n","        X_train, y_train = X_train.to(device), y_train.to(device)\n","\n","        ## predict --> calc loss --> set grad to 0 --> perf bwd prop --> perform optimization for updating model wghts\n","\n","        pred = model(X_train)\n","        loss = loss_func(pred, y_train)\n","\n","        optim.zero_grad()\n","        loss.backward()\n","        optim.step()\n","        _,predicted = pred.max(1)\n","        correct += predicted.eq(y_train).sum().item()\n","\n","        tot_loss +=loss.item()\n","    # print(f'\\nCalculating loss...')\n","    ave_loss = tot_loss/len(dataloader)\n","    print(f'\\nTrain Accuracy: {correct/len(dataloader.dataset)}')\n","\n","    return ave_loss\n","\n","def eval_loop(model, loss_fn, dataloader):\n","    model.eval()\n","    tot_loss = 0\n","    correct =0\n","    # print(f'\\nEvaluating model...')\n","    for X_test, y_test in dataloader:\n","        X_test, y_test = X_test.to(device), y_test.to(device)\n","\n","        pred = model(X_test)\n","        loss = loss_fn(pred, y_test)\n","        _,predicted = pred.max(1)\n","        correct += predicted.eq(y_test).sum().item()\n","        tot_loss +=loss.item()\n","\n","    # print(f'\\nCalculating loss...')\n","    ave_loss = tot_loss/len(dataloader)\n","    print(f'\\nTest Accuracy: {correct/len(dataloader.dataset)}')\n","    return ave_loss\n","\n","\n","def main():\n","  # Import data\n","  df = mnist.load_data()\n","\n","  (X_train, y_train), (X_test, y_test) =  df\n","  data = [X_train, y_train ,X_test, y_test]\n","\n","  # Data preprocessing\n","  print('X_train:', X_train.shape)\n","  print('y_train:', y_train.shape)\n","  print('X_test:', X_test.shape)\n","  print('y_test:', y_test.shape)\n","\n","  # Data standardatization\n","\n","  torch.manual_seed(42)\n","\n","  ## Convert np to tensor and reshaping the size\n","  X_train_ten = torch.tensor(X_train, dtype=torch.float32).unsqueeze(1) / 255.0  # -> (60000, 1, 28, 28)\n","  X_test_ten  = torch.tensor(X_test, dtype=torch.float32).unsqueeze(1) / 255.0   # -> (10000, 1, 28, 28)\n","  y_train_ten = torch.tensor(y_train, dtype=torch.long)\n","  y_test_ten  = torch.tensor(y_test, dtype=torch.long)\n","\n","  print('\\nConvert data to tensor')\n","\n","  ## transform data\n","  transform = transforms.Normalize(mean=[0.5], std=[0.5])\n","  X_train_ten = transform(X_train_ten)\n","  X_test_ten = transform(X_test_ten)\n","\n","\n","  ## Convert tensor to tensor dataset\n","  train_df = TensorDataset(X_train_ten, y_train_ten)\n","  test_df = TensorDataset(X_test_ten, y_test_ten)\n","  print('\\nConvert tensor to tensor dataset')\n","\n","\n","  ## Data loading\n","  train_load = DataLoader(train_df,batch_size=64, shuffle=True)\n","  test_load = DataLoader(test_df,batch_size=64, shuffle=True)\n","  print('\\nData loaded successfully')\n","\n","\n","  ## Set up models\n","  model = CNN(op=10).to(device).to(torch.float64)\n","\n","\n","  ## Set model hyper param\n","  l,n,m = X_train.shape\n","  p = y_train.shape[0]\n","  lr = 0.01\n","  batch = 64\n","  epoch=5\n","\n","  loss_func = nn.CrossEntropyLoss()\n","  optim=torch.optim.Adam(model.parameters(), lr)\n","\n","  model = model.to(torch.float32)\n","  ## Training with multiple epoch\n","\n","  train_loss_tot = []\n","  test_loss_tot = []\n","\n","  print(f\"Starting training with {epoch} epochs... \")\n","  for i in range(epoch):\n","      tr_loss = training_loop(train_load, loss_func, optim, model)\n","      te_loss = eval_loop(model,loss_func,test_load)\n","\n","      train_loss_tot.append(tr_loss)\n","      test_loss_tot.append(te_loss)\n","      print(f\"\\n\\tEpoch {i}\")\n","      print(f\"Train loss: \\t{tr_loss}\")\n","      print(f\"Test loss: \\t{te_loss}\")\n","\n","      if i%100==0:\n","          print(f\"\\nEpoch {i}\")\n","          print(f\"Train loss at Epoch {i} = {np.mean(train_loss_tot)}\")\n","          print(f\"Test loss at Epoch {i} = {np.mean(test_loss_tot)}\")\n","\n","\n","\n","  plt.plot(train_loss_tot, label='train')\n","  plt.plot(test_loss_tot, label='test')\n","  plt.legend()\n","  plt.xlabel(\"Epoch\")\n","  plt.ylabel('Loss')\n","  plt.title('Training and Test Loss')\n","  plt.show()\n","\n","if __name__ == \"__main__\":\n","    main()"]},{"cell_type":"code","execution_count":null,"id":"567ef1de","metadata":{"papermill":{"duration":0.002614,"end_time":"2025-10-29T19:37:17.278788","exception":false,"start_time":"2025-10-29T19:37:17.276174","status":"completed"},"tags":[]},"outputs":[],"source":[]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31153,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.13"},"papermill":{"default_parameters":{},"duration":53.107336,"end_time":"2025-10-29T19:37:20.118463","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2025-10-29T19:36:27.011127","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}