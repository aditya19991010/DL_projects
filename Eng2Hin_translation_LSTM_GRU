{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":441417,"sourceType":"datasetVersion","datasetId":200079}],"dockerImageVersionId":31154,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# Sequence to Sequence Learning using RNN --  machine translation -- Hindi English\n'''\nUsed LSTM and GRU, showed performance with LSTM only\n'''\n\n\n## Import libraries\nfrom itertools import islice\nimport numpy as np\nimport torch\nfrom torch import nn\nfrom sklearn.model_selection import train_test_split\nfrom torch.utils.data import DataLoader, TensorDataset\n\ndevice = 'cuda'\n\n# Process data\nimport pandas as pd\n\ndf = pd.read_csv(\"/kaggle/input/hindienglish-corpora/Hindi_English_Truncated_Corpus.csv\")\nprint(df.shape)\n\ndf = df.iloc[:,1:] # subset 50% samples only\n\n\n## Prepare vocabulary\n\ndef prepare_dict(df, col=0):\n\n    words = []\n    for inx in range(len(df)):\n        sent =  df.iloc[inx,col]\n        sent = \" \".join(str(sent).split())  # normalize whitespace\n        sent = str(sent).split(\" \")\n        words.extend(sent)\n\n    words.extend([\"<START>\",\"<END>\",\"<PAD>\",\"<UNK>\"])\n\n    uniq_words = pd.DataFrame()\n    uniq_words[\"words\"] = sorted(set(words))\n    uniq_words[\"Index\"] = range(len(uniq_words)) # Words and index\n\n\n    print(\"\\nNo. of unique words: \",len(uniq_words))\n\n    print(\"Initial 10 words\",uniq_words[:10])\n\n    word2vec = dict(zip(uniq_words[\"words\"],uniq_words[\"Index\"]))\n    vec2word = dict(zip(uniq_words[\"Index\"],uniq_words[\"words\"]))\n    return  word2vec, vec2word\n\n\nprint(\"\\nPreparing dictionary...\")\nEng_word2vec, Eng_vec2word = prepare_dict(df, col=0)\n# print(Eng_Inx2vec.items())\n\nHin_word2vec, Hin_vec2word = prepare_dict(df, col=1)\n# print(\"\\nPrinting inital 5 dict items: \",dict(islice(Hin_Inx2vec.items(),5)))\n\n\n\n## Truncate and Padding the sentences\n### Token preparation\n\nmax_len = 20\n\ndef sent2index(sentence,max_len, word2vec):\n    tokens = [\"<START>\"] +  str(sentence).split(\" \") + [\"<END>\"]\n    indices = [ word2vec.get(token,word2vec[\"<UNK>\"]) for token in tokens]\n    end_inx = indices[-1]\n\n    if len(indices) >= max_len:\n        indices = indices[:max_len-1]\n        indices.extend([end_inx])\n    else:\n        pad_indx = word2vec.get(\"<PAD>\")\n        indices.extend([pad_indx for x in range((max_len - len(indices)))]) ## Filling the blanks\n    return indices\n\n\n## Prepare dataset for train and test\n\nX = []\ny = []\nfor i in range(len(df)):\n\n    #English\n    query=df.iloc[i, 0]\n    X.append(sent2index(sentence=query, max_len=20, word2vec=Eng_word2vec))\n\n    #Hindi\n    target = df.iloc[i, 1]\n    y.append(sent2index(sentence=target, max_len=20, word2vec=Hin_word2vec))\n\n## Prepare dataset\nprint(\"\\nPreparing train-test dataset\")\nX_train, X_test, y_train, y_test= train_test_split(X,y,test_size=0.33)\n\nX_tr = torch.LongTensor(X_train)\ny_tr = torch.LongTensor(y_train)\n\nX_te = torch.LongTensor(X_test)\ny_te = torch.LongTensor(y_test)\n\n\ntrain_loader = DataLoader(TensorDataset(X_tr,y_tr), batch_size=32,shuffle=True)\ntest_loader = DataLoader(TensorDataset(X_te,y_te), batch_size=32,shuffle=True)\n\n\n## Prepare encoder block\n'''Model was overfitting so added regularization method such as Dropouts'''\nclass encoder(nn.Module):\n    def __init__(self,vocab_size, embed_dim, hid_dim, rnn_type=\"LSTM\"):\n        super().__init__()\n\n        self.embeddings = nn.Embedding(vocab_size,embed_dim)\n        self.dropout= nn.Dropout(0.5)\n\n\n        if rnn_type==\"LSTM\":\n            self.rnn = nn.LSTM(embed_dim, hid_dim,batch_first=True)\n        else:\n            self.rnn = nn.GRU(embed_dim, hid_dim,batch_first=True)\n\n    def forward(self,x):\n        embedded = self.embeddings(x)\n        embedded = self.dropout(embedded)\n\n        out, hid = self.rnn(embedded)\n\n        return hid\n\n## Prepare decoder block\nclass decoder(nn.Module):\n    def __init__(self,vocab_size, embed_dim, hid_dim, rnn_type=\"LSTM\"):\n        super().__init__()\n        self.rnn_type = rnn_type\n        self.embeddings = nn.Embedding(vocab_size, embed_dim)\n        self.dropout= nn.Dropout(0.5)\n\n\n        if rnn_type==\"LSTM\":\n            self.rnn = nn.LSTM(embed_dim,hid_dim,batch_first=True)\n        else:\n            self.rnn = nn.GRU(embed_dim,hid_dim,batch_first=True)\n\n        self.fc = nn.Linear(hid_dim, vocab_size)\n\n    def forward(self,x, hid):\n        embedded = self.embeddings(x)\n        embedded = self.dropout(embedded)\n\n        out, hid = self.rnn(embedded,hid)\n        preds = self.fc(out)\n\n        return preds, hid\n\n## main model\nclass seq2sq_model(nn.Module):\n    def __init__(self, encoder, decoder):\n        super().__init__()\n\n        self.encoder = encoder\n        self.decoder = decoder\n\n    def forward(self, source_seq, target_seq):\n        hidden = self.encoder(source_seq)\n        out, hidden = self.decoder(target_seq[:,:-1],hidden) ## Removing last token\n\n        return out\n\n\n### training loop\ndef training_loop(dataloader, model, loss_func, optimizer):\n    model.train()\n    total_loss = 0\n    for X_data,Y_data in train_loader:\n        X_data,Y_data = X_data.to(device), Y_data.to(device)\n\n        optimizer.zero_grad()\n        outputs = model(X_data,Y_data)\n\n        loss = loss_func(outputs.view(-1, vocab_size_hin), Y_data[:, 1:].reshape(-1)) # removing <START> token\n        loss.backward()\n        optimizer.step()\n\n        total_loss += loss.item()\n    # print(f\"Epoch {epoch+1}, Loss: {total_loss/len(train_loader):.4f}\")\n\n    return total_loss / len(dataloader)\n\n### test loop\ndef eval_loop(dataloader, model, loss_func):\n    model.eval()\n    total_loss = 0\n    with torch.no_grad():\n        for X_data, Y_data in dataloader:\n            X_data, Y_data = X_data.to(device), Y_data.to(device)\n\n            outputs = model(X_data, Y_data)\n\n            loss = loss_func(outputs.view(-1, vocab_size_hin), Y_data[:, 1:].reshape(-1))  # removing <START> token\n            total_loss += loss.item()\n        # print(f\"Epoch {epoch + 1}, Loss: {total_loss / len(train_loader):.4f}\")\n\n    return total_loss / len(dataloader)\n\n\n## Training with LSTM\nepoch=10\nvocab_size_eng = len(Eng_word2vec)\nvocab_size_hin = len(Hin_word2vec)\nprint(\"English vocab:\", vocab_size_eng, \"Hindi vocab:\", vocab_size_hin)\n\n\nrnn_type='LSTM'\nenc_model = encoder(vocab_size_eng,embed_dim=64, hid_dim=128, rnn_type=rnn_type)\ndeco_model = decoder(vocab_size_hin,embed_dim=64, hid_dim=128,rnn_type=rnn_type)\n\nmodel = seq2sq_model(enc_model,deco_model).to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr=0.001)\nloss_func = nn.CrossEntropyLoss(ignore_index=Hin_word2vec[\"<PAD>\"])\n\ntrain_loss_hist = []\ntest_loss_hist = []\n\nprint(f\"\\nTraining for {epoch} epochs...\")\nfor ep in range(epoch):\n    train_loss = training_loop(train_loader, model, loss_func, optimizer)\n    test_loss = eval_loop(test_loader, model, loss_func)\n\n    train_loss_hist.append(train_loss)\n    test_loss_hist.append(test_loss)\n\n    if (ep + 1) % 1 == 0:\n        print(f\"Epoch {ep + 1}/{epoch}: Train Loss = {train_loss:.4f}, Test Loss = {test_loss:.4f}\")\n\n\n\n\n## Training with GRU\nrnn_type='GRU'\n\nenc_model = encoder(vocab_size_eng,embed_dim=64, hid_dim=128, rnn_type=rnn_type)\ndeco_model = decoder(vocab_size_hin ,embed_dim=64, hid_dim=128,rnn_type=rnn_type)\n\nmodel = seq2sq_model(enc_model,deco_model).to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr=0.001)\nloss_func = nn.CrossEntropyLoss(ignore_index=Hin_word2vec[\"<PAD>\"])\n\ntrain_loss_hist_gru = []\ntest_loss_hist_gru = []\n\nprint(f\"\\nTraining for {epoch} epochs...\")\nfor ep in range(epoch):\n    train_loss = training_loop(train_loader, model, loss_func, optimizer)\n    test_loss = eval_loop(test_loader, model, loss_func)\n\n    train_loss_hist_gru.append(train_loss)\n    test_loss_hist_gru.append(test_loss)\n\n    if (ep + 1) % 1 == 0:\n        print(f\"Epoch {ep + 1}/{epoch}: Train Loss = {train_loss:.4f}, Test Loss = {test_loss:.4f}\")\n\n\n\n## Plotting\nimport matplotlib.pyplot as plt\n\n\nfig, ax = plt.subplots(1,2,figsize=(18,8))\nax[0].plot(train_loss_hist, label='LSTM')\nax[0].plot(train_loss_hist_gru, label='GRU')\nax[0].set_xlabel('Epoch')\nax[0].set_ylabel('Loss')\nax[0].legend()\nax[0].set_title(f\"Train loss: {rnn_type}\")\n\n\nax[1].plot(test_loss_hist, label='LSTM')\nax[1].plot(train_loss_hist_gru, label='GRU')\nax[1].set_xlabel('Epoch')\nax[1].set_ylabel('Loss')\nax[1].legend()\nax[1].set_title(f\"Test loss: {rnn_type}\")\nfig.suptitle(f\"Train-test Loss in RNN\")\n\nplt.savefig(\"rnn_lstm_gru_performance.png\")\nplt.show()\n\n\n## Translate\n\ndef translate_sentence(model, sentence, Eng_word2vec, Hin_vec2word, max_len=20):\n    model.eval()\n    with torch.no_grad():\n        # 1. Convert English input sentence to indices\n        src_indices = sent2index(sentence, max_len, Eng_word2vec)\n        src_tensor = torch.LongTensor(src_indices).unsqueeze(0).to(device)  # add batch dimension\n\n        # 2. Encode\n        hidden = model.encoder(src_tensor)\n\n        # 3. Initialize decoder input with <START> token\n        start_token = Eng_word2vec.get(\"<START>\")\n        dec_input = torch.LongTensor([[start_token]]).to(device)\n\n        translated_tokens = []\n\n        # 4. Iteratively predict next tokens\n        for _ in range(max_len):\n            output, hidden = model.decoder(dec_input, hidden)\n            pred_token = output.argmax(2)[:, -1].item()  # take the last token prediction\n            word = Hin_vec2word.get(pred_token, \"<UNK>\")\n\n            if word == \"<END>\":\n                break\n            translated_tokens.append(word)\n            dec_input = torch.LongTensor([[pred_token]]).to(device)\n\n        return \" \".join(translated_tokens)\n\n\n# Test Translation\nprint(\"Translation using (LSTM)\")\nprint(\"=\" * 50)\n\ntest_sentences = df.iloc[:5,0]\n\nprint(test_sentences)\n\nfor s in test_sentences:\n    translation = translate_sentence(model, s, Eng_word2vec, Hin_vec2word=Hin_vec2word)\n    print(f\"\\nEnglish: {s}\")\n    print(f\"Hindi: {translation}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-27T09:04:19.835082Z","iopub.execute_input":"2025-10-27T09:04:19.835587Z","iopub.status.idle":"2025-10-27T09:25:29.467670Z","shell.execute_reply.started":"2025-10-27T09:04:19.835566Z","shell.execute_reply":"2025-10-27T09:25:29.466811Z"}},"outputs":[{"name":"stdout","text":"(127607, 3)\n\nPreparing dictionary...\n\nNo. of unique words:  116145\nInitial 10 words      words  Index\n0        !      0\n1        #      1\n2        $      2\n3  $0.04US      3\n4       $1      4\n5    $1.16      5\n6     $1.2      6\n7     $1.3      7\n8     $1.5      8\n9    $1.50      9\n\nNo. of unique words:  93923\nInitial 10 words        words  Index\n0          \u0014      0\n1          !      1\n2         !!      2\n3         !]      3\n4  !वॉशिंगटन      4\n5         !”      5\n6          #      6\n7         #a      7\n8      #a%ma      8\n9        #aD      9\n\nPreparing train-test dataset\nEnglish vocab: 116145 Hindi vocab: 93923\n\nTraining for 10 epochs...\nEpoch 1/10: Train Loss = 6.9760, Test Loss = 6.4914\nEpoch 2/10: Train Loss = 6.2474, Test Loss = 6.1774\nEpoch 3/10: Train Loss = 5.8826, Test Loss = 5.9888\nEpoch 4/10: Train Loss = 5.6109, Test Loss = 5.8747\nEpoch 5/10: Train Loss = 5.3948, Test Loss = 5.7919\nEpoch 6/10: Train Loss = 5.2170, Test Loss = 5.7265\nEpoch 7/10: Train Loss = 5.0649, Test Loss = 5.6797\nEpoch 8/10: Train Loss = 4.9360, Test Loss = 5.6408\nEpoch 9/10: Train Loss = 4.8218, Test Loss = 5.6143\nEpoch 10/10: Train Loss = 4.7192, Test Loss = 5.5883\n\nTraining for 10 epochs...\nEpoch 1/10: Train Loss = 6.9060, Test Loss = 6.3426\nEpoch 2/10: Train Loss = 6.1001, Test Loss = 6.0483\nEpoch 3/10: Train Loss = 5.7387, Test Loss = 5.8828\nEpoch 4/10: Train Loss = 5.4817, Test Loss = 5.7713\nEpoch 5/10: Train Loss = 5.2799, Test Loss = 5.6921\nEpoch 6/10: Train Loss = 5.1108, Test Loss = 5.6237\nEpoch 7/10: Train Loss = 4.9639, Test Loss = 5.5620\nEpoch 8/10: Train Loss = 4.8347, Test Loss = 5.5111\nEpoch 9/10: Train Loss = 4.7234, Test Loss = 5.4733\nEpoch 10/10: Train Loss = 4.6206, Test Loss = 5.4444\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1800x800 with 2 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAABboAAAL3CAYAAABMAPMoAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAD8c0lEQVR4nOzdZ3hU1drG8XsmlZBCS6GEFloK0lU6SJPeREVRwaOCDcSOx6NYjlgOr9gAlSNiwUoHIQQQkXYEaZKE3iEJRUiAkDrzfhgSjCkEMjM7k/x/1zXX3tl77bWeZPyweFz7WSar1WoVAAAAAAAAAAAuymx0AAAAAAAAAAAAlASJbgAAAAAAAACASyPRDQAAAAAAAABwaSS6AQAAAAAAAAAujUQ3AAAAAAAAAMClkegGAAAAAAAAALg0Et0AAAAAAAAAAJdGohsAAAAAAAAA4NJIdAMAAAAAAAAAXBqJbgAAADjNyJEjVbduXaPDwGUTJ06UyWQyOgwAAACgxEh0AwAAQCaTqVif1atXGx1qPrNnz9aUKVMcOsaJEyc0ceJEbdu2rVjtP//8c5lMJm3evNmhcZU2hw4dyvPfi9lsVpUqVdS7d29t2LAhX/ucRHtwcLBSU1Pz3a9bt6769euX51pO35MnT87Xvrz+3QEAACC5Gx0AAAAAjPfll1/m+fmLL75QTExMvuvh4eElGufTTz+VxWIpUR9/N3v2bO3cuVNPPPGEXfv9qxMnTuiVV15R3bp11bx5c4eN42wvvviinn/+ebv3O3z4cPXp00fZ2dnas2ePpk6dqq5du2rTpk1q2rRpvvYnT57UtGnT9NRTTxV7jHfeeUcPP/ywfHx87Bk6AAAAXBSJbgAAAGjEiBF5ft64caNiYmLyXf+71NTUa0o0enh4XFd8cAx3d3e5u9v/nwQtW7bM899Ox44d1bt3b02bNk1Tp07N17558+Z655139Mgjj6hChQpX7b958+batm2bpk+frieffNKusQMAAMA1UboEAAAAxdKlSxdFRUXp999/V6dOneTj46MXXnhBkrRgwQL17dtXNWrUkJeXl8LCwvTaa68pOzs7Tx9/r9GdU+riP//5jz755BOFhYXJy8tLbdq00aZNm4oV05IlS3T48OHckhZ/7T89PV0vv/yyGjRoIC8vL4WGhurZZ59Venp6nn5iYmLUoUMHVapUSb6+vmrcuHHu77Z69Wq1adNGkjRq1KjccT7//PPr+CvmtXXrVvXu3Vv+/v7y9fVVt27dtHHjxjxtMjMz9corr6hhw4by9vZW1apV1aFDB8XExOS2SUxM1KhRo1SrVi15eXmpevXqGjhwoA4dOlTk+AXV6DaZTHrsscc0f/58RUVFycvLS5GRkVq2bNl1/54dO3aUJO3fv7/A+y+99JKSkpI0bdq0YvXXvn173XLLLXr77bd16dKl644LAAAAZQcrugEAAFBsZ86cUe/evXXnnXdqxIgRCg4OlmSrjezr66snn3xSvr6+WrVqlV566SWlpKTonXfeuWq/s2fP1vnz5zV69GiZTCa9/fbbGjJkiA4cOFDkKvB//vOfSk5O1rFjx/Tuu+9Kknx9fSVJFotFAwYM0Nq1a/XQQw8pPDxcf/zxh959913t2bNH8+fPlyTFxsaqX79+uuGGG/Tqq6/Ky8tL+/bt07p16yTZyrW8+uqreumll/TQQw/lJm3btWt33X/HnHE7duwof39/Pfvss/Lw8NDHH3+sLl266JdfftFNN90kyZaMnjRpkh544AHdeOONSklJ0ebNm7Vlyxb16NFDkjR06FDFxsbq8ccfV926dXXy5EnFxMToyJEj17X559q1azV37lw98sgj8vPz0/vvv6+hQ4fqyJEjqlq16jX3l5Nwr1y5coH3O3bsmJu4fvjhh4u1qnvixInq1KmTpk2bxqpuAAAAkOgGAABA8SUmJmr69OkaPXp0nuuzZ8/Ok5wcM2aMxowZo6lTp+r111+Xl5dXkf0eOXJEe/fuzU2ENm7cWAMHDlR0dHS+zQj/qkePHqpZs6bOnj2br8zK7NmztWLFCv3yyy/q0KFD7vWoqCiNGTNG69evV7t27RQTE6OMjAwtXbpU1apVyzdGcHCwevfurZdeeklt27a9ajmX4nrxxReVmZmptWvXqn79+pKke++9V40bN9azzz6rX375RZK0ZMkS9enTR5988kmB/Zw7d07r16/XO++8o6effjr3+oQJE647tvj4eMXFxSksLEyS1LVrVzVr1kzffPONHnvssas+n5qaqtOnTys7O1t79+7NTUTfdttthT7z8ssvq3Pnzpo+fbrGjx9/1TE6duyorl275tbqLk5yHAAAAGUXpUsAAABQbF5eXho1alS+639NMp4/f16nT59Wx44dlZqaql27dl213zvuuCPPat+cVdMHDhy47lh/+OEHhYeHq0mTJjp9+nTu55ZbbpEk/fzzz5KkSpUqSbKVX7H3RpmFyc7O1vLlyzVo0KDcJLckVa9eXXfddZfWrl2rlJSU3PhiY2O1d+/eAvuqUKGCPD09tXr1ap09e9Yu8XXv3j03yS1JN9xwg/z9/Yv9fbz88ssKDAxUSEiIOnbsqPj4eE2ePLnIRHenTp3UtWvXaypHMnHixNz/+QIAAIDyjUQ3AAAAiq1mzZry9PTMdz02NlaDBw9WQECA/P39FRgYmLvyOTk5+ar91q5dO8/POUnvnMTtpUuXlJiYmOdzNXv37lVsbKwCAwPzfBo1aiRJOnnypCRbkr19+/Z64IEHFBwcrDvvvFPff/+9Q5Pep06dUmpqqho3bpzvXnh4uCwWi44ePSpJevXVV3Xu3Dk1atRITZs21TPPPKMdO3bktvfy8tJbb72lpUuXKjg4WJ06ddLbb79drL9RYf7+fUi276S4ifSHHnpIMTExWrRokcaPH69Lly7lq9dekGtNXF9PchwAAABlE6VLAAAAUGwFlYc4d+6cOnfuLH9/f7366qsKCwuTt7e3tmzZoueee65YCWM3N7cCr1utVknSd999l28lec69wlgsFjVt2lT/93//V+D90NDQ3N9pzZo1+vnnn7VkyRItW7ZM3333nW655RYtX7680NicpVOnTtq/f78WLFig5cuXa8aMGXr33Xc1ffp0PfDAA5KkJ554Qv3799f8+fMVHR2tf/3rX5o0aZJWrVqlFi1aXPOYV/s+rqZhw4bq3r27JKlfv35yc3PT888/r65du6p169aFPtepUyd16dJFb7/9tsaMGVOssV5++WV16dJFH3/8ce7qfAAAAJQ/JLoBAABQIqtXr9aZM2c0d+5cderUKff6wYMH7TZGr169FBMTU+A9k8lU4PWwsDBt375d3bp1K7RNDrPZrG7duqlbt276v//7P73xxhv65z//qZ9//lndu3e/6vPXKjAwUD4+Ptq9e3e+e7t27ZLZbM5NxEtSlSpVNGrUKI0aNUoXLlxQp06dNHHixNxEt2T7fZ966ik99dRT2rt3r5o3b67Jkyfrq6++smvs1+Of//ynPv30U7344otatmxZkW0nTpyYm7gujs6dO6tLly5666239NJLL9kjXAAAALggSpcAAACgRHJW//51tW9GRoamTp1qtzGqV6+u7t275/nkqFixYoHlUW6//XYdP35cn376ab57ly5d0sWLFyVJf/75Z777zZs3lySlp6fnjiHZVq/bg5ubm3r27KkFCxbo0KFDudeTkpI0e/ZsdejQQf7+/pKkM2fO5HnW19dXDRo0yI0tNTVVaWlpedqEhYXJz88vt43RKlWqpNGjRys6Olrbtm0rsu1fE9d//70Kk1PypLANOwEAAFD2saIbAAAAJdKuXTtVrlxZ9913n8aOHSuTyaQvv/yy2GUuSqpVq1b67rvv9OSTT6pNmzby9fVV//79dc899+j777/XmDFj9PPPP6t9+/bKzs7Wrl279P333ys6OlqtW7fWq6++qjVr1qhv376qU6eOTp48qalTp6pWrVrq0KGDJFviuFKlSpo+fbr8/PxUsWJF3XTTTapXr16RsX322WcFrmAeN26cXn/9dcXExKhDhw565JFH5O7uro8//ljp6el6++23c9tGRESoS5cuatWqlapUqaLNmzfrxx9/1GOPPSZJ2rNnj7p166bbb79dERERcnd317x585SUlKQ777zTjn/pkhk3bpymTJmiN998U99++22RbV9++WV17dq12H137txZnTt31i+//FLSMAEAAOCiSHQDAACgRKpWrarFixfrqaee0osvvqjKlStrxIgR6tatm3r16uXw8R955BFt27ZNM2fO1Lvvvqs6deqof//+MpvNmj9/vt5991198cUXmjdvnnx8fFS/fn2NGzcud1PKAQMG6NChQ/rss890+vRpVatWTZ07d9Yrr7yigIAASZKHh4dmzZqlCRMmaMyYMcrKytLMmTOvmuieNm1agddHjhypyMhI/frrr5owYYImTZoki8Wim266SV999ZVuuumm3LZjx47VwoULtXz5cqWnp6tOnTp6/fXX9cwzz0iy1RofPny4Vq5cqS+//FLu7u5q0qSJvv/+ew0dOtQef2K7qFGjhu666y59+eWX2r9/v8LCwgpt26VLl2tOXE+cOPGakuMAAAAoW0xWZy21AQAAAAAAAADAAajRDQAAAAAAAABwaSS6AQAAAAAAAAAujUQ3AAAAAAAAAMClkegGAAAAAAAAALg0Et0AAAAAAAAAAJdGohsAAAAAAAAA4NJIdAMAAAAAAAAAXBqJbgAAAAAAAACASyPRDQAAAAAAAABwaSS6AQAAAAAAAAAujUQ3AAAAAAAAAMClkegGAAAAAAAAALg0Et0AAAAAAAAAAJdGohsAAAAAAAAA4NJIdAMAAAAAAAAAXBqJbgAAAAAAAACASyPRDQAAAAAAAABwaSS6AQAAAAAAAAAujUQ3AAAAAAAAAMClkegGAAAAAAAAALg0Et0AAAAAAAAAAJdGohsAAAAAAAAA4NJIdAMAAAAAAAAAXBqJbgAAAAAAAACASyPRDQAAAAAAAABwaSS6AQAAAAAAAAAujUQ3AAAAAAAAAMClkegGAAAAAAAAALg0Et0AAAAAAAAAAJdGohsAAAAAAAAA4NJIdAMAAAAAAAAAXBqJbgAAAAAAAACASyPRDQAAAAAAAABwaSS6AQAAAAAAAAAujUQ3AAAAAAAAAMClkegGAAAAAAAAALg0Et0AAAAAAAAAAJdGohsAAAAAAAAA4NJIdAMAAAAAAAAAXBqJbgAAAAAAAACASyPRDQAAAAAAAABwaSS6AQAAAAAAAAAujUQ3AAAAAAAAAMClkegGADsbOXKk6tata7f+Vq9eLZPJpNWrV9utTwAAAADOw5weAByPRDeAcsNkMhXrw+Sz5NLT0/XBBx+oQ4cOqly5sjw9PVWjRg0NGDBA33zzjbKzs3PbHjp0KM/f32w2q0qVKurdu7c2bNiQr++RI0fK19e30LF9fX01cuRIR/xaAAAAKMWcOd9PTU3VxIkTy/S/HZjTA3A17kYHAADO8uWXX+b5+YsvvlBMTEy+6+Hh4SUa59NPP5XFYilRH67s1KlT6t27t37//Xf16tVLL774oqpUqaLExEStWLFCd911l/bt26d//etfeZ4bPny4+vTpo+zsbO3Zs0dTp05V165dtWnTJjVt2tSg3wYAAACuwlnzfcmW6H7llVckSV26dClxf6UNc3oArohEN4ByY8SIEXl+3rhxo2JiYvJd/7vU1FT5+PgUexwPD4/riq+suOeee7R161bNmTNHQ4YMyXNvwoQJ2rx5s3bv3p3vuZYtW+b5Ljp27KjevXtr2rRpmjp1qsPjBgAAgGu73vk+8mNOD8AVUboEAP6iS5cuioqK0u+//65OnTrJx8dHL7zwgiRpwYIF6tu3r2rUqCEvLy+FhYXptddey/PKnpS/RnfOa3z/+c9/9MknnygsLExeXl5q06aNNm3adN2x/vDDD2rVqpUqVKigatWqacSIETp+/HieNomJiRo1apRq1aolLy8vVa9eXQMHDtShQ4dy22zevFm9evVStWrVVKFCBdWrV0/3339/nn4SEhK0a9cuZWZmFhnThg0bFB0drYceeijfhDhH69atdffdd1/19+vYsaMkaf/+/VdtCwAAABSHxWLRlClTFBkZKW9vbwUHB2v06NE6e/ZsnnZFzZEPHTqkwMBASdIrr7ySW65j4sSJ1xwPc3oAsB9WdAPA35w5c0a9e/fWnXfeqREjRig4OFiS9Pnnn8vX11dPPvmkfH19tWrVKr300ktKSUnRO++8c9V+Z8+erfPnz2v06NEymUx6++23NWTIEB04cOCaV4F//vnnGjVqlNq0aaNJkyYpKSlJ7733ntatW6etW7eqUqVKkqShQ4cqNjZWjz/+uOrWrauTJ08qJiZGR44cyf25Z8+eCgwM1PPPP69KlSrp0KFDmjt3bp7xJkyYoFmzZungwYNFbrS5aNEiSflX01yPnIl75cqVS9wXAAAAIEmjR4/OnUuPHTtWBw8e1IcffqitW7dq3bp18vDwuOocOTAwUNOmTdPDDz+swYMH5yaDb7jhhmuKhTk9ANgXiW4A+JvExERNnz5do0ePznN99uzZqlChQu7PY8aM0ZgxYzR16lS9/vrr8vLyKrLfI0eOaO/evbmTvMaNG2vgwIGKjo5Wv379ih1fZmamnnvuOUVFRWnNmjXy9vaWJHXo0EH9+vXTu+++q1deeUXnzp3T+vXr9c477+jpp5/OfX7ChAm55+vXr9fZs2e1fPlytW7dOvf666+/Xux4/mrXrl2SpKioqDzX09LSdOHChdyf3d3dcyfuOVJTU3X69GllZ2dr7969evLJJyVJt91223XFAgAAAPzV2rVrNWPGDH399de66667cq937dpVt956q3744QfdddddV50jV6xYUbfddpsefvhh3XDDDdeVEGZODwD2R+kSAPgbLy8vjRo1Kt/1vya5z58/r9OnT6tjx45KTU3NnQwW5Y477sizkiHnNb4DBw5cU3ybN2/WyZMn9cgjj+ROiCWpb9++atKkiZYsWZIbr6enp1avXp3vVcwcORPTxYsXF/kK4+effy6r1Vrkyg9JSklJkaR8O6hPnz5dgYGBuZ8OHTrke/bll19WYGCgQkJC1LFjR8XHx2vy5MlMigEAAGAXP/zwgwICAtSjRw+dPn0699OqVSv5+vrq559/llT8OXJJMKcHAPsj0Q0Af1OzZk15enrmux4bG6vBgwcrICBA/v7+CgwMzF29kZycfNV+a9eunefnnKR3YRPWwhw+fFiSbUX43zVp0iT3vpeXl9566y0tXbpUwcHB6tSpk95++20lJibmtu/cubOGDh2qV155RdWqVdPAgQM1c+ZMpaenX1NMOfz8/CQpz0oPyfa6ZUxMjGJiYgp9pfOhhx5STEyMFi1apPHjx+vSpUv56p8Xl8lkuq7nAAAAUHbt3btXycnJCgoKypOwDQwM1IULF3Ty5ElJ9p8jF4Q5/dUxpwdwrShdAgB/89eV2znOnTunzp07y9/fX6+++qrCwsLk7e2tLVu26LnnnpPFYrlqv25ubgVet1qtJY65ME888YT69++v+fPnKzo6Wv/61780adIkrVq1Si1atJDJZNKPP/6ojRs3atGiRYqOjtb999+vyZMna+PGjflWcVxNkyZNJEk7d+5U+/btc6+HhoYqNDRUki3Bf/r06XzPNmzYUN27d5ck9evXT25ubnr++efVtWvXPK9gent7Kz09XVarNd/k12q1Ki0tLc+qGAAAAECybUQZFBSkr7/+usD7ORtM2nuOXFLM6QGgeFjRDQDFsHr1ap05c0aff/65xo0bp379+ql79+6GbKpSp04dSdLu3bvz3du9e3fu/RxhYWF66qmntHz5cu3cuVMZGRmaPHlynjY333yz/v3vf2vz5s36+uuvFRsbq2+//faaY8upNV7YPx6uxT//+U/5+fnpxRdfzHO9Tp06ysrKKnDn9n379ik7Ozvf3wAAAAAICwvTmTNn1L59e3Xv3j3fp1mzZnnaFzVHLulqY+b0zOkB2B+JbgAohpzV2H9dfZ2RkaGpU6c6PZbWrVsrKChI06dPz/M64tKlSxUfH6++fftKsm0Ek5aWlufZsLAw+fn55T539uzZfCvKmzdvLkl5+k5ISNCuXbuuWqOwffv26tGjhz755BMtWLCgwDbFXcFeqVIljR49WtHR0dq2bVvu9d69e0uSPvzww3zPfPTRR3naAAAAADluv/12ZWdn67XXXst3LysrS+fOnZNUvDmyj4+PJOU+c62Y0zOnB2B/lC4BgGJo166dKleurPvuu09jx46VyWTSl19+6dCyI4Xx8PDQW2+9pVGjRqlz584aPny4kpKS9N5776lu3boaP368JGnPnj3q1q2bbr/9dkVERMjd3V3z5s1TUlKS7rzzTknSrFmzNHXqVA0ePFhhYWE6f/68Pv30U/n7+6tPnz65Y06YMEGzZs3SwYMHr7p5zVdffaVbb71VgwYNUu/evXNXvicmJmrFihVas2ZNsSet48aN05QpU/Tmm2/mrkZp3ry5HnjgAb333nvau3evevToIUmKiYnRTz/9pAceeCDfahwAAACgc+fOGj16tCZNmqRt27apZ8+e8vDw0N69e/XDDz/ovffe02233VasOXKFChUUERGh7777To0aNVKVKlUUFRWlqKioYsXCnJ45PQD7I9ENAMVQtWpVLV68WE899ZRefPFFVa5cWSNGjFC3bt3Uq1cvp8czcuRI+fj46M0339Rzzz2nihUravDgwXrrrbdyd10PDQ3V8OHDtXLlSn355Zdyd3dXkyZN9P3332vo0KGSbJP93377Td9++62SkpIUEBCgG2+8UV9//bXq1at3XbEFBQVp/fr1+vjjj/Xdd9/plVdeUWpqqqpVq6bWrVvr66+/1h133FGsvmrUqKG77rpLX375pfbv36+wsDBJ0scff6ymTZvqs88+04QJEyTZNvJ5//339eijj15X3AAAACj7pk+frlatWunjjz/WCy+8IHd3d9WtW1cjRozIrUdd3DnyjBkz9Pjjj2v8+PHKyMjQyy+/XOxEt8Scnjk9AHszWY1YjggAAAAAAAAAgJ1QoxsAAAAAAAAA4NJIdAMAAAAAAAAAXBqJbgAAAAAAAACASyPRDQAAAAAAAABwaSS6AQAAAAAAAAAujUQ3AAAAAAAAAMCluRsdgLNZLBadOHFCfn5+MplMRocDAAAAO7FarTp//rxq1Kghs5n1HOUJc3wAAICy6Vrm+OUu0X3ixAmFhoYaHQYAAAAc5OjRo6pVq5bRYZRbdevW1eHDh/Ndf+SRR/TRRx8V+MwPP/ygf/3rXzp06JAaNmyot956S3369Cn2mMzxAQAAyrbizPHLXaLbz89Pku2P4+/vb3A0AAAAsJeUlBSFhobmzvdgjE2bNik7Ozv35507d6pHjx4aNmxYge3Xr1+v4cOHa9KkSerXr59mz56tQYMGacuWLYqKiirWmMzxAQAAyqZrmeObrFar1QkxlRopKSkKCAhQcnIyk2AAAIAyhHle6fTEE09o8eLF2rt3b4FlRe644w5dvHhRixcvzr128803q3nz5po+fXqxxuC7BwAAKJuuZZ5H8UIAAAAADpGRkaGvvvpK999/f6G1szds2KDu3bvnudarVy9t2LDBGSECAACgjCh3pUsAAAAAOMf8+fN17tw5jRw5stA2iYmJCg4OznMtODhYiYmJhT6Tnp6u9PT03J9TUlJKHCsAAABcGyu6AQAAADjEf//7X/Xu3Vs1atSwa7+TJk1SQEBA7oeNKAEAAMCKbgAAAAexWq3KysrKszEfSsbDw0Nubm5Gh4FiOHz4sFasWKG5c+cW2S4kJERJSUl5riUlJSkkJKTQZyZMmKAnn3wy9+ecTYoAAAAcjTm+/dlrjk+iGwAAwAEyMjKUkJCg1NRUo0MpU0wmk2rVqiVfX1+jQ8FVzJw5U0FBQerbt2+R7dq2bauVK1fqiSeeyL0WExOjtm3bFvqMl5eXvLy87BUqAABAsTDHdwx7zfFJdAMAANiZxWLRwYMH5ebmpho1asjT07PQjfhQfFarVadOndKxY8fUsGFDVnaXYhaLRTNnztR9990nd/e8/+S49957VbNmTU2aNEmSNG7cOHXu3FmTJ09W37599e2332rz5s365JNPjAgdAACgQMzxHcOec3wS3QAAAHaWkZEhi8Wi0NBQ+fj4GB1OmRIYGKhDhw4pMzOTRHcptmLFCh05ckT3339/vntHjhyR2Xxlq6B27dpp9uzZevHFF/XCCy+oYcOGmj9/vqKiopwZMgAAQJGY4zuOveb4JLoBAAAc5K/JPNgHq2ZcQ8+ePWW1Wgu8t3r16nzXhg0bpmHDhjk4KgAAgJJjjm9/9prj880AAAAAAAAAAFwaiW4AAAAAAAAAgEsj0Q0AAIBcI0eO1KBBgwq8t337dg0YMEBBQUHy9vZW3bp1dccdd+jkyZOaOHGiTCZTkZ+c/k0mk8aMGZOv/0cffVQmk0kjR4504G8IAAAAlC/lZY5PohsAAABXderUKXXr1k1VqlRRdHS04uPjNXPmTNWoUUMXL17U008/rYSEhNxPrVq19Oqrr+a5liM0NFTffvutLl26lHstLS1Ns2fPVu3atY349QAAAIByp6zN8dmMEgAAAFe1bt06JScna8aMGXJ3t00h69Wrp65du+a28fX1zT13c3OTn5+fQkJC8vXVsmVL7d+/X3PnztXdd98tSZo7d65q166tevXqOfg3AQAAACCVvTk+K7oBAACcwGq1KjUjy5CP1WotcfwhISHKysrSvHnz7NLf/fffr5kzZ+b+/Nlnn2nUqFEl7hcAAABwFub4eRk9x2dFNwAAgBNcysxWxEvRhowd92ov+XiWbNp3880364UXXtBdd92lMWPG6MYbb9Qtt9yie++9V8HBwdfc34gRIzRhwgQdPnxYkm01ybfffqvVq1eXKE4AAADAWZjj52X0HN/QFd1169YtsIj5o48+WugzP/zwg5o0aSJvb281bdpUP/30kxMjBgAAKL/+/e9/KzExUdOnT1dkZKSmT5+uJk2a6I8//rjmvgIDA9W3b199/vnnmjlzpvr27atq1ao5IGoAAAAAhSlLc3xDV3Rv2rRJ2dnZuT/v3LlTPXr00LBhwwpsv379eg0fPlyTJk1Sv379NHv2bA0aNEhbtmxRVFSUs8IGAAC4ZhU83BT3ai/DxraXqlWratiwYRo2bJjeeOMNtWjRQv/5z380a9asa+7r/vvv12OPPSZJ+uijj+wWIwAAAOAMzPHzM3KOb2iiOzAwMM/Pb775psLCwtS5c+cC27/33nu69dZb9cwzz0iSXnvtNcXExOjDDz/U9OnTHR4vAADA9TKZTCV+tbC08fT0VFhYmC5evHhdz996663KyMiQyWRSr17G/AMBAAAAuF7M8fMzco5far6JjIwMffXVV3ryySdlMpkKbLNhwwY9+eSTea716tVL8+fPL7Tf9PR0paen5/6ckpJil3gBAADKquTkZG3bti3PtT/++EPR0dG688471ahRI1mtVi1atEg//fRTng1nroWbm5vi4+NzzwEAAAA4RnmY45eaRPf8+fN17tw5jRw5stA2iYmJ+QqhBwcHKzExsdBnJk2apFdeecVeYQIAAJR5q1evVosWLfJc69q1qxo0aKCnnnpKR48elZeXlxo2bKgZM2bonnvuue6x/P39SxouAAAAgKsoD3N8k9VqtRoy8t/06tVLnp6eWrRoUaFtPD09NWvWLA0fPjz32tSpU/XKK68oKSmpwGcKWtEdGhqq5ORk/mEFAAAcIi0tTQcPHlS9evXk7e1tdDhlSlF/25SUFAUEBDDPK4f47gEAgKMxx3cce83xS8WK7sOHD2vFihWaO3duke1CQkLyJbSTkpIUEhJS6DNeXl7y8vKyS5wAAAAAAAAAgNLHbHQAkjRz5kwFBQWpb9++RbZr27atVq5cmedaTEyM2rZt68jwAAAAAAAAAAClmOGJbovFopkzZ+q+++6Tu3veBeb33nuvJkyYkPvzuHHjtGzZMk2ePFm7du3SxIkTtXnzZj322GPODvua7E48ry82HDI6DAAAAAD2YLVKx36XtnxpdCQAAAC4zPDSJStWrNCRI0d0//3357t35MgRmc1XcvHt2rXT7Nmz9eKLL+qFF15Qw4YNNX/+fEVFRTkz5Gty6ny6bn1vjaxWqUujINWu6mN0SAAAAABK4vReacYtktlDihggeQcYHREAAEC5Z3iiu2fPnipsP8zVq1fnuzZs2DANGzbMwVHZT6Cflzo0qKZf957W3K3H9ET3RkaHBAAAAKAkAhtJ1RpJp/dIu5dJze4wOiIAAIByz/DSJeXB0Ja1JElztxwvNKkPAAAAwIWED7Ad4xcaGwcAAAAkkeh2ip6Rwaro6aYjf6Zq06GzRocDAAAAoKQiLie6962Q0i8YGwsAAABIdDuDj6e7+jStLkmau+WYwdEAAAAAKLGQG6RKdaSsNGlfjNHRAAAAlHskup1kaCtb+ZIlOxKUlpltcDQAAAAASsRkurKqO47yJQAAAEYj0e0kN9atopqVKuh8epaiYxONDgcAAABASYUPtB33Lpcy04yNBQAAoJwj0e0kZrNJQ1vWlGTblBIAAKA0S0xM1Lhx49SgQQN5e3srODhY7du317Rp05SamipJqlu3rkwmk0wmk3x8fNS0aVPNmDEjTz+ff/65KlWqVOAYJpNJ8+fPd/BvAjhQzVaSXw0p44K0f5XR0QAAABSprM/xSXQ70ZCWtvIlv+49paQUVnwAAIDS6cCBA2rRooWWL1+uN954Q1u3btWGDRv07LPPavHixVqxYkVu21dffVUJCQnauXOnRowYoQcffFBLly41MHrAicxmKby/7Tye8iUAAKD0Kg9zfHejAyhP6larqFZ1Kuv3w2c1f+txje4cZnRIAAAA+TzyyCNyd3fX5s2bVbFixdzr9evX18CBA2W1WnOv+fn5KSQkRJL03HPP6e2331ZMTIx69+7t9LgBQ0QMkH77WNr9k5SVIbl7Gh0RAABAPuVhjk+i28mGtqyl3w+f1Zwtx/RQp/oymUxGhwQAAJzBapUyU40Z28PHtnFeMZw5cyZ3lcdfJ8B/VdD8xWKxaN68eTp79qw8PUn0oRyp3VaqGChdPCUdWiM16G50RAAAwFmY45cqJLqdrO8N1TVxUaz2JF1Q7IkURdUMMDokAADgDJmp0hs1jBn7hROSZ8ET2r/bt2+frFarGjdunOd6tWrVlJZmK7326KOP6q233pJkW+Hx4osvKj09XVlZWapSpYoeeOAB+8YPlGZmN6lJX+n3z6W4hSS6AQAoT5jjlyrU6HaygAoe6hERLEn68fdjBkcDAABQPL/99pu2bdumyMhIpaen515/5plntG3bNq1atUo33XST3n33XTVo0MDASAEDhA+wHXctkSzZxsYCAABQTGVtjs+KbgPc1rKWluxI0MLtJ/TPvuHycOP/NwAAUOZ5+NhWXRg1djE1aNBAJpNJu3fvznO9fv36kqQKFSrkuV6tWjU1aNBADRo00A8//KCmTZuqdevWioiIkCT5+/vr4sWLslgsMpuvzHnOnTsnSQoI4O02lAH1OknelaTU09Lh9VK9jkZHBAAAnIE5fqma45NhNUDHhtVUzddLf17M0Ordp4wOBwAAOIPJZHu10IjPNewJUrVqVfXo0UMffvihLl68eE2/YmhoqO644w5NmDAh91rjxo2VlZWlbdu25Wm7ZcsWSVKjRo2uaQygVHLzkBr3sZ3HLzQ2FgAA4DzM8fO0NXqOT6LbAO5uZg1qbqvfM4fyJQAAoJSZOnWqsrKy1Lp1a3333XeKj4/X7t279dVXX2nXrl1yc3Mr9Nlx48Zp0aJF2rx5syQpMjJSPXv21P3336+VK1fq4MGDWrZsmR555BHdcccdqlmzprN+LcCxIgbajvGLJIvF2FgAAAD+pjzM8Ul0O9qlc9KyF6RPuuSp1ze0VS1J0spdSTqXmmFMbAAAAAUICwvT1q1b1b17d02YMEHNmjVT69at9cEHH+jpp5/Wa6+9VuizERER6tmzp1566aXca9999506d+6s0aNHKzIyUmPHjtXAgQM1Y8YMZ/w6gHOEdZU8/aTzCdLxzUZHAwAAkEd5mOObrFar1bDRDZCSkqKAgAAlJyfL39/f8QNmZUj/aSilnZPuW5ynXl+f935VXEKKXhsYqXva1nV8LAAAwCnS0tJ08OBB1atXT97e3kaHU6YU9bd1+jwPpUap+e5//Ie080ep7WNSr38bFwcAALA75viOY685Piu6Hc3dU2rSz3YeNz/PrSEtbcv4f9xy3MlBAQAAALC7iAG2Y/xCqXytJwIAADAciW5niBxsO8YtzFO+ZGDzmnIzm7T96DntO3nBoOAAAAAA2EWD7pJ7BencESlhu9HRAAAAlCskup2hfmfJu5J08aR0eH3u5UA/L3VpFChJmruFTSkBAAAAl+ZZUWrY3XYev9DYWAAAAMoZEt3O4OYhhV8uXxI7L8+tIS1tm1LO23pcFguvNwIAAAAuLXyg7RhH+RIAAABnItHtLDnlS+Lzli/pFh4kf293JSSnacOBMwYFBwAAAMAuGvWS3DylM3ulU7uMjgYAAKDcINHtLPU6SxUqSxdPSYfX5V729nBT/2Y1JElzfqd8CQAAZYmV1Zx2x98UpZ63v1S/q+08jvIlAACUNcxH7c9ef1MS3c7i5iE1Kbp8ydKdibqYnuXsyAAAgJ15eHhIklJTUw2OpOzJyMiQJLm5uRkcCVCEiAG2I3W6AQAoM5jjO4695vju9ggGxRQ5SNr6pRS/SOr9juRm+/O3rF1J9apV1MHTF7V0Z6Jua1XL2DgBAECJuLm5qVKlSjp58qQkycfHRyaTyeCoXJ/FYtGpU6fk4+Mjd3emsSjFGveRTG5S0k7pzH6papjREQEAgBJiju8Y9pzj8y8EZ/p7+ZL6nSVJJpNJQ1vW1H+W79Gc34+R6AYAoAwICQmRpNyJMOzDbDardu3a/KMCpZtPFaleR+nAatuq7g7jjY4IAADYAXN8x7DXHJ9EtzO5eUjh/aUtX0hx83MT3ZI0qIUt0b3hwBkdO5uqWpV9jIsTAACUmMlkUvXq1RUUFKTMzEyjwykzPD09ZTZTfQ8uIHyALdEdR6IbAICygjm+Y9hrjk+i29kiBl1OdC/MU76kVmUfta1fVRsOnNH8rcf12C0NjY0TAADYhZubG/WkgfKoST9pyVPSiS3SuaNSpVCjIwIAAHbCHL90YjmMs9XrJFWoIqWelg6vzXNr6OWSJXO2HGcHVwAAAMCV+QVLtdvazuMXGRsLAABAOUCi29ncPKTwfrbz2Pl5bt0aFaIKHm46ePqith495/TQAAAAANhRxADbMX6hsXEAAACUAyS6jRA52HaMXyhlZ+Ve9vVyV+8oW1H7Ob8fMyIyAAAAAPYS3t92PLJROp9obCwAAABlHIluI9TNKV9yptDyJYu2n1BaZrYR0QEAAACwh4BaUs1WkqyULwEAAHAwEt1GcHO/srojdl6eWzfXr6rqAd5KScvSql0nDQgOAAAAgN2EU74EAADAGUh0GyW3fMmiPOVL3MwmDW5RUxLlSwAAAACXl1On+9A66eIZY2MBAAAow0h0G6VuR8mnqq18yaFf89wa0tJWvmT1nlM6dT7diOgAAAAA2EOV+lJwU8maLe1eYnQ0AAAAZRaJbqMUUb6kQZCvmoVWUrbFqoXbTxgQHAAAAAC7yVnVHUf5EgAAAEch0W2kiEG249/Kl0jSbS0pXwIAAACUCTl1ug+sli6dMzISAACAMotEt5Fyypdc+lM6tCbPrf7NasjDzaS4hBTFJ6QYFCAAAACAEgtqIlVrJFkypT3RRkcDAABQJpHoNlKe8iXz89yq5OOpbk2CJUlzt7CqGwAAAHBpOau64ylfAgAA4Agkuo0WOdh2jF8kZWfmuTW0lW1TynlbTygr2+LsyAAAAADYS06d7n0rpPQLxsYCAABQBpHoNlqdDpJPNVv5koN5y5d0aRyoKhU9dfpCun7de9qgAAEAAACUWMgNUqU6UlaatC/G6GgAAADKHBLdRvtr+ZK4+XluebiZNaBZDUnSHMqXAAAAAK7LZLqyqjuO8iUAAAD2RqK7NCiifMltl8uXLI9LUvKlzL8/CQAAAMBVRAyyHfculzLTDA0FAACgrCHRXRrUaX+5fMnZfOVLImv4q3GwnzKyLFqyI8GgAAEAAACUWI2Wkn9NKeOCtH+V0dEAAACUKSS6SwM39yuvMcbOy3PLZDJpSMuakqS5lC8BAAAAXJfZfKVsYTzlSwAAAOyJRHdpkfMa467F+cqXDG5RU2aTtPnwWR06fdH5sQEAAACwj/DLC1x2/yRlZRgbCwAAQBlCoru0qNNeqhh4uXzJL3luBfl7q2PDQEms6gYAAABcWu2bbfP+tGTp0JqrtwcAAECxkOguLdzcr6zu+Fv5EklXypdsPS6LxerMyAAAAADYi9lNatLPdh5H+RIAAAB7IdFdmkQOsh3j85cv6RUZIj8vdx07e0m/HfrT+bEBAAAAsI+c/Xl2LZEs2cbGAgAAUEaQ6C5NcsqXpJ2TDuQtX+Lt4aa+N1SXJM35nfIlAAAAgMuq21HyriSlnpYOrzc6GgAAgDKBRHdpYna7Ur4krqDyJbUkST/9kaBLGaz8AAAAAFySm4fUpK/tPJ7yJQAAAPZAoru0iRxsOxZQvqRN3cqqXcVHFzOyFR2baEBwAAAAAOwiZ4FL/CLJYjE2FgAAgDKARHdpU6edVDGowPIlJpMpd1PKOVsoXwIAAAC4rLCukqefdD5BOr7Z6GgAAABcHonu0sbsdmVzmtgCype0sJUvWbvvtBKT05wZGQAAAAB7cfeSGvWyncctMDYWAACAMoBEd2mUU75k1yIpKyPPrdpVfXRj3SqyWqV5W48bEBwAAAAAu8hZ4BK/ULJajY0FAADAxZHoLo1qt71cviRZOvhLvtt/LV9iZUIMAAAAuKYG3SX3CtK5I1LCdqOjAQAAcGkkuksjs5sUMdB2XkD5kj43VJeXu1n7Tl7QH8eTnRwcAAAAALvwrCg17G47j19obCwAAAAujkR3aRU5yHbctThf+RJ/bw/1igyRJM35nU0pAQAAAJcVfnmBSxzlSwAAAEqCRHdpVbut5BtsK19yYHW+2znlSxZuP6GMLIuTgwMAAABgF416SW6e0pm90qldRkcDAADgskh0l1ZmNyn88uY0cfPz3e7YMFBBfl46m5qpn3efdG5sAAAAAOzD21+q39V2HrfA2FgAAABcGInu0ixysO0Yn798iZvZpMEtLm9KSfkSAAAAwHVF5CxwoU43AADA9SLRXZrVvlnyDZHSk6UDP+e7PaRlLUnSz7tP6s+LGfnuAwAAAHABjftIJjfpZKx0Zr/R0QAAALgkEt2lmdntyuqO2Pn5bjcO8VNUTX9lZlu1aPsJ58YGAAAAwD58qkj1OtrOKV8CAABwXUh0l3Y55Ut2LZGy0vPdHnp5VfecLZQvAQAAAFxWzv488ZQvAQAAuB4kuku70L+WL1md7/aAZjXkbjZpx7Fk7U067/z4AAAAAJRck36STNKJrdK5I0ZHAwAA4HJIdJd2ZrMUMdB2Hjsv3+2qvl7q0jhIkjRny3FnRgYAAADAXvyCpdptbefxi4yNBQAAwAWR6HYFVylfclurmpKkeVuPKdtidWZkAAAAAOwlZ3+eOMqXAAAAXCsS3a4g9CbJr7qUniLt/znf7a5NghRQwUNJKelat++0AQECAAAAKLHw/rbj0f9J5xONjQUAAMDFkOh2BVcpX+Ll7qYBzWpIkuayKSUAAADgmgJqSTVbSbJSvgQAAOAakeh2FRGDbMfdPxVYvmRoq1qSpGWxiTqflunEwAAAAADYTfjl8iXxlC8BAAC4FiS6XUWe8iWr8t1uVitA9QMrKi3ToqV/8JojAAAA4JJy6nQfWiddPGNsLAAAAC6ERLeryFO+ZH6+2yaTSUNb2lZ1z6F8CQAAAOCaqtSXQppK1mxp9xKjowEAAHAZJLpdSeRg23H3T1JmWr7bg1vUlMkk/e/gnzr6Z6qTgwMAAABgF+GXF7jEUb4EAACguEh0u5JaN0p+NQotX1KjUgW1C6sqSZq75bizowMAAABgDznlSw6sli6dMzISAAAAl0Gi25X8tXxJ3PwCm+SUL5m79ZisVquTAgMAAABgN4GNpWqNJUumtCfa6GgAAABcAoluV5NTvmRXweVLbo0KkY+nmw6fSdXvh886OTgAAAAAdpGzqjue8iUAAADFQaLb1dRqYytfknG+wPIlPp7u6h1VXRKbUgIAAAAuK/xyonvfCin9grGxAAAAuAAS3a7GbJYiB9nOY+cV2GRoq5qSpMU7EpSWme2kwAAAAADYTUhTqXJdKStN2hdjdDQAAAClHoluVxQxyHbcvbTA8iU316uqmpUq6HxalmLikpwbGwAAAICSM5murOqOo3wJAADA1ZDodkW12kj+NS+XL1mZ77bZbNLgFrZV3ZQvAQAAAFxUzkb0e5cXuMAFAAAAV5DodkVm85VV3YWULxnS0pboXrPnlE6eZ1IMAAAAuJwaLS8vcLlQ4P48AAAAuIJEt6vKqdO9e6mUeSnf7fqBvmpZu5IsVmnB1hPOjQ0AAABAyZnNUnh/23k85UsAAACKQqLbVdVsLfnXsq3u2Je/fIkkDWlZS5KtfInVanVmdAAAAADsIadO9+6fpKwMY2MBAAAoxUh0uyqz+UrNvrj5BTbpf0MNebqbtSvxvOISUpwXGwAAAAD7qH2zVDFQSkuWDq0xOhoAAIBSi0S3K4scbDsWUr4kwMdDPcKDJUlzfj/uzMgAAAAA2IPZTWrSz3YeR/kSAACAwpDodmW1ilO+xLYp5YJtx5WZbXFmdAAAAADsIeJy+ZJdSyRLtrGxAAAAlFIkul2ZyXRlU8rYeQU26dQoUNV8PXXmYobW7DnlvNgAAAAA2EfdjpJ3JSn1tHR4vdHRAAAAlEokul3dVcqXeLiZNbC5bVX3nC3HnBkZAAAAAHtw85Ca9LWdx1O+BAAAoCAkul1dzVZSQKiUeVHat6LAJjnlS1bEndS5VHZqBwAAAFxO+OXyJfGLJAslCQEAAP6ORLerM5mkiIG280LKl0TWCFCTED9lZFu0eEeCE4MDAAAAYBdhXSVPP+l8gnRsk9HRAAAAlDokusuC3PIlywosXyJJt7WqJYnyJQAAAIBLcveSGvWynVO+BAAAIB8S3WXBX8uX7I0psMmA5jXkZjZp65FzOnDqgpMDBAAAAFBiEZfLl8QtlKxWY2MBAAAoZUh0lwV/LV8SN7/AJkF+3urUsJokae6W404KDAAAAIDdNOguuVeQko9ICduMjgYAAKBUIdFdVkQOsR13L5MyUgtsMvRy+ZJ5W4/LYmEFCAAAAOBSPCtKDbvbzuMoXwIAAPBXJLrLipotpYDatvIl+wouX9I9PFh+3u46fu6SNh484+QAAQAAAJRY+OU3OeMpXwIAAPBXJLrLCpNJirw86Y2dX2ATbw839buhhiRpzu+ULwEAAID9HT9+XCNGjFDVqlVVoUIFNW3aVJs3by60/erVq2UymfJ9EhMTnRi1C2nUS3LzlM7sk07GGx0NAABAqUGiuyyJHGw77im8fMltrWpKkpbuTNDF9CxnRQYAAIBy4OzZs2rfvr08PDy0dOlSxcXFafLkyapcufJVn929e7cSEhJyP0FBQU6I2AV5+0v1u9rO4ylfAgAAkMPd6ABgRzVaSpVqS+eO2MqX5GxQ+Rcta1dW3ao+OnQmVdGxiRrSspYBgQIAAKAseuuttxQaGqqZM2fmXqtXr16xng0KClKlSpUcFFkZEzFA2httq9Pd5XmjowEAACgVWNFdlphMUsQg23nsvEKamHKT23O2HHNSYAAAACgPFi5cqNatW2vYsGEKCgpSixYt9Omnnxbr2ebNm6t69erq0aOH1q1bV2Tb9PR0paSk5PmUK437SGZ36WSsdGa/0dEAAACUCiS6y5rIQbbjnuhCy5cMbmErX7J+/xmdOHfJSYEBAACgrDtw4ICmTZumhg0bKjo6Wg8//LDGjh2rWbNmFfpM9erVNX36dM2ZM0dz5sxRaGiounTpoi1bthT6zKRJkxQQEJD7CQ0NdcSvUySr1aqMLIvTx5Uk+VSR6na0ncctMCYGAACAUsZktZavrbpTUlIUEBCg5ORk+fv7Gx2O/Vmt0ns32MqXDJt1JfH9N3d8vEH/O/innunVWI92beDcGAEAABygzM/zXICnp6dat26t9evX514bO3asNm3apA0bNhS7n86dO6t27dr68ssvC7yfnp6u9PT03J9TUlIUGhrqtO8+PStbL87bqeRLmZo+opXMZpPDx8xn82fS4vFSjRbSQ6udPz4AAIATXMscnxXdZY3JdGVTykLKl0jS0FZXypeUs//XAQAAAAepXr26IiIi8lwLDw/XkSNHrqmfG2+8Ufv27Sv0vpeXl/z9/fN8nGlv0gUt2HZCy+OSNDlmt1PHztWknySTdGKrbZELAABAOUeiuyzKqdO9d7mUcbHAJn2aVpe3h1kHTl3UtqPnnBYaAAAAyq727dtr9+68id89e/aoTp0619TPtm3bVL16dXuGZldRNQP05tCmkqSPft6v+VuPOz8I3yCpTjvbefwi548PAABQypDoLotqtJAq1ZEyU23J7gL4ernr1sgQSdLcLQZMzAEAAFDmjB8/Xhs3btQbb7yhffv2afbs2frkk0/06KOP5raZMGGC7r333tyfp0yZogULFmjfvn3auXOnnnjiCa1atSrPM6XRkJa19HCXMEnSs3N2aOuRs84PInyA7Ri30PljAwAAlDIkussik+lKbe7Y+YU2yylfsnD7CaVnZTs+LgAAAJRpbdq00bx58/TNN98oKipKr732mqZMmaK77747t01CQkKeUiYZGRl66qmn1LRpU3Xu3Fnbt2/XihUr1K1bNyN+hWvyTM/G6hERrIwsix784nfnb/Qe3t92PPo/6Xyic8cGAAAoZdiMsqw6sVX6pIvkXkF6dr/kWTFfk2yLVe3fXKXElDRNu7ulejctva+HAgAAXE25mechHyO/+4vpWRo6bb12JZ5XRHV//fhwW/l4ujsvgE+7Scc3S33+I934oPPGBQAAcAI2o4RUvbmtfEnWJWlPdIFN3MwmDWpRU5I0h/IlAAAAwDWr6OWuGfe1VjVfT8UlpGj8d9tksThxLVHE5fIl8ZQvAQAA5RuJ7rLKZJIiB9vO4+YX2mxoS1uie/XukzpzId0JgQEAAABlS63KPvr4nlbydDMrOjZJ/xezx3mD59TpPrROunjGeeMCAACUMiS6y7KcRPee5VLGxQKbNAz20w21ApRlsWrBthNODA4AAAAoO1rVqaJJQ5pKkj78eZ8WbHPSG5NV6kkhTSVrtrR7iXPGBAAAKIUMT3QfP35cI0aMUNWqVVWhQgU1bdpUmzdvLrT96tWrZTKZ8n0SE9l8JZ/qzaTKdYssXyJJQ1vaNqWcu/WYkwIDAAAAyp6hrWppdOf6kqRnftyhrUfOOmfg8IG2YxzlSwAAQPllaKL77Nmzat++vTw8PLR06VLFxcVp8uTJqly58lWf3b17txISEnI/QUFBTojYxfy1fEnsvEKb9W9WQx5uJu08nqLdieedFBwAAABQ9jzbq4m6hwcpI8uih778XSfOXXL8oDl1ug+sli6dc/x4AAAApZChie633npLoaGhmjlzpm688UbVq1dPPXv2VFhY2FWfDQoKUkhISO7HbDZ8cXrpFDHIdtwbI6VfKLBJlYqe6trY9j8K5mxhVTcAAABwvdzMJk25s4WahPjp1Pl0PfjFZqVmZDl20MDGUrXGkiWzyDc5AQAAyjJDs8MLFy5U69atNWzYMAUFBalFixb69NNPi/Vs8+bNVb16dfXo0UPr1q0rtF16erpSUlLyfMqV6s2kyvVs5Uv2FlG+pJWtfMm8rceVlW1xVnQAAABAmePr5a5P722tqhU9FXsiRU99v10Wi9Wxg+as6o6nfAkAACifDE10HzhwQNOmTVPDhg0VHR2thx9+WGPHjtWsWbMKfaZ69eqaPn265syZozlz5ig0NFRdunTRli1bCmw/adIkBQQE5H5CQ0Md9euUTiaTFDnIdl5E+ZKujYNU2cdDp86na+2+086JDQAAACijQqv46ON7WsnTzaylOxM1ZcUexw4YfjnRvW9FoW9yAgAAlGUmq9Xq4KUFhfP09FTr1q21fv363Gtjx47Vpk2btGHDhmL307lzZ9WuXVtffvllvnvp6elKT0/P/TklJUWhoaFKTk6Wv79/yX4BV5GwXfq4k+TuLT2zX/LyLbDZywt2ataGw+rfrIY+GN7CyUECAACUTEpKigICAsrXPA+SSvd3/+Pvx/T0D9slSe/d2VwDm9d0zEBWq/R+c+nsIWnY51f26gEAAHBh1zLPM3RFd/Xq1RUREZHnWnh4uI4cOXJN/dx4443at29fgfe8vLzk7++f51PuhNwgVakvZaVJe5YV2iynfMny2ESlpGU6KzoAAACgzLqtVS2N7lRfkvTMjzu07eg5xwxkMl1Z1R1H+RIAAFD+GJrobt++vXbv3p3n2p49e1SnTp1r6mfbtm2qXr26PUMrW0ymK5tSxs0vtFnTmgFqGOSr9CyLftqR4JTQAAAAgLLu2VubqFuTIGVkWfTgF5uVkHzJMQNFDLQd9y6XMtMcMwYAAEApZWiie/z48dq4caPeeOMN7du3T7Nnz9Ynn3yiRx99NLfNhAkTdO+99+b+PGXKFC1YsED79u3Tzp079cQTT2jVqlV5nkEBcl5d3BtTaM0+k8mkIS1tq7rnbDnmrMgAAACAMs3NbNJ7w1uocbCfTp1P14NfbFZqRpb9B6rRUvKvKWVckPavsn//AAAApZihie42bdpo3rx5+uabbxQVFaXXXntNU6ZM0d13353bJiEhIU8pk4yMDD311FNq2rSpOnfurO3bt2vFihXq1q2bEb+C6whpWqzyJYNb1JTZJG06dFaHz1x0YoAAAABA2eXr5a4Z97VWlYqe2nk8RU//sF0Wi523SzKbpfD+tvO4BfbtGwAAoJQzdDNKI5TmjWocbuWr0q+TpSb9pDu/LrTZPf/9n37de1rjujXU+B6NnBggAADA9SvX87xyzpW++02H/tRdn25UZrZVY7s11JP2nm8fWid93kfyCpCe2Se5e9q3fwAAACdymc0o4WR5ypecL7TZ0MvlS+ZuPWb/VSYAAABAOdambhX9e3BTSdL7K/dq0fYT9h2g9s1SxUApPVk6uMa+fQMAAJRiJLrLk+AoqUqYlJ0u7YkutFmvyBD5ernr6J+XtPnwWScGCAAAAJR9t7cO1UOd6kuSnv5hu7YfPWe/zs1utjc4JSme8iUAAKD8INFdnphMV1Z1x84rtFkFTzf1aRoiSZrzO5tSAgAAAPb23K1N1K1JkNKzLHrwi81KTE6zX+cRA2zHXUukbAdsegkAAFAKkegubyIH2Y5XKV8y5HL5kiV/JOhSRrYTAgMAAADKDzezSVPubK5Gwb46eT5dD36x2X7z7rodJe9KUuoZ6ch6+/QJAABQypHoLm+Co6SqDWzlS3YvK7TZjXWrqFblCrqQnqXlcYlODBAAAAAoH/y8PfTf+9qoSkVP/XE8WU//sN0+e+S4eUhN+trO4xaWvD8AAAAXQKK7vDGZpIhBtvMiypeYzabcVd1zthx3QmAAAABA+RNaxUfTR7SSh5tJS/5I0Hsr99qn4/DL5UviF0kWi336BAAAKMVIdJdHOXW6962Q0lIKbTakRU1J0tq9p5SUYseagQAAAABy3Viviv49qKkk6b2Ve7V4x4mSdxrWVfL0ky4kSsc2lbw/AACAUo5Ed3kUHClVbWgrX7Kn8PIldatVVOs6lWWxSvO3sqobAAAAcJTb24TqgQ71JElPfb9dO46dK1mH7l5S41tt5/GULwEAAGUfie7yyGS6sill7Pwimw5tlVO+5JisVjvUCwQAAABQoAl9wtW1caDSsyx68IvNSkwu4VuVOeVL4hZKzOUBAEAZR6K7vCpm+ZI+TavL092sPUkXtPN44e0AAAAAlIyb2aT3h7dQwyBfJaWk66EvN+tSRvb1d9igu+ThIyUfkRK22S1OAACA0ohEd3kVFFGs8iUBFTzUMyJYkm1VNwAAAADH8fP20H/va6PKPh7acSxZz/y4/frfrPT0sSW7JduqbgAAgDKMRHd5ZTJdWdUdO6/IpjnlSxZuP6GMLHZsBwAAABypdlUfTR/RSh5uJi3ekaD3V+67/s4iBtqO8ZQvAQAAZRuJ7vIsp073vhVSWnKhzTo2qKZAPy/9eTFDq3efdE5sAAAAQDl2U/2qen1QlCTp3RV7tGRHwvV11LCn5OYpndknnYy3Y4QAAAClC4nu8iwoQqrWSMrOkHYXXr7E3c2sQc1rSJLmbjnurOgAAACAcu2ONrX1jw71JElP/bBNfxwrfHFKobz9pbBbbOfxlC8BAABlF4nu8uw6ypes3JWksxczHB0ZAAAAAEkv9AlXl8aBSsu06IEvNikpJe3aOwkfYDtSpxsAAJRhJLrLu4hBtuP+lUWWL2kS4q+I6v7KzLZq0Y4TzokNAAAAKOfczCa9P7yFGgT5KiklXQ99sVlpmdnX1knj3pLZXToZK53Z75hAAQAADEaiu7wLCpeqNb5cvmRpkU1zVnXPoXwJAAAA4DT+3h76732tVcnHQ9uPJeuZH3fIei0bS/pUkep2tJ3HLXBMkAAAAAYj0V3emUxXNqWMnV9k04HNa8jNbNL2o+e07+QFh4cGAAAAwKZO1YqadncruZtNWrT9hD5Yte/aOoi4XL6EOt0AAKCMItGNK3W696+ULp0rtFk1Xy91aRQoSZqz5ZgTAgMAAACQo21YVb02KEqS9H8xe7T0j4TiP9yknySTdGKrdO6IYwIEAAAwEIluXFf5kvlbjyvbcg2vSwIAAAAoseE31tb97etJksZ/v007jxe+z04evkFSnXa28/hFDooOAADAOCS6YZOzqjtufpHNuoUHyd/bXQnJadqw/4zj4wIAAACQxwt9mqhzo0ClZVr0wKzNOpmSVrwHwy+XL4mjfAkAACh7SHTDJqdO976iy5d4ubupf7MakihfAgAAABjB3c2sD+5qoQZBvkpMSdODX/6utMzsqz8Y3t92PPo/6XyiY4MEAABwMhLdsAkKlwKbSJbMYpcvWbYzURfSs5wRHQAAAIC/8Pf20H/va61KPh7afvScnv1xh6zWq5QWDKgp1WwtyUr5EgAAUOaQ6MYVOeVLYucV2axFaCXVr1ZRlzKzr20DHAAAAAB2U6dqRU27u5XczSYt3H5CH67ad/WHIi6XL4mnfAkAAChbSHTjiohBtuP+VUWWLzGZTBrSsqYkypcAAAAARmobVlWvDoySJE2O2XP1hSg5dboPrZMusucOAAAoO0h044qgJlJg+OXyJT8V2XRwy1oymaSNB/7UsbOpTgoQAAAAwN/ddVNtjWxXV5L05PfbtfN4cuGNq9STQppK1mxp9xLnBAgAAOAEJLqRV86mlFcpX1KzUgW1rV9VkjRvy3EHBwUAAACgKC/2DVenRoG6lJmtB7/YrJMpaYU3Dh9oO8ZRvgQAAJQdJLqRV275kp+lS2eLbDqkpW1Tyrlbj1994xsAAAAADuPuZtYHw1uofmBFJSSn6aEvf1daZnbBjXPqdB9YXWTJQgAAAFdCoht5BTWRgiJs5Ut2FV2+pHdUiHw83XTw9EVtOXLOOfEBAAAAKFBABQ99dl8bBVTw0Laj5/TcnB0FL0gJbCxVa2yb8+9Z5vxAAQAAHIBEN/LLWdUdN7/IZhW93HVrVIgkNqUEAAAASoO61Spq2oiWcjebtGDbCU1dvb/ghjmruilfAgAAyggS3cgvp053McqXDL1cvmTx9hOFvxoJAAAAwGnahVXTKwMjJUnvRO/Wsp2J+RuFX050718ppV9wYnQAAACOQaIb+QU2Lnb5krb1q6pGgLdS0rK0Mv6kkwIEAAAAUJS7b6qjke3qSpLGf7dNO48n520Q0lSqXFfKSpP2Lnd6fAAAAPZGohsFixxsO8bOK7KZ2WzS4JY1JVG+BAAAAChNXuwbro4Nq+lSZrYe/GKzTp5Pu3LTZLqyqjue8iUAAMD1kehGwXLqdB/4WUr9s8imQy6XL/llzymdOp/u4MAAAAAAFIe7m1kf3tVS9QMrKiE5TQ998XvecoMRA23HPculzEvGBAkAAGAnJLpRsMBGUlCkZMmSdhddviQs0FfNQysp22LVgm3HnRQgAAAAgKsJqOCh/97XRgEVPLTt6Dk9P2eHrFar7WbNVpJ/LSnzorR/lbGBAgAAlBCJbhSumOVLJGloK9uq7jlbSHQDAAAApUm9ahU17e6WcjObNH/bCU1dvd92w2SSwvvbzuMoXwIAAFwbiW4ULnKQ7Xhg9VXLl/S/obo83cyKT0hR3IkUh4cGAAAAoPjaNaimVwZESpLeid6t6NhE242Iy3W6dy+VsjIMig4AAKDkSHSjcNUaSsFRtvIlu5YU2bSSj6e6hQdJkuayKSUAAABQ6oy4uY7ua1tHkjT+u222BSqhN0kVg6T0ZOngGoMjBAAAuH4kulG0nE0pi1G+JGdTyvnbTigr2+LAoAAAAABcj3/1i1DHhtWUmpGtB2Zt0qmLWVJ4P9vN+AXGBgcAAFACJLpRtJzyJQd/uWr5ki6NA1W1oqdOX0jXmr2nHB8bAAAAgGvi7mbWh8Nbqn61ijqRnKbRX25WRqPLie5dS6TsLGMDBAAAuE4kulG0POVLFhfZ1MPNrAHNa0hiU0oAAACgtArw8dCM+1rL39tdW46c0wtbAmStUFlKPSMdWW90eAAAANeFRDeuLmdVd+z8qzYderl8SUxckpJTMx0XEwAAAIDrVj/QV1PvbiU3s0k/bkvSroCOthtxC40NDAAA4DqR6MbVRQy2HQ+svmr5ksga/moc7KeMLIuW/JHg+NgAAAAAXJcODatpYv8ISdI7RxvbLsYvkizstwMAAFwPiW5cXbUGUnBTyZp91fIlJpNJQ1vVlCTN2XLMGdEBAAAAuE73tK2re26uo7XZUTpvrSBdSJSObTI6LAAAgGtGohvFk1u+ZN5Vmw5qXlNmk/T74bM6ePqiY+MCAAAAUCIv9Y9QmwYhWmlpIUlK3T7X4IgAAACuHYluFE9kTvmSX6SLZ4psGuTvrY4NAyVJ81jVDQAAAJRqHm5mTb2rlbZW7CRJurB1rtIzswyOCgAA4NqQ6EbxVA2TQopXvkSShraybUo5Z8txWSxWR0cHAAAAoAQCfDw08t4HdEleCrKc1Eez58hqZR4PAABcB4luFF/EINuxGOVLekYEy8/LXcfPXdL/Dha9gSUAAAAA49WrEaiLoV0lSV57F+vjNQcMjggAAKD4SHSj+HLKlxxcc9XyJd4ebup7Q3VJ0lzKlwAAAAAuodqNwyRJt5o36a1l8YqJSzI4IgAAgOIh0Y3iqxomhdxwuXzJoqs2zylf8tMfCUrNoMYfAAAAUOo17Cm5eSrMnKCGOqYnvt2q+IQUo6MCAAC4KhLduDaRg2zH2PlXbdq6TmXVruKjixnZio5NdGhYAAAAAOzA218Ku0WSNDpwpy5mZOuBWZt1+kK6wYEBAAAUjUQ3rk1One6Da6SLp4tsajKZNKRlTUnS3C3HHRwYAAAAALsIHyBJGuT1u+pW9dHxc5c05svflZ6VbXBgAAAAhSPRjWvz1/Il8VcvXzKkha18ydp9p7Un6byjowMAAABQUo17S2Z3uZ2K06yBVeXn7a7Nh8/qhbk7ZbVajY4OAACgQCS6ce1yNqWMm3/VprWr+qh7eLCsVumx2Vt0KYNVIAAAAECp5lNFqttRklQnaYU+uqul3MwmzdlyTJ+sOWBwcAAAAAUj0Y1rl1OnuxjlSyRp0pCmCvTz0p6kC3p1caxjYwMAAABQchG28iWKX6hOjQL1Ur8ISdKby3ZpRVySgYEBAAAUjEQ3rl2V+lL1ZpLVUqzyJYF+XppyR3OZTNI3vx3Vou0nnBAkAAAAgOvWpJ8kk3Riq3TuiO5tW0d331RbVqs07tut2pWYYnSEAAAAeZDoxvXJKV8SO69Yzds3qKZHuzSQJE2Y+4cOn7noqMgAAAAAlJRvkFSnne08fpFMJpMmDohUu7CqupiRrQdmbdaZC+nGxggAAPAXJLpxfSIG2Y6Hfi1W+RJJeqJ7Q7WpW1kX0rP0+DdblZFlcVx8AAAAAEom/HL5krgFkiQPN7Om3t1Sdav66NjZS3rwi806TbIbAACUEiS6cX2q1JOqN79cvmRhsR5xdzPrvTtbqJKPh3YcS9Zby3Y5NkYAAAAA1y+8v+149H9SSoIkqZKPp2bc10Z+3u7acuScbp3yq37Zc8rAIAEAAGxIdOP65WxKWczyJZJUo1IFvXNbM0nSf9ce1Mp4NrIBAAAASqWAmlLN1rbzXYtzLzcI8tWch9upcbCfTl9I132f/abXF8cpPSvboEABAABIdKMkcsuXrJUuFH8VR4+IYI1qX1eS9NQP25WQfMn+sQEAAAAouYi85UtyNAr204LH2uvetnUkSTPWHtSQqeu1/9QFZ0cIAAAgiUQ3SqJKPalGi2sqX5Lj+d5NFFXTX+dSMzXum23KyqZeNwAAAFDq5NTpPrwu39483h5uenVglD69t7Uq+3go9kSK+r2/Vt9tOiKr1WpAsAAAoDwj0Y2SyVnVHTf/mh7zcnfTh8NbytfLXb8d+lPvr9xr99AAAAAAlFCVelLIDbbFLbuWFNikR0Swlo7rpHZhVXUpM1vPzflDj32zVcmXMp0cLAAAKM9IdKNkcup0X2P5EkmqW62i/j04SpL0wc/7tH7f6as8AQAAAMDpcsqXFPEWZ0iAt776x0167tYmcjebtGRHgvq896s2HfrTSUECAIDyjkQ3SqZy3esuXyJJA5vX1B2tQ2W1SuO+26bTF9LtHyMAAACA6xc+0HY88It06Vyhzcxmkx7uEqYfH26nOlV9dPzcJd3x8QZNWbGHUoUAAMDhSHSj5CIH246x867r8YkDItUwyFenzqfrye+3y2Khnh8AAABQagQ2kgKbSJZMac+yqzZvHlpJS8Z21JCWNWWxSlNW7NXwTzfq2NlUJwQLAADKKxLdKLmIyys8Dq+TLpy85screLrpw7taysvdrDV7TumTXw/YOUAAAAAAJZKzKWVc8d7i9PVy1//d3lzv3dlcvl7u2nTorHq/96uW7EhwYJAAAKA8I9GNkqtcV6rR8rrLl0hS4xA/TRwQKUn6T/RubTly1o4BAgAAACiRnDrd+1dK6ReK/djA5jX109iOah5aSefTsvTo7C167scdSs3IclCgAACgvCLRDfvILV8y/7q7uLNNqPrdUF1ZFqsen71Vyans0g4AAACUCsFRUuV6UlaatHf5NT1au6qPfhjTVo91bSCTSfpu81H1e3+tdh5PdlCwAACgPCLRDfv4a/mS80nX1YXJZNKkIU1Vu4pt45rn5uyQ1Uq9bgAAAMBwJtOVVd3X8Ranh5tZT/dqrK8fuEkh/t46cPqiBk9dpxm/HmCPHgAAYBckumEfletINVuVqHyJJPl5e+jDu1rIw82kZbGJ+mrjYTsGCQAAAOC6hV9e3LJnuZR56bq6aBdWTUvHdVTPiGBlZlv1+pJ4jfx8k06eT7NjoAAAoDwi0Q37iRhkO5agfIkk3VCrkp67tYkk6bUl8Yo9wSuNAAAAgOFqtpT8a0mZF6X9q667m8oVPfXxPa30+qCo3A3p+7z3q37efe0b2wMAAOQg0Q37iRxkO5agfEmOf3Sop25NgpSRZdHjs7fqYjqb1QAAAACGMpmk8P6287jrf4vT1pVJI26uo0WPd1CTED+dvpChUTM36dVFcUrPyrZDsAAAoLwh0Q37qVTbVr5E1hKVL5FsE993hjXLrd/3rwU77RMjAAAAgOuXU6d791IpK6PE3TUK9tP8R9trZLu6kqTP1h3UoI/Wa9/J8yXuGwAAlC8kumFfkYNtxxKWL5GkKhU99f7wFjKbpLlbjmvO78dK3CcAAACAEgi9SaoYJKUnSwfX2KVLbw83TRwQqf/e11pVKnoqPiFF/T5Yq29+O8Lm9AAAoNhIdMO+Ii5vUHN4nXQ+scTd3Vivip7o3kiS9K8FO7X/1IUS9wkAAADgOpndpPB+tvP4BXbtult4sJaN66gODaopLdOiCXP/0KOztyg5NdOu4wAAgLKJRDfsq1JtqWZr2cqXLLJLl492baB2YVWVmpGtR7/eorRMavYBAAAAhgm/XL5k1xIpM82uXQf5e+uL+2/UhN5N5G426ac/EtX7vTX67eCfdh0HAACUPSS6YX+55Uvm2aU7N7NJU+5orqoVPbUr8bz+vSTeLv0CAAAAuA51O0i+IVLqGWnFy3bv3mw2aXTnMM19pJ3qVvXRieQ03fnJBv3f8t3KyrbYfTwAAFA2kOiG/eWWL1lvl/Ilkm1lx+Tbm0mSvtx4WEv/SLBLvwAAAACukZuHNOAD2/n/pku7lzlkmBtqVdLisR01tGUtWazS+6v26Y5PNuron6kOGQ8AALg2Et2wv0qhUq02kqxS3EK7ddulcZBGd64vSXp2zg4muAAAAIBRGvWUbn7Edr7gEbstcPk7Xy93Tb69md67s7n8vNz1++Gz6vP+r1q0/YRDxgMAAK6LRDccI2KQ7Win8iU5nu7ZWC1qV9L5tCyN/XarMnl1EQAAADBG94lSSFNbCZN5oyWL4+bmA5vX1E/jOqrl5X8LPP7NVj39w3ZdTM9y2JgAAMC1kOiGY+SULzmyQUqxX5kRDzez3r+zhfy93bX1yDn9Z/luu/UNAAAA4Bq4e0lDP5M8fKQDq6X17zt0uNAqPvp+dFs9fksDmUzSj78fU78P1uqPY8kOHRcAALgGEt1wjEqhUq0bJVmlePuVL5FsE9y3b7tBkvTxLwe0evdJu/YPAAAAoJgCG0m3vmk7X/WadPx3hw7n7mbWUz0b65sHb1b1AG8dPH1RQ6at0ydr9stisTp0bAAAULqR6IbjRA6yHWPn273rW6Oq6962dSRJT32/XUkpaXYfAwAAAEAxtLzX9kanJUv68R9S+nmHD3lz/apaOq6jbo0MUWa2VW/8tEv3zfxNJ/l3AQAA5RaJbjhOnvIl9t8s5oU+4Yqo7q8zFzP0xLfblM0KDgAAAMD5TCap/3tSQKh09qD00zNOGbaSj6emjWipSUOaytvDrF/3ntat7/2qVbuSnDI+AAAoXUh0w3ECal0pXxJn3/IlkuTt4aYP72ohH083bThwRh+u2mf3MQAAAAAUQ4XK0pBPJZNZ2v6NtOMHpwxrMpk0/MbaWvx4B4VX99efFzN0/+ebNXFhrNIys50SAwAAKB1IdMOxIgfbjnHzHdJ9/UBfvT4oSpL03so92njgjEPGAQAAAHAVddpKnZ+znS8eL/150GlDNwjy07xH2mlU+7qSpM/XH9Kgj9Zpb5Ljy6gAAIDSgUQ3HOuv5UtO7nLIEENa1tLQlrVksUrjvt2qPy9mOGQcAAAAAFfR8Wmpdlsp47w05x9SdqbThvb2cNPL/SM1c2QbVa3oqV2J59X/w7X6+n+HZbVS5hAAgLKORDccK6Cm1OhW2/mPo6TMSw4Z5tWBkaofWFFJKel6+oftTGQBAAAAI7i520qYeAdIx3+Xfn7D6SF0bRKkpU90VMeG1ZSWadE/5+3UmK9+17lUFsQAAFCWkeiG4w34QKoYJJ2Mk5Y+55AhKnq566O7WsrT3axVu07qv2ud95okAAAAgL+oFCr1f992vvZd6cAvTg8hyM9bs0bdqH/2CZeHm0nRsUm6dcqv2rCfUocAAJRVJLrheL5B0tBPJZmkLbOkP350yDDh1f31r34RkqS3lu3S9qPnHDIOAAAAgKuIHCS1vFeSVZo3Wrro/ASz2WzSg53qa+7D7VWvWkUlpqTprhkb9Z/o3crMtjg9HgAA4FgkuuEc9btInZ6xnS8aJ53e55BhRtxUW72jQpSZbdVj32xRSprzagICAAAA+Itb35SqNZLOJ0gLH5MMKi/YtFaAFj/eQcNa1ZLVKn348z7d/vEGHf0z1ZB4AACAY5DohvN0eV6q00HKuCD9MFLKTLP7ECaTSW8OvUG1KlfQ0T8vacLcP6jXDQAAABjBs6I09L+Sm6e0+ydp0wzDQqno5a53hjXTB8NbyM/bXVuPnFOf937Vgm3HDYsJAADYF4luOI/ZTRo6Q/KpJiX9IS3/p0OGCajgoQ+Gt5C72aQlOxL0zW9HHTIOAAAAgKuofoPU/RXbefQ/paRYQ8Pp36yGfhrbUa3qVNb59CyN+3abnvx+my6kZxkaFwAAKDkS3XAu/+rSkI9t55tmSLHzHTJMi9qV9UyvxpKkVxbFaldiikPGAQAAAHAVNz8sNewpZadLP/5DyrxkaDihVXz03UM3a2y3hjKbpLlbjqvv+7+yxw8AAC6ORDecr0F3qcN42/nCx6U/DzhkmAc71leXxoFKz7LosdlblZrBKg0AAADA6UwmaeBUqWKQdCretrLbYO5uZj3Zo5G+faitagR46/CZVA2dtl7TVu+XxULpQwAAXBGJbhij64tS6M1Seor0wygpK93uQ5jNJk0e1kxBfl7ad/KCJi409jVJAAAAoNzyDZQGT7edb/6vFL/Y2Hguu7FeFS0d10l9moYoy2LVW8t26Z7P/qekFPvvJwQAAByLRDeM4eYu3fZfqUJlKWGbFPOyQ4ap6uulKXc2l8kkfb/5GJvNAAAAAEZp0E1q97jtfOFjUnLpmJsH+Hjoo7ta6s0hTVXBw03r9p3RrVPWaEVcktGhAQCAa0CiG8YJqCUNvlyv+3/THLaqo11YNT1+S0NJ0gtz/9DB0xcdMg4AAACk48ePa8SIEapataoqVKigpk2bavPmzUU+s3r1arVs2VJeXl5q0KCBPv/8c+cEC+e75SWpenPp0llp3mjJkm10RJIkk8mkO2+srUWPd1BEdX+dTc3UA19s1ksLdiots3TECAAAikaiG8Zq1OvKqo4Fj0hnDztkmLG3NNCN9aroYka2Hv9mi9KzmKwCAADY29mzZ9W+fXt5eHho6dKliouL0+TJk1W5cuVCnzl48KD69u2rrl27atu2bXriiSf0wAMPKDo62omRw2ncPaXbPpM8KkqHfpXWvmt0RHk0CPLVvEfb6R8d6kmSvthwWAM/XKc9SecNjgwAAFyNyWq1lqudNlJSUhQQEKDk5GT5+/sbHQ4kKTtT+uxW6fhmqWZradRS2wTYzhKT09T7vTU6m5qpke3qauKASLuPAQAAjMM8z3jPP/+81q1bp19//bXYzzz33HNasmSJdu7cmXvtzjvv1Llz57Rs2bJi9cF374K2fm1b6GJyk+6PlkLbGB1RPqt3n9TTP2zX6QsZ8nI368V+ERpxU22ZTCajQwMAoNy4lnkeK7phPDcP26oO7wBbsnvlKw4ZJiTAW5NvbyZJ+nz9IS2PTXTIOAAAAOXVwoUL1bp1aw0bNkxBQUFq0aKFPv300yKf2bBhg7p3757nWq9evbRhw4ZCn0lPT1dKSkqeD1xM87ukqKGSNVua8w8pLdnoiPLp0jhIS8d1UqdGgUrPsuhf83fqoS9/19mLGUaHBgAACkCiG6VD5TrSwKm28w0fSruLt3rnWt3SJFgPXH4N8Zkfd+j4uUsOGQcAAKA8OnDggKZNm6aGDRsqOjpaDz/8sMaOHatZs2YV+kxiYqKCg4PzXAsODlZKSoouXSp4rjZp0iQFBATkfkJDQ+36e8AJTCap37tSpdrSucPS4ielUviycaCflz4f2UYv9g2Xh5tJMXFJuvW9NVq//7TRoQEAgL8h0Y3SI7yfdNPDtvP5Y6TkYw4Z5tlbm6hZrQAlX8rUuG+2Kivb4pBxAAAAyhuLxaKWLVvqjTfeUIsWLfTQQw/pwQcf1PTp0+06zoQJE5ScnJz7OXr0qF37h5N4B0hDP7OVL9n5o7T9G6MjKpDZbNIDHetr3iPtVT+wopJS0nX3jP/pjZ/idfpCutHhAQCAy0h0o3Tp8cqVXdh//Ietfredebqb9cHwlvLzctfmw2f17oo9dh8DAACgPKpevboiIiLyXAsPD9eRI0cKfSYkJERJSUl5riUlJcnf318VKlQo8BkvLy/5+/vn+cBFhbaRuk6wnS95Wjqz39h4ihBVM0CLH++gO1qHymqVPllzQO3eXKVnf9yu+ATK5wAAYDQS3Shd3L2kYZ9LXv7S0Y3Sz/92yDC1q/po0tCmkqSpq/dr7V5ePQQAACip9u3ba/fu3Xmu7dmzR3Xq1Cn0mbZt22rlypV5rsXExKht27YOiRGlUIcnpbodpcyL0o/3S1mltwa2j6e73rrtBn16b2vdUCtAGVkWfb/5mHq/96uGf7JRMXFJyraUvhIsAACUByS6UfpUqScN+MB2vvZdae8KhwzT74YaGn5jbVmt0hPfbdOp87x2CAAAUBLjx4/Xxo0b9cYbb2jfvn2aPXu2PvnkEz366KO5bSZMmKB777039+cxY8bowIEDevbZZ7Vr1y5NnTpV33//vcaPH2/ErwAjmN2kwR9LFSpLCdukVa8ZHdFV9YgI1oJH22vOw23Vt2l1uZlN2nDgjB78YrNumbxan609qPNp9n87FQAAFI5EN0qnyEFSmwds5/MeklISHDLMy/0j1DjYT6cvpOvJ77fJwuoLAACA69amTRvNmzdP33zzjaKiovTaa69pypQpuvvuu3PbJCQk5CllUq9ePS1ZskQxMTFq1qyZJk+erBkzZqhXr15G/AowSkBNacCHtvP170v7VxkbTzGYTCa1qlNFH93dUmue7arRnevL39tdh8+k6tXFcWo7aZVeXRSnI2dSjQ4VAIBywWS1Gru19fHjx/Xcc89p6dKlSk1NVYMGDTRz5ky1bt260GdWr16tJ598UrGxsQoNDdWLL76okSNHFmu8lJQUBQQEKDk5mVp+pV1mmvTf7lLiH1KdDtK9CyQ3d7sPszfpvPp/uFZpmRY906uxHu3awO5jAAAAx2OeV37x3Zchi8dLmz+TfIOlMesk30CjI7omqRlZmrPluGauO6gDpy5KkkwmqXt4sO5vX083168ik8lkcJQAALiOa5nnGbqi++zZs2rfvr08PDy0dOlSxcXFafLkyapcuXKhzxw8eFB9+/ZV165dtW3bNj3xxBN64IEHFB0d7cTI4RQe3tKwWZKnr3R4rfTLWw4ZpmGwn14dECVJ+r+YPdp86E+HjAMAAADgKnq9IQWGSxeSpAWPSMauy7pmPp7uuufmOloxvrM+H9VGnRoFymqVYuKSNPzTjerz/lr9sPmo0jKzjQ4VAIAyx9AV3c8//7zWrVunX3/9tdjPPPfcc1qyZIl27tyZe+3OO+/UuXPntGzZsqs+z2oPF/THj9Kcf0gySffMk8K62n0Iq9WqJ77bpgXbTqhGgLd+GtdRlXw87T4OAABwHOZ55RfffRmTFCt90lXKTpdufVO6+WGjIyqRfSfPa+a6Q5qz5ZjSMi2SpKoVPXX3zXU04ubaCvLzNjhCAABKL5dZ0b1w4UK1bt1aw4YNU1BQkFq0aKFPP/20yGc2bNig7t2757nWq1cvbdiwocD26enpSklJyfOBi2l6m9TyPklWae5D0vkkuw9hMpn078FNVbeqj04kp+nZH3fI4Ko+AAAAQPkUHCn1+rftPOYlKWGHsfGUUIMgP/17cFNtnNBNz93aRNUDvHXmYobeX7lX7d9cpSe/36adx5ONDhMAAJdnaKL7wIEDmjZtmho2bKjo6Gg9/PDDGjt2rGbNmlXoM4mJiQoODs5zLTg4WCkpKbp06VK+9pMmTVJAQEDuJzQ01O6/B5yg91tSUIR08aQ090HJYv9X/Xy93PXhXS3l6WbW8rgkzVp/yO5jAAAAACiGNg9IjftI2Rm2tzszLhodUYlV8vHUw13CtObZrvrwrhZqWbuSMrOtmrvluPp9sFa3T9+gZTsTlG1hwQ0AANfD0ES3xWJRy5Yt9cYbb6hFixZ66KGH9OCDD2r69Ol2G2PChAlKTk7O/Rw9etRufcOJPCpIwz6XPHykg79Iv052yDBRNQM0oU8TSdIbP+1iZQUAAABgBJNJGvCh5FddOr1HWjbB6IjsxsPNrH431NDcR9pr3iPtNKBZDbmbTfrt0J8a89UWdX7nZ3265oCSL2UaHSoAAC7F0ER39erVFRERkedaeHi4jhw5UugzISEhSkrKW7oiKSlJ/v7+qlChQr72Xl5e8vf3z/OBiwpsLPX9P9v56knSobUOGWZku7rqERGsjGyLHpu9RRfSsxwyDgAAAIAiVKwqDf5YkknaMkuKnW90RHbXonZlvT+8hdY+d4se7Rqmyj4eOnb2kv79U7zaTlqplxfs1MHTrr+aHQAAZzA00d2+fXvt3r07z7U9e/aoTp06hT7Ttm1brVy5Ms+1mJgYtW3b1iExopRpPlxqfrdktUg//kO6cMruQ5hMJr1z2w2qEeCtQ2dS9c95f1CvGwAAADBC/c5Shyds54vGSufK5hu6IQHeeqZXE22Y0E1vDmmqRsG+Ss3I1qwNh9X1P6t1/+ebtHbvaf5dAgBAEQxNdI8fP14bN27UG2+8oX379mn27Nn65JNP9Oijj+a2mTBhgu69997cn8eMGaMDBw7o2Wef1a5duzR16lR9//33Gj9+vBG/AozQ5x0psIl0IVGaN1qyWOw+RCUfT70/vIXczCYt2HZCP2w+ZvcxAAAAABRD139KNVtJacm2zemzy+4bl94ebrrzxtqKfqKTvvrHTbqlSZAkadWukxrx3/+p15Q1+ua3I0rLtP+eRQAAuDpDE91t2rTRvHnz9M033ygqKkqvvfaapkyZorvvvju3TUJCQp5SJvXq1dOSJUsUExOjZs2aafLkyZoxY4Z69eplxK8AI3hWtNXrdq8g7V8prZvikGFa162iJ3s0kiS9tHCn9iadd8g4AAAAAIrg5iENnSF5+klH1ku//sfoiBzOZDKpQ8Nq+mxkG616qrPua1tHPp5u2pN0QRPm/qG2k1bqnehdSkxOMzpUAABKDZO1nL37lJKSooCAACUnJ1Ov29Vt+UJa+LhkcpNGLpHq2L98jcVi1X0zf9Ove0+rcbCfFjzWXt4ebnYfBwAAlBzzvPKL776c2PG9NPdByWSWRv7kkPl/aZZ8KVPfbzqqz9cf0vFzlyRJ7maT+jStrvs71FPz0ErGBggAgANcyzzP0BXdQIm0uEdqertkzZbm/ENK/dPuQ5jNJv3f7c1VzddLu5PO65VFcXYfAwAAAEAx3HC7dMOdtv165j4oXTprdEROFVDBQw92qq9fnumi6SNa6sa6VZRlsWrh9hMa9NE6DZm6Tot3nFBWtv1LOwIA4ApIdMN1mUxSv/+TqjaQUo5L88Y4pF53oJ+XptzRXCaT9M1vR7R4xwm7jwEAAACgGPr+R6pcT0o+Ki16QipfLyhLktzdzLo1qrq+H9NWix/voCEta8rDzaQtR87psdlb1entnzVt9X6dS80wOlQAAJyKRDdcm5efrV63m5e0N1ra+JFDhunQsJoe6RImSZow5w8dOZPqkHEAAAAAFMHLT7rtv5LZXYqbL2390uiIDBVVM0D/d3tzrXv+Fo3t1lBVK3rqRHKa3lq2SzdPWql/zvtD+06y1xAAoHwg0Q3XF9JU6v2m7XzFROnoJocMM757I7WuU1nn07P02DdblJHFK4EAAACA09VsJd3you186XPSqT3GxlMKBPl568kejbTu+Vv0zm03KLy6v9IyLfr6f0fU/f/W6N7PftPq3SdlsZS/FfAAgPKDRDfKhlajpMjBkiVL+vF+h9Trc3cz673hLRRQwUM7jiXr7WW77D4GAAAAgGJoN06q11nKTJXm3C9lpRsdUang7eGmYa1D9dPYDvrmwZvVMyJYJpO0Zs8pjZy5ST3e/UVfbTys1Iwso0MFAMDuSHSjbDCZpP7vX67Xd0Sa/6hD6vXVrFRB/xnWTJI0Y+1BrdqVZPcxAAAAAFyF2SwN/liqUEVK/MP2ZidymUwmtQ2rqk/uba1fnu6q+9vXk6+Xu/afuqgX5+/UzW+s1KSl8Tp+7pLRoQIAYDckulF2ePtfrtftKe1eIv1vukOG6RERrJHt6kqSnvp+uxKSmRwCAAAATudfXRo0zXa+caq0N8bYeEqp2lV99FL/CG2YcIte7h+hOlV9lJKWpY9/OaBOb/+sR2dv0e+H/5S1HG7sCQAoW0h0o2yp0Vzq+W/b+fJ/Sce3OGSYCX2aKKqmv86mZmrct9uUlU29bgAAAMDpGt8q3Tjadj5vjHSeNy4L4+ftoVHt62nVU1306b2t1bZ+VWVbrFqyI0FDp23QoI/WacG24+xFBABwWSS6Ufbc+KAU3l+yZEo/jpLSku0+hJe7mz4Y3lIVPd3028E/9f6qfXYfAwAAAEAx9HhVCo6SUk9L88dIFhK1RXEzm9QjIljfPHSzlo7rqNtb15Knu1nbjyVr3Lfb1PHtVfpw1V79eTHD6FABALgmJLpR9phM0oAPpUq1pbOHpIWPO6Red71qFfXGkKaSpA9W7dX6/aftPgYAAACAq/Dwlob+V3KvIO1fJW38yOiIXEZ4dX+9fVszrX/+Fj3Zo5EC/byUlJKu/yzfo7aTVur5OTu0O/G80WECAFAsJLpRNlWoJN32uWT2kOIWSJtmOGSYgc1r6vbWtWS1Sk98u02nL7DbOwAAAOB0QU2kW9+wna94RTqx1dh4XEw1Xy+N7dZQ6567Re/e0UxNawYoPcuibzcdVa8pa3T3jI1aGZ8ki4U63gCA0otEN8quWq2kHq/YzqNfkBJ2OGSYiQMi1SDIVyfPp+up77cz+QMAAACM0GrUX0oY/kNKv2B0RC7H092swS1qaeFj7fXjmLbq0zREZpO0bt8Z/WPWZt0yebVmrT+kC+lZRocKAEA+JLpRtt38iNS4j5SdIf0wUkq3/2t3Pp7u+uiulvJyN+uXPaf06a8H7D4GAAAAgKswmaT+70v+NaU/90tLnzM6IpdlMpnUum4VTb27ldY821UPdaovP293HTqTqpcXxqrtGys1cWGsNh36U9ks9AEAlBImq9UBxYtLsZSUFAUEBCg5OVn+/v5GhwNnSP1Tmt5RSjkmRd0mDZ1hmwTb2ez/HdEL8/6Qu9mk78e0Vcvale0+BgAAKBzzvPKL7x55HForzeovWS222t1NbzM6ojLhYnqW5m45ppnrDunA6Yu516v5eqpHRLB6RoaoXVhVebm7GRglAKCsuZZ5HolulA9H/ifN7C1Zs6X+70mtRtp9CKvVqse+2aolOxJUq3IFLRnbUQEVPOw+DgAAKBjzvPKL7x75rPq3tOZtyctfGvOrVLmu0RGVGRaLVb/sOaUF245r5a6TOp92pYyJn5e7ujYJUq/IEHVpHKiKXu4GRgoAKAtIdBeBSXA5tnaKtOJlyd1bemClFBJl9yFS0jLV7/21OvJnqnpHhWjq3S1lcsDqcQAAkB/zvPKL7x75ZGdJn/eRjv5PqnWjNGqp5EbS1d4ysizaeOCMomMTtTwuSafOp+fe83Q3q2ODauoVGaJu4UGq6utlYKQAAFdForsITILLMYtFmn27tC9GqtZIevBnycvX7sNsP3pOt01fr8xsq14bFKV7bq5j9zEAAEB+zPPKL757FOjsYVsJw/RkqdMz0i0vGh1RmWaxWLX16Dktj01UdGyiDp1Jzb1nNklt6lZRr8gQ9YwMVq3KPgZGCgBwJSS6i8AkuJy7eFqa3kE6nyA1Gy4Nnu6QYWb8ekCvL4mXp7tZ8x9pr4ga/LcGAICjMc8rv/juUaidc6Qf75dkkkYulup2MDqicsFqtWpP0gVFX056x55IyXM/qqa/ekWEqFdUiBoG+fIWLACgUCS6i8AkGDq0TprVz7Y5zcCpUou77T6E1WrVP2Zt1qpdJ1U/sKIWPdaB+nQAADgY87zyi+8eRZr/qLTtK8m/pjRmreRTxeiIyp2jf6ZqeVySomMTtfnQn7L8JQtRr1pF9YwMVq/IEDWvVUlmM0lvAMAVJLqLwCQYkqQ170irXpc8fGwlTIKa2H2IPy9mqM97vyoxJU1DW9bS5Nub2X0MAABwBfO88ovvHkVKvyB90lk6s09q0k+64yuJFcSGOX0hXSvjkxQdm6S1e08rI9uSey/Izys36X1z/arycDMbGCkAoDQg0V0EJsGQZKvX/dUQ6cDPUmC49OAqydP+deL+d+CMhn+6URarNL57I43r3tDuYwAAABvmeeUX3z2u6sQ2aUZ3yZIp9f0/qc0/jI4Iki6kZ2n17pOKjk3Sz7tO6kJ6Vu49f293dQsPVq/IYHVqFCgfT96QBYDyiER3EZgEI9eFk7Z63ReSpBb3SAM/dMgwn609qFcXx0mSnurRSI93I9kNAIAjMM8rv/juUSzrP5SW/1Ny95YeWi0FhRsdEf4iPStb6/ef0fLYRMXEJen0hYzce94eZnVsGKhekSHqHh6kSj6eBkYKAHAmEt1FYBKMPA78In0xUJJVGvKpdMPtDhnm41/2a9LSXZKkZ3o11qNdGzhkHAAAyjPmeeUX3z2KxWKRvr5N2r9SCoq0vdXp4W10VChAtsWqLUfOKnpnoqLjEnX0z0u599zMJt1Ur4p6RYaoZ2SwqgdUMDBSAICjkeguApNg5PPzJOmXNyWPitLoX6RqjllxPW31fr21zJbsfvbWxnqkC8luAADsiXle+cV3j2K7cFKa1k66eEq68SGpzztGR4SrsFqtik84r+jYREXHJmpX4vk895vVClDPyBD1igxRgyBfg6IEADgKie4iMAlGPpZs26ruQ79KwVHSAyskD8esCvjo5316J3q3JOn53k00pnOYQ8YBAKA8Yp5XfvHd45rsXSF9PdR2PvxbqXFvY+PBNTl85qKWxyZpWWyithw5q79mNMICK6rX5aT3DbUCZGLTUQBweSS6i8AkGAU6nyhNay+lnpZa3y/1e9dhQ32wcq8mx+yRJP2zT7ge7FTfYWMBAFCeMM8rv/jucc2WvSBt/EiqUEV6eL3kX93oiHAdTp5PU0xckqJjk7Rh/2llZl9Jb1QP8FbPiGD1igzRjfWqyN3NbGCkAIDrRaK7CEyCUah9K6WvhkqySrfNlKKGOGyo91bs1bsrbMnuF/uG64GOJLsBACgp5nnlF989rllWujSju5S4Q6rXSbpnvmR2MzoqlEBKWqZ+3nVS0bGJWr37lFIzsnPvVfLxULcmweoVGaxOjQLl7cF3DQCugkR3EZgEo0grX5V+nSx5+tnqdVd1XGmRd2P26L2VeyVJL/WL0P0d6jlsLAAAygPmeeUX3z2uy+m90sedpMxUqdvLUscnjY4IdpKWma21e08rOjZRK+KTdDY1M/deBQ83dW4UqFujQtS1SZACKngYGCkA4GpIdBeBSTCKlJ0lzeovHVkvVW8m/SNGcvdyyFBWq1XvxuzR+6v2SZIm9o/QyPYkuwEAuF7M88ovvntcty1fSAsfl8zu0v3LpVqtjI4IdpaVbdGmQ2cVHZuo5bGJOpGclnvP3WxS27Cq6hUZop4RwQry9zYwUgBAQRye6D569KhMJpNq1aolSfrtt980e/ZsRURE6KH/Z+++w6yqzr+N32c6MzD0XgWlKkgRBEVRUTT2Lhawd6NRk2jyJtFoTMwvmsTee+8VewERkI4iIL33NoUy7Zz3j42URCeUmbPnzLk/1zWX7OXAebhWJI9f137WpZfuXtVxYhOs/ylvCTx0MGxaW+k3scdiMe76eCb3fRGE3X8+sQtD+raptM+TJKk6s8/bM/b4SkqxGLx2AXz/JtRtA5d9BVn+b6i6isViTF2Sz0ffL+ej75cza2Xh1r8XiUD3lnW2XmbZpkFOiJVKkn5U6UF3//79ufTSSznvvPNYvnw5HTp0oEuXLsyaNYtrrrmGP/7xj7tdfGWzCdZOmfkxvHB68OMznoXOJ1TaR8ViMf7vox944Ms5ANx2YhfOM+yWJGmX2eftGXt8Ja1N6+Gh/pC3ELqeCac8EnZFipO5qwr56PsVfPT9ciYvWr/D3+vQuBaDujTmqC5N6NIsl0gkEk6RkpTkdqXP261rh6dOnUrv3r0BeOWVV9h3330ZNWoUzz//PE899dTu/JJS1dL+KOj3y+DHb18N6+ZX2kdFIhF+PagDlx0aXEj5h7e/5/lvFlTa50mSJP0Ue3wlrRp14NRHIZIC374MU14OuyLFSduGNbliQDveuuogxtx8BLed2IWD925AWkqEH1YUcM/nsznu3pEcfOcX/PndaXwzdw1l0aSa/ipJCSVtd35SSUkJmZnB3OJPP/2UE04ITrt27NiRZcuWVVx1UpiO+CMsHAOLx8KrF8CFH0FaRqV8VCQS4aajOxKLwSMj5vL7N6eSEokwuHerSvk8SZKk/2SPr6TW6kA49Cb48g54/3poeQDUaxt2VYqjJrWzOK9vG87r24a8jSV8NiM46T185iqWrN/EE1/P44mv51E/J4OBnRpzZOfG9G5bj9wsL7OUpKpit050d+nShYceeoivvvqKTz75hKOPPhqApUuXUr9+/QotUApNajqc9gRk1YGlE+HTWyr14yKRCDcf05GLDw4upLz5je94edzCSv1MSZKkH9njK+kdciO06gfFhfD6xVBWEnZFCknt7HRO6dGCh8/rxaQ/HMXD5/XklB7NqV0jnTUbinl5/CIufmY8+9/6MSfcN5I7hk3n8xkryN/s/2YkKUy7NaP7yy+/5OSTTyY/P5+hQ4fyxBNPAPC73/2OGTNm8MYbb1R4oRXF+X3aZTOGwUuDgx+f9SJ0/EWlflwsFuO296bzxNfziETgzlO6csYBLSv1MyVJqg7s8/aMPb4ErF8EDx0Em/Pg4F/BwFvCrkhVSElZlLHz1vLR98sZMXMV89ds3OHvp0Rgv+a1ObBtfQ5sW59ebepSyxPfkrRHKv0ySoCysjLy8/OpW7fu1rX58+eTnZ1No0aNdueXjAubYO2WD38HY+4PTndfPhLqVG7wHIvFuPXdaTw1aj6RCPz91K6c3suwW5Kk8tjn7Tl7fAmY9ja8MgSIwJC3oO2AkAtSVbUsbxPfzF3LmLlrGDN3jcG3JFWCSg+6N23aRCwWIzs7G4AFCxbw5ptv0qlTJwYNGrR7VceJTbB2S2kxPDEoGGHSojdcMCwYbVKJYrEYt7zzPU+PXkAkAv84rRun9mxRqZ8pSVIis8/bM/b40nbevRYmPAU1m8AVX0NOg7ArUgIw+JakilfpQfdRRx3FKaecwuWXX8769evp2LEj6enprF69mrvvvpsrrrhit4uvbDbB2m3r5sNDh0BRHhx0LRz550r/yFgsxh/enspzYxYSicDdZ3Tj5O6G3ZIk/RT7vD1jjy9tp3gjPDIAVv8A7Y+BwS9CJBJ2VUowS9dv4pt5axgzZy1j5q1hwX8E36kpEfZtXpsD29YLgu/WBt+S9J92pc/brcsoJ06cSP/+/QF47bXXaNy4MQsWLOCZZ57hnnvu2Z1fUqr66raBE+8Lfvz1v2Hmx5X+kZFIhD+fsC/n9GlFLAY3vDKFtycvqfTPlSRJycceX9pORjac9jikZsDMD2Dso2FXpATUrE4NTu7egjtP68rwXx/GqJsO559nduPMXi1pXT+bsmiMKYvW8/DwuVzw5Dj2//MnnHj/1/z1g+l88cNKCotKw/4tSFJCSdudn7Rx40Zq1aoFwMcff8wpp5xCSkoKBx54IAsWLKjQAqUqpfMJ0PtSGPsIvHlZMK+7dvNK/ciUlAi3nbgv0Ri8OHYhv3p5MpFIhBO6NavUz5UkScnFHl/6D032gyNvgw9/Cx//P2jdD5rsG3ZVSmA/Bt8/vqX7Uye+pyxavzX8/s8T3we0qUfNzN2KcSQpKezWn5B77703b731FieffDIfffQRv/rVrwBYuXKlrwqq+jvyNlg4BpZ/C69fDEPfhdTKbTZSUiL85aR9icVivDRuEde9NIkIcLxhtyRJqiD2+NJP6HMZzPkcZn0Er18El3wRnPaWKsB/Bt9L1m/imy3zvcfMXcvCtf8dfG+b8V2PXgbfkrSD3ZrR/dprr3H22WdTVlbG4YcfzieffALAX//6V0aMGMEHH3xQ4YVWFOf3qUKsmQMPHwrFBdD/RjjiD3H52Gg0xk1vfMsr4xeTmhLhnrO6c2zXpnH5bEmSqjr7vD1jjy/9jA2r4cF+ULgCel0Ix/0z7IqUJH4q+N6ewbekZFDpl1ECLF++nGXLltGtWzdSUoJR32PHjiU3N5eOHTvuzi8ZFzbBqjBTX4fXLgQicN4b0O7wuHxsNBrjN69/y2sTgrD7vsHdOWY/w25Jkuzz9pw9vvQz5nwOz54c/PiMZ4ORhlKcGXxLSkZxCbp/tHjxYgBatGixJ79M3NgEq0K9ex1MeBKyG8AVX0OtJnH52LJojF+/NoU3Ji4hLSXCfWf34Oh94/PZkiRVVfZ5FcceX/oJH/8BRt0DWXWC3r92Yvzzoepr8bqNfDN3bRB8z1vDorWbdvj72wfffdvVp1fruuQYfEtKMJUedEejUW6//XbuuusuCgsLAahVqxY33HADv//977ee/qiKbIJVoUo2wWMDYcVUaNMfhrwNKalx+eiyaIwbX53Cm5OCsPuBc3pwVBfDbklS8rLP2zP2+NL/UFoMTxwFSydB64Nh6Dtx6/2lnbEzwXfXFj+e+Db4lpQYKj3ovvnmm3n88ce59dZbOeiggwAYOXIkt9xyC5dccgl/+ctfdq/yOLAJVoVbPSuY112yAQbcDANuittHl0VjXP/KZN6evJT01AgPnNOTIzs3jtvnS5JUldjn7Rl7fGknrJkDDx8CxYVw2P+DQ38ddkXSzzL4llQdVHrQ3axZMx566CFOOGHHuWRvv/02V155JUuWLNnVXzJubIJVKaa8DG9eCkSCkx17HRK3jy4ti3L9K1N4Z0oQdj90bk+O6GTYLUlKPvZ5e8YeX9pJk1+Ety6HSAqc/Ah0PT3siqSdsmjtRr6ZtyX4nruGxet2DL7TUiLsZ/AtqYrZlT5vt/7EWrt27U9eRtOxY0fWrl27O7+klNi6nQnzR8Ck5+D1i+HykVCzUVw+Oi01hbvP6EY0FuO9b5dxxXMTeei8Hhze0bBbkiTtPHt8aSd1OwsWjYEJTwWHXWJlwZpUxbWsl03Letmc1jOYL/9TwfekheuZtHA9D345h7T/OPHd0+BbUhW3Wye6+/TpQ58+fbjnnnt2WL/mmmsYO3Ys33zzTYUVWNE87aFKU7wRHj0MVs2AtofBuW9AHGdZlpZFufalybz/3TIyUlN4eEhPDusQn7BdkqSqwD5vz9jjS7sgGoX3roWJzwAROPF+6H5O2FVJe2T74Hv0nDUsWf/fJ75/DL4P2KseXZrm0rBWJpFIJKSKJSWDSh9dMnz4cI499lhatWpF3759ARg9ejSLFi1i2LBh9O/ff/cqjwObYFWqldPhkcOgdBMc/gc45Ma4fnxJWZRfvjiJD6YuJyMthUeH9OLQ9g3jWoMkSWGxz9sz9vjSLopGYdiNMP5xIALH/xt6Dg27KqnCLFq7cctp7yD8/s/gG6BeTgYdm9SiY5NcOjatRacmuezTuCZZ6V7UKqliVHrQDbB06VLuv/9+ZsyYAUCnTp249NJLuf3223nkkUd255eMC5tgVbpJz8HbVwUz+85/H1r3i+vHl5RFufqFiXz0/Qoy0lJ4bEgvDjHsliQlAfu8PWePL+2iWAw++C2MfTh4PvZuOOCicGuSKsn2wfekheuYv2YD0Z9IlFIi0KZBDp2a5AYheNPgry3q1vD0t6RdFpeg+6dMmTKFHj16UFZWVlG/ZIWzCVali8Xgzcvh25egVrNgXndO/biWUFwahN0fT1tBZloKjw89gIP3aRDXGiRJijf7vMphjy/9D7EYfPQ7GPNA8HzM/0GfS8OtSYqDTcVlzFpZwIzlBcxYVsCM5flMX5bPuo0lP/n9NTPT6NCk1tbwu1OTWnRoUotaWelxrlxSIqn0yygllSMSgWPvgqUTYfVMePMyOPuVuM7rzkhL4b6ze3Dl8xP5dPoKLnp6HE+cfwAH7W3YLUmSJFWoSAQG3QEpaTDqHvjg1xAtgb5XhV2ZVKlqZKTStUUduraos3UtFouxqqAoCL+X5zNjWQHTlxcwe2UBhUWlTFiwjgkL1u3w67SoW2OH8Scdm+TSpn42aanx+3doSdWDQbdUGTJrwmlPwmNHwOxPYPS9cNC1cS0hIy2FB87pwRXPTeCzGSu3ht392hl2S5IkSRUqEoEj/xyE3SPvDk54R8vgoF+GXZkUV5FIhEa5WTTKzdphhGZJWZS5qzYE4ffyAmYsC/66LG8zi9dtYvG6TXw6feXW789MS6F94+D0d4cmtei0ZfxJ/ZqZYfy2JCUIg26psjTZF47+G7x3HXx6K9RtA51PjGsJGWkpPHBuDy5/dgJf/LCKC58ax5Pn96Zvu/iOUpEkSZKqvUgEjvgjpKbD8Dvhkz8EJ7v73xB2ZVLo0lNT6LAltN7+34rXbyxmxvICflj+4+iT4MebSsr4bkke3y3J2+HXaVgrk45bgu8OjWvRsWkt9m5Uk8w0L7+UtIszuk855ZRy//769esZPny48/ukH8ViwcWUk5+HSCqc9CB0OzPuZWwuKePy5ybw5Q+rqJGeylMXHECftobdkqTqxT5v99jjS5XgyzvhyzuCHx/2ezj0N+HWIyWQaDTGwrUbdwi+ZyzPZ8HajfxUgpWaEqFdw5ztRp8E40+a1s7y8kupGqi0Gd21a9f+n39/yJAhu/JLStVbJAIn3AtEYPJzwbzukg3Q68K4lpGVnspD5/bk0mcnMGLmKi54ahxPX9ibA9rUi2sdkiSp6rHHlyrBgN9CSip8fht88ReIlsKAm4N/P5BUrpSUCG0a5NCmQQ5H79t06/qGolJmrijYYfTJjOUF5G0qYeaKQmauKOSdKdt+ndystK2XXnbcMvqkfeNa5GQ63ECqrnbpRHd14GkPhSIahQ9vgrEPB89H/QX6XR33MjaXlHHJM+P5atZqcjJSefrC3vQy7JYkVRP2ecnLvVeV9fW/4ZM/Bj/ufwMc/gfDbqkCxWIxludv3nLpZXD55Q/LC5izqpDS6E/HXa3rZ2899d1py+WXreplk5LiP5tSVbQrfZ5BtxQvsRh8diuM/GfwPOB3wSuMcW50N5eUcfHT4xk5Owi7n7moNz1bG3ZLkhKffV7ycu9VpY2+P7icEoIL6gfeatgtVbKi0jLmrNx2+eX0Zfn8sLyAlQVFP/n9NdJTad+kVnD6e7sT4HWyM+JcuaT/ZNBdDptghW7E/8Hntwc/DqnR3VRcxkVPj2PUnDXUzEzjmYt606NV3bjWIElSRbPPS17uvaq8bx6GD7bM6T7wKhj0F8NuKQRrCov4YXkB07cbfzJzRQFFpdGf/P6mtbPo8B+nv9s2zCE9NSXOlUvJy6C7HDbBqhJGPwAf3Rz8+ICL4Zj/g5T4/h/lpuIyLnxqHKPnrqFWZhrPXtyH/VvWiWsNkiRVJPu85OXeKyGMewzevyH4ce/L4Jg7DbulKqAsGmP+mg3MWFaw9QLMGcvzWbxu009+f3pqhHYNa9K2YQ5tG9RkrwY57NUwh7YNcjwBLlUCg+5y2ASrypjwFLx7HRCDbmcHl1amxvdSjI3FpVzw5Di+mbeWWllpPHdRH7oZdkuSEpR9XvJy75Uwtv93gF4XwS/+EfcDL5J2TsHmEmauKNgafAdBeAGFRaU/+3PqZqcHwXeDIAgPfpxDm/o51MhIjWP1UvVh0F0Om2BVKd++Cm9eBrEy6HwSnPIopMX3vwBvLC7l/CfHMXZL2P38xX3o2qJOXGuQJKki2OclL/deCWXSc/D21UAMegyF4/5l2C0liFgsxpL1m5i5ooC5qzYwb/W2r2V5m8v9uc3r1NgafG9/Crx5nRqkOQpF+lkG3eWwCVaVM/09eO0CKCuGfQbBGc9AelZcS9hQVMr5T45l3Px15Gal8cIlB7Jv89pxrUGSpD1ln5e83HslnCkvwVtXQCwK+58LJ9wDKZ72lBLZxuJS5q/euCX4LmTulgB87qoN5G0q+dmfl54aoVW97B1OgbfdEoQ3rJlJxBFHSnIG3eWwCVaVNPtTeOkcKN0Mex0CZ70ImTXjWkJhUSnnPzGW8QvWUbtGOs9f3MewW5KUUOzzkpd7r4T07avw5qVB2N31LDjpAcNuqRqKxWKs21gShN//cQp83uoNP3sRJkDNzLQdToFvPw6lVlZ6HH8XUngMusthE6wqa/5IeOFMKC6Eln3g7FegRp24llCwuYShT4xl4sL11MkOwu4uzQy7JUmJwT4vebn3SlhT34DXLw5GGe53Opz0UNzv7ZEUnmg0xrL8zcxbtYG5/xGEL163kWg5iV2Dmpm0/Y/wu23DHFrWyyYzzf9opurDoLscNsGq0hZPgOdOhs150LQbnPsm5NSPawkFm0sY8sRYJi1cT93sdF645EA6NfWfFUlS1Wefl7zceyW0aW/DaxdCtBS6nBzc25PqSU0p2RWVlrFo7cYdwu+5W0ahrC4s+tmflxKBFnWzf/IUeLPaNUhJcRSKEotBdzlsglXlLf8OnjkJNq6Ghh1hyNtQq0lcS8jfXMJ5j49lyqL11MvJ4IVL+tCxif+8SJKqNvu85OXeK+HNeB9eGQrREuh0PJz6RNwvqZeUOPI3lzB/uxngW4PwVYVsKC772Z+XmZay44WYW4PwmtTNTnceuKokg+5y2AQrIayaCc+cCAVLoe5eMPQdqNMqriXkbSphyOPfMGVxHvVyMnjxkgPp0KRWXGuQJGlX2OclL/de1cIPH8Ir5wWX1Hc4Fk5/EtIyw65KUgKJxWKsKiz6j/A7uBxz4dqNlJT9fARYu0b6toswG+TQtmFN9mqQQ5sG2WRnOFJJ4THoLodNsBLGuvnw9AmwfgHktgjC7vrt4lpC3qYSzn3sG75bkkf9nAxevPRA2jc27JYkVU32ecnLvVe1MetTeOlsKCuCfQbBGc9AelbYVUmqBkrLoixZv4m5qzcwb9WPo1AKmbdqA0vzNpf7c5vWztrhFHib+jk0qZ1F49ws6udkOA5Flcqguxw2wUooeUuCk91rZkHNxnDeW9C4c3xL2FjCOY+PYeqSfBrUDE5272PYLUmqguzzkpd7r2plzufw4mAo3Qx7D4QznzfsllSpNhWXMX/Nf58Cn7t6A+s3lpT7c9NSIjSslUmj3Cwa18qkcW4WjXO3PG/5ceNaWdRxNIp2k0F3OWyClXAKV8GzJ8GKqVCjHpz3BjTrHtcS1m8s5uxHv2Hasnwa1MzkpUsPZO9GNeNagyRJ/4t9XvJy71XtzB0OL54FJRuh7WFw1guQkR12VZKS0LoNxcEp8NVB+D1v9QYWrNnIivwi1mwoYmdTxYzUFBrlbheE18oKnmtl7RCO52alGYhrBwbd5bAJVkLauBaePw2WTIDMXDjnVWh1YFxLWLehmLMf+4bpy/JpWCsIu9s1NOyWJFUd9nnJy71XtTR/JDx/BpRsgL0OgcEvQUZO2FVJ0lYlZVFWFxaxIr+IFfmbWZm/mZUFwY+3rhUUsXZD8U7/mlnpKUHw/WMQ/uOp8NwsGtXa9uOcTOeGJwuD7nLYBCthFRXAC2fCgq8hPRsGvwhtB8S1hLUbijn70THMWF5Aoy1hd1vDbklSFWGfl7zce1VbC0YHB16KC6H1QXD2K5Bp/y0psRSVlrGqIAjEV+ZvDoLwgh/D8R+D8c3kby7d6V+zZmbadifCtwTh24XiPwblWemplfg7UzwYdJfDJlgJrXgjvHwuzPkMUjODy2k6HB3XErYPuxvnZvLSpX3Zq4EnSyRJ4bPPS17uvaq1RWPhuVOhKB9aHgjnvgaZ3pkjqfrZVFzGyoJtp8FX7HBCPAjFl+dvZmNx2U7/mrVrpP/kifDt54g3rJlJRlpKJf7OtCcMusthE6yEV1oEr10IM96DlDQ45VHY95S4lrCmsIjBj45h5opCmuRm8dKlB9LGsFuSFDL7vOTl3qvaWzwBnj0ZivKgRe8g7M6qHXZVkhSKwqLSHcLvH0elrCzY8lywmeV5mykqje70r1k/J4OGtf5jVMoOF2xm0aBmBmmpBuLxZtBdDptgVQtlpfDWFfDdKxBJgRPug+7nxLWE1YVFDH5kDLNWFtK0dhB2t65v2C1JCo99XvJy75UUlk6CZ06CzeuheU849w2oUSfkoiSpaorFYuRvLt0yKmVLGF6w46iUH8PxkrKdi0YjEWhQM3PrZZqNczNpWCtrh+dGtQzEK5pBdzlsglVtRMvgvV/BxKeD51/8A3pfEtcSVhUEJ7tnryykWe0sXrq0L63qexu8JCkc9nnJy71X0lj2LTxzImxaC033h/PehOx6YVclSQkrGo2xflPJf58Q3zJC5cegfFVhEWXRnQ/E6+dk0qjWf4TiuVlb1oK/NqyVSbqB+P9k0F0Om2BVK7EYfPQ7GPNA8DzwVjj4uriWsLJgM4MfGcOcVRtoXqcGL116IC3rGXZLkuLPPi95ufdKKsunwjMnwMY10GQ/OO9tyKkfdlWSVK2VRWOs2VC0NQj/cXb4yoIgDA/+uuuBeL3sDBptCb63huBbwvFGW0aoJPsMcYPuctgEq9qJxeCLv8CI/wueD/kNHPa74E/MOFmZv5mzHhnD3NUbaFE3CLtb1DXsliTFl31e8nLvlXRWToenj4cNq6BRFxj6DuQ0CLsqSUp6ZdEYazcUsyJ/M6u2D8N/PCG+JRhfVVBE6U4G4gB1s9OD0Hu7E+E//nX7YDwzLbUSf3fhMOguh02wqq2R/4RPbwl+fOBVMOgvcQ27V2wJu+et3kDLejV46dK+NK9TI26fL0mSfV7ycu+VlFb9EITdhSugYacg7K7ZKOyqJEk7IRqNsXZjMSu3u0RzWxi+ZVxKwa7NEAeok52+NQRvWGvH2eGNtwvEs9ITJxA36C6HTbCqtW8egQ9+Hfy45/lw7D8hJX6vtyzP28xZj4xm/pqNtKqXzUuXHkgzw25JUpzY5yUv915Ja/WsIOwuWAYN2sPQd6FWk7CrkiRVkB9niK/cbmb49uNSVmw3NqW4LLrTv25uVhqNcncMv3cIw7eE5TUywg/EDbrLYROsam/Sc/DONRCLQtcz4cQHIDUtbh+/LG8TZz0yhgVrNtK6fhB2N61t2C1Jqnz2ecnLvVdSWzMnCLvzl0D9vYOwO7dZ2FVJkuIoFouRt6lkW/idX8SK7U6Kb/9cVLrzgXitzLQdQ/At41J6tanH/i3rVN5vaDsG3eWwCVZSmPo6vHEpREuh43Fw2hOQlhm3j1+6Pgi7F67dSJv62bx0aV+a1M6K2+dLkpKTfV7ycu+V9NbOC8LuvEVQdy84/z2o3SLsqiRJVUwsFiN/c+lPnghfUbCZVdsF4ptKyn7217nm8L254agOcanZoLscNsFKGj98AK8MgbJi2HsgnPkcpMfvZPWS9Zs465HRLFq7ib0a5PD0Bb1pVd8LKiVJlcc+L3m59xKwbkEQdq9fAHVaB2F3nVZhVyVJSkCxWIyCotKfmSFexPFdm3JUl/iMyjLoLodNsJLKnC/gpbOhZCO0PhjOfgkya8Xt4xev28hZj4xh8bpN1K6Rzn1nd6f/Pg3j9vmSpORin5e83Htpi/WLgrB73Tyo3QrOfxfqtgm7KkmSdtuu9Hnxu6VOUvy1OwzOfQMyc2HBSHjmJNi0Lm4f36JuNq9f0Y/9W9Yhb1MJQ58Yy8PD55Bk/31NkiRJio86LeGCYVCvHeQthCePDWZ4S5KUBAy6pequdV8Y8jbUqAtLxsNTx0Phqrh9fOPcLF6+7EDO7NWSaAz++sEMfvnSZDYWl8atBkmSJClp5DYLwu4G7SF/MTx1HKyeHXZVkiRVOoNuKRk07wHnD4OcRrDiO3jqF5C/NG4fn5mWyt9O3Y/bTtqXtJQI705ZyqkPjmbR2o1xq0GSJElKGrWawPnvQ8OOULAUnjoWVs0MuypJkiqVQbeULBp3hgs/hNwWsHomPHE0rJsft4+PRCKcd2BrXrjkQBrUzGD6snyOv28kX89eHbcaJEmSpKRRsxEMfQ8adYHC5UHYvXJ62FVJklRpDLqlZFK/HVz4AdTdK7iN/YljYPWsuJbQe696vHvNwXRrUZv1G0s47/FveOyruc7tliRJkipazYYw9F1osh9sWBmMMVnxfdhVSZJUKQy6pWRTp1VwsvvH1xifPAaWT41rCU1r1+Dly/pyWs8WRGNw+/vT+dXLk9lUXBbXOiRJkqRqL6c+DHkHmnaDjauDsHvZt2FXJUlShTPolpLRjzP7mnSFDauC1xiXTIhrCVnpqfzfaV259YQupKZEeGvyUk57aBSL1zm3W5IkSapQ2fWCC+qb9YBNa+Hp42Hp5LCrkiSpQhl0S8kqp0HwGmOL3rB5PTx9Isz/Oq4lRCIRhvZrw/MX96F+TgbfL83nhPu+ZtQc53ZLkiRJFapGXRjyFrQ4IOj/nzkh7oddJEmqTAbdUjKrUQfOexPa9IfiAnjuVJj9WdzLOLBtfd655mD2a16btRuKOe/xsTw+cp5zuyVJkqSKlFUbzn0DWh4Im/PgmZNg0biwq5IkqUIYdEvJLrMmnPMq7DMISjfBi2fB9PfiXkbzOjV49fK+nNK9OWXRGLe9N40bXpnC5hLndkuSJEkVJisXzn0dWh8ERfnw7MmwcEzYVUmStMcMuiVBeg048znofCKUFcMrQ+C71+JeRlZ6Kned0Y0/HteZ1JQIb0xawukPjWbJ+k1xr0WSJEmqtn487PLjm53PnhL3MYaSJFU0g25JgbQMOPUJ6DYYYmXw+sUw8Zm4lxGJRLjw4L149qLe1MvJ4LsleZxw70jGzF0T91okSZKkaisjB85+BdoOgJIN8PxpMG9E2FVJkrTbDLolbZOaBic+AL0uAmLwzjUw5sFQSunXrgHvXH0QXZrlsmZDMec+9g1Pj5rv3G5JkiSpomRkw+CXYO+BULIRnj8D5nwRdlWSJO0Wg25JO0pJgWPvgn7XBM8f3gQj/hFKKS3qZvPa5f04af9mlEZj/Omd7/n1a986t1uSJEmqKOk14Mznt93Z88KZMOvTsKuSJGmXGXRL+m+RCBx5Gwy4OXj+/Db49FYI4TR1jYxU/nnm/vy/YzuREoHXJizmzIdHsyzPud2SJElShUjPgjOfhQ7HQlkRvDQYZn4UdlWSJO0Sg25JPy0SgQE3wVG3B88j7w5Od0ejIZQS4eL+bXnmwj7UyU5nyuI8jr93JGPnrY17LZIkqXy33HILkUhkh6+OHTv+7Pc/9dRT//X9WVlZcaxYEgBpmXD6U9Dp+OCC+pfOgRnDwq5KkqSdZtAtqXz9roFj7w5+/M1D8O4vIRrO6JCD92nAu1cfTKemuawuLObsR8fw7GjndkuSVNV06dKFZcuWbf0aOXJkud+fm5u7w/cvWLAgTpVK2kFaBpz2JHQ+CaIl8Mp5MP3dsKuSJGmnGHRL+t8OuAhOeggiKTDpWXjjEigrCaWUlvWyef2KvhzXtSml0Rh/ePt7bnr9O4pKndstSVJVkZaWRpMmTbZ+NWjQoNzvj0QiO3x/48aN41SppP+Smg6nPg77ngbRUnhlKHz/ZthVSZL0Pxl0S9o5+w8OXmVMSYepr8MrQ6BkcyilZGekce/g7tx8TEdSIvDy+EWc+fAYlueFU48kSdrRrFmzaNasGW3btuWcc85h4cKF5X5/YWEhrVu3pmXLlpx44ol8//335X5/UVER+fn5O3xJqkCpaXDKI9D1LIiVwWsXwXevhV2VJEnlMuiWtPM6nwhnvQCpmfDDMHjxLCjeEEopkUiEyw5tx1MX9KZ2jXQmL1rP8feNZPx853ZLkhSmPn368NRTT/Hhhx/y4IMPMm/ePPr3709BQcFPfn+HDh144oknePvtt3nuueeIRqP069ePxYsX/+xn/PWvf6V27dpbv1q2bFlZvx0peaWkwkkPwP7nBGH3G5fAlJfDrkqSpJ8ViSXZcNv8/Hxq165NXl4eubm5YZcjJaZ5I+CFs6BkA7TqC2e/Alnh/fO0cM1GLn12PDOWF5CeGuGWE7pwTp/WodUjSQqHfV7VtH79elq3bs3dd9/NRRdd9D+/v6SkhE6dOjF48GBuu+22n/yeoqIiioqKtj7n5+fTsmVL916qDNEovHctTHwGiMCJ90P3c8KuSpKUJHalxw/1RLc3sksJaq9DYMhbkFkbFo6GZ06AjeGdpG5VP5s3ruzHsfs1paQsxu/fnMrNb3zr3G5JkqqAOnXq0L59e2bPnr1T35+enk737t3L/f7MzExyc3N3+JJUSVJS4Lh/Q6+LgBi8fRVMeDrsqiRJ+i+hjy7xRnYpQbXsDee/C9n1YekkeOo4KFwZWjnZGWncd3Z3fnt0RyIReHHsIgY/MoYV+c7tliQpTIWFhcyZM4emTZvu1PeXlZXx3Xff7fT3S4qDlBQ49i7ofRkQg3d/CeMeD7sqSZJ2EHrQ7Y3sUgJr2g3OHwY1m8DK7+HJYyDv5+dpVrZIJMIVA9rx5PkHkJuVxsSF6zn+3pFMWLAutJokSUo2N954I8OHD2f+/PmMGjWKk08+mdTUVAYPHgzAkCFDuPnmm7d+/5///Gc+/vhj5s6dy8SJEzn33HNZsGABF198cVi/BUk/JRKBY+6EA68Mnt+/Hj68GcpKwq1LkqQtQg+6K/tGdkmVrFFHuPADqN0K1syGJ46BtXNDLWlAh0a8c/XBtG9ck5UFRZz1yGheGlv+ny2SJKliLF68mMGDB9OhQwfOOOMM6tevz5gxY2jYsCEACxcuZNmyZVu/f926dVxyySV06tSJX/ziF+Tn5zNq1Cg6d+4c1m9B0s+JRGDQHXDIr4PnMQ8Eb3bmLw23LkmSCPkyyg8++IDCwkI6dOjAsmXLuPXWW1myZAlTp06lVq1a//X9o0ePZtasWXTt2pW8vDz+8Y9/MGLECL7//ntatGjxk5/hRTVSnOQthqdPgLVzghPeQ94OQvAQFRaVcuMrU/jw++UAnNOnFX86vgsZaaH/Nz5JUiXwMsrk5d5LIZj+Hrx1BRTlQ05DOO2J4C4fSZIq0K70eaEG3f+pMm5kv+WWW7j11lv/a90mWKoEBSvg2ZNg5bRgdvd5b0HTrqGWFIvFuP+L2dz1yUxiMejVui4PnNuDRrW8yFaSqhvDzuTl3kshWTMHXhkCK6ZCJAUO/wMcdF0w01uSpAqwK31elfp/n8q4kf3mm28mLy9v69eiRYsqqlxJ/6lWYzj/fWjWHTaugaePg0XjQi0pEolw9eH78PjQXtTKSmP8gnWccO/XTF60PtS6JEmSpIRXvx1c9Al0OxtiUfjsVnj5HNi0PuzKJElJqEoF3ZVxI3tmZia5ubk7fEmqRNn1grElrfrC5jx45kSY91XYVXF4x8a8c/XB7N2oJsvzN3PGQ6N5ZZz/4UuSJEnaIxnZcNIDcPy/ITUTfhgGjxwKy74NuzJJUpIJNej2RnapmsqqDee+Dm0HQMkGeP40mPQchDwpaa8GObx11UEc1bkxxWVRfvP6t/zx7amUlEVDrUuSJElKaJEI9DwfLvoI6rSCdfPh8SODfweQJClOQg26vZFdqsYycmDwy9DhWCjdDG9fBW9eDkWFoZZVMzONh87tyfVHtgfgmdELOOfRb1hVUPQ/fqYkSZKkcjXrDpcOh32O2vbvAO9cAyWbw65MkpQEqtRllPHgRTVSnEWjMPJu+OIvwdy+Bu3h9Kehcfj/gerTaSv41cuTKSgqpWntLB46tyfdWtYJuyxJ0m6yz0te7r1UxUSjMPIu+PwvQAyadIUznoF6e4VdmSQpwSTsZZSSqqGUFDjkRhj6HtRqCqtnwqOHw8RnQx9lMrBzY966+iDaNsxhWd5mTn94NK9NWBxqTZIkSVLCS0mBQ34N570B2fVh+bfB3O4fPgy7MklSNWbQLSk+2hwEl4+EdkdA6SZ45+oqMcqkXcOavHXVQQzs1Iji0ig3vjqFW9753rndkiRJ0p5qdzhcNgJaHBBcVP/imfDZnyFaFnZlkqRqyKBbUvzkNIBzXoMj/giRFPj2JXj0MFgxLdSycrPSeeS8Xlx7xD4APDVqPuc+9g1rCp3bLUmSJO2R2i3g/GHQ+7Lg+au74NmToXBVuHVJkqodg25J8ZWSAv1v+IlRJs+EOsokJSXCr45sz8Pn9SQnI5Vv5q3l+HtH8t3ivNBqkiRJkqqFtAz4xd/h1MchPRvmDYeHD4FFY8OuTJJUjRh0SwrHf40yuQbevCz0USaDujTh7asPom2DHJbmbea0h0bxxkTndkuSJEl7bL/T4JIvggvqC5bCk8fAmIdCv7tHklQ9GHRLCs/WUSZ/gkgqfPvyllEm34da1t6NavHW1QdxeMdGFJVGuf6VKfz53WmUOrdbkiRJ2jONOsIln0OXkyFaCh/+Fl67MPQDL5KkxGfQLSlcKSnQ/3o4/z2o1azKjDLJzUrnsSG9uObwvQF44ut5DHliLGs3FIdWkyRJklQtZNaC056Eo/8GKWnw/RvBvwOs+iHsyiRJCcygW1LV0LofXP4V7D0QSjdXiVEmKSkRbjiqAw+d24OcjFRGzVnD8feOZOoS53ZLkiRJeyQSgQOvCC6qrNUUVv8AjxwG370WdmWSpARl0C2p6shpAGe/uuMok0cGhD7K5Oh9m/LmVQfRpn42S9Zv4rSHRvH25CWh1iRJkiRVC636wGVfQZv+ULIBXr8IPvgtlPompSRp1xh0S6pato4yeT8YZbJmVvAa44SnQx1l0r5xLd6+6mAGdGjI5pIo1740mb+879xuSZIkaY/VbAjnvQUHXx88f/MQPHUs5Hm4RJK08wy6JVVNrfvC5SO3jTJ595fwxqWhjjKpnZ3O40MP4MoB7QB49Kt5nP/kONY5t1uSJEnaM6lpMPBPMPglyKwNi8fCw4fA3C/DrkySlCAMuiVVXTn1g1EmA28JRpl890owymT51NBKSk2J8JujO3L/2T2okZ7KyNmrOf6+kUxbmh9aTZIkSVK10eEYuOxLaLIfbFwNz54MI/4BUd+klCSVz6BbUtWWkgIH/2rHUSaPHRH6KJNjuzblzav60apeNovXbeKUB7/m3SlLQ6tHkiRJqjbqtYWLPoHu50IsCp/fBi8Nhk3rwq5MklSFGXRLSgxbR5kcud0ok0ugqCC0kjo2yeWdqw+i/z4N2FwS5ZoXJ/HXD6ZTFg0vgJckSZKqhfQacOL9cMK9kJoJMz+Ehw+FpZPDrkySVEUZdEtKHDn14exXthtl8mroo0zqZGfw1AW9ufzQYG73w8Pncv6TY1m/0bndkiRJ0h7rMQQu/gTqtIb1C+Dxo2DiM2FXJUmqggy6JSWWH0eZXDAMcpvDmtlbRpk8Fdook9SUCDcd05F7B3enRnoqX81azQn3fc2M5c7tliRJkvZY025w2XBofwyUFcE718BbV0HJprArkyRVIQbdkhJTqwPhsq9gn6O2jDK5NvRRJsd3a8brV/SjRd0aLFy7kVMeGMWw75aFVo8kSZJUbdSoC2e9AEf8ESIpMPk5ePxIWDs37MokSVWEQbekxJVTHwa/DANvrTKjTDo3y+Xdqw/m4L0bsLG4jCufn8idH86gtMxb4iVJkqQ9kpIC/W+A896E7Aaw/Dt4eADMGBZ2ZZKkKsCgW1JiS0mBg6/771Em458MbZRJ3ZwMnrrgAC49pC0AD345h1MeHMUPy8M7bS5JkiRVG20HwOVfQYveUJQHLw2GT2+BstKwK5MkhcigW1L10OpAuHzktlEm710Hr18c2iiTtNQUfveLTtwzuDu1stL4dnEex937Ffd8NosST3dLkiRJeya3GZz/PvS5Inge+U949iQoXBlqWZKk8Bh0S6o+susFo0yO/HMwymTqa/DwocErjSE5oVszPr3+UAZ2akRJWYy7P5nJifd9zfdL80KrSZIkSaoW0jLgmL/BaU9Ceg7M/woePgQWjgm7MklSCAy6JVUvKSlw0LVwwQfBKJO1c+DRcEeZNM7N4tEhvfjXmftTJzudacvyOfG+r7n74x8oLvV0tyRJkrRH9j0FLv0CGnSAgmXw1LEw+oHQ+n9JUjgMuiVVT636bBllMgjKiraMMrkINueHUk4kEuGk7s35+FeHcHSXJpRGY9zz+WyOv3ck3y5eH0pNkiRJUrXRsANc8jnseypES+Gjm+HV80MbZShJij+DbknVV3Y9GPwSHHnbllEmr8MjA2DZt6GV1KhWFg+e24P7zu5OvZwMflhRwMkPjOLOD2ewuaQstLokSZKkhJdZE059HI75O6Skw7S34JHDYOX0sCuTJMWBQbek6i0lBQ765ZZRJi2CUSaPDYTxT4T2KmMkEuG4rs345FeHcFzXppRFYzz45RyOu3ckExeuC6UmSZIkqVqIRKDPZXDBMKjVDNbMgkcPh29fDbsySVIlM+iWlBxa9YHLv9pulMmvQh1lAlC/Zib3nd2Dh87tSYOamcxeWchpD47iL+9P83S3JEmStCda9g76/7YDoGQjvHExDPs1lBaHXZkkqZIYdEtKHtuPMklJqxKjTACO3rcJn15/CKd0b040Bo9+NY9j/v0V4+avDbUuSZIkKaHlNIBz34BDfh08j30EnjwG8haHW5ckqVIYdEtKLj83ymTc46Heyl4nO4O7z9yfx4f2onFuJvNWb+CMh0dzyzvfs7G4NLS6JEmSpISWkgqH/z84+xXIqgNLxsND/WHO52FXJkmqYAbdkpLTj68ytj86GGXy/vXw2oWhjjIBOKJTYz7+1aGc0asFsRg8NWo+g/41glFzVodalyRJkpTQ2g+Cy4ZD026waS08ewoM/ztEo2FXJkmqIAbdkpLXj6NMjro9GGXy/RvwyKGwbEqoZdWukc7fT+vG0xf2plntLBat3cTZj37D79/8jsIiT3dLkiRJu6VuG7jwY+gxFIjBF3+BF86AjY4MlKTqwKBbUnKLRKDfNduNMpkLjx0Z+igTgEPbN+SjXx3C2X1aAfD8NwsZ9M8RjJi5KtS6JEmSpISVngUn3AMnPgBpWTD7E3j4UFgyMezKJEl7yKBbkmC7USbHVKlRJrWy0rnj5P144eI+tKhbgyXrNzHkibH89rVvyd9cEmptkiRJUsLqfg5c9AnU3QvyFsITg2D8k6EfdpEk7T6Dbkn6UXY9GPwiHPWXKjXKBKDf3g346LpDOL9fGwBeHr+Io+4ewRczVoZbmCRJkpSomnaFS7+EDr+AsmJ47zp460oo3hh2ZZKk3WDQLUnbi0Sg39VwwYdQu+WWUSYDYdxjoZ/uyMlM45YTuvDKZX1pUz+b5fmbueCpcVz/ymTWbywOtTZJkiQpIdWoA2c+DwNvgUgKTHkBHj8S1swJuzJJ0i4y6Jakn9LyALhsxJZRJsXw/g3w2gWhjzIB6L1XPT649hAuPngvIhF4Y+ISjvznCD7+fnnYpUmSJEmJJyUFDv4VDHkHchrCiqnwyACY/l7YlUmSdoFBtyT9nP8aZfImPHxIlRhlUiMjlf93XGdeu7wf7RrmsKqgiEufncA1L05i7QZPd0uSJEm7bK/+cNlX0PJAKMqHl8+BT/4IZaVhVyZJ2gkG3ZJUnv8cZbJuXjDKZOyjoY8yAejZui7v/7I/lx/ajpQIvDtlKUfePZxh3y0LuzRJkiQp8eQ2hfPfg75XB89f/xueOREKVoRblyTpfzLolqSd8eMokx8vqhl2I7x6PmzOC7systJTuemYjrx55UG0b1yTNRuKufL5iVz5/ARWFxaFXZ4kSZKUWFLTYdBf4PSnIaMWLBgJD/eHBaPCrkySVA6DbknaWdn14KwXYNAdwSiTaW/Bw4fC0slhVwZAt5Z1ePeag7nm8L1JTYkw7LvlHHn3cN6evIRYFTh9LkmSJCWULifBpV9Aw05QuAKeOg5G3Vsl3uyUJP03g25J2hWRCPS9Ci78CGq3CkaZPH5klRllkpmWyg1HdeDtqw6iU9Nc1m0s4dqXJnPpsxNYmb857PIkSZKkxNJgH7jkM9jvDIiVwcf/D145r0pcUi9J2pFBtyTtjha94LLh/zHKZGiVGGUCsG/z2rxz9UFcf2R70lMjfDJtBQPvHs5rExZ7uluSJEnaFRk5cMojcOxdkJIO09+FRwbAwm/CrkyStB2DbknaXf81yuRtePiQKjPKJD01hV8esQ/vXnMw+zWvTf7mUm58dQoXPjWOZXmbwi5PkiRJShyRCBxwMVz4IeS2gLVz4IlBMOw3UFQYdnWSJAy6JWnP/Ncok/lVapQJQMcmubx5ZT9+c3QHMlJT+OKHVRx19wheGrvQ092SJEnSrmjRCy7/CvY/F4jB2IfhgQNh1qdhVyZJSc+gW5IqQotecPkI6HBslRxlkpaawpUD9mbYtQfTvVUdCopKuemN7xjyxFgWr9sYdnmSJElS4siuByfdD+e9CXVaQd4ieP5UeOMy2Lg27OokKWkZdEtSRalRF856Hgb9NZjdt3WUyaSwK9tq70a1eO3yfvz+F53ITEvhq1mrGfTPETw7ZgHRqKe7JUmSpJ3W7nC4cgwceCUQgW9fgvsOgKmvV5m3OyUpmRh0S1JFikSg75XBKJM6P44yOQq+/BuUFoVdHQCpKREuOaQtH1zbnwPa1GVDcRl/eGsqZz82hoVrPN0tSZIk7bSMHDj6r3DRJ9CwE2xcDa9dCC+dDflLw65OkpKKQbckVYYWPeGyEdDxuGCUyZd/hQcPgvkjw65sq7YNa/LypX255fjO1EhPZczctQz61wie/Hqep7slSZKkXdHygKD/H3Bz8HbnD8Pg/j4w/kmIRsOuTpKSgkG3JFWWGnXhzOfgtCchpxGsmQVPHQtvX1VlZvelpEQ4/6C9+Oi6Q+jbtj6bSsq49d1pnPHwaOau8vZ4SZIkaaelZcCAm4LLKpv3gqJ8eO86ePp4WDMn7Ookqdoz6JakyhSJwL6nwNXjoOcFwdqk54LZfVNerjKz+1rVz+b5i/tw+0n7kpORyvgF6zjm31/xyIg5lHm6W5IkSdp5jTrBRR8Hd/ekZ8OCkfBgPxj5LygrDbs6Saq2DLolKR5q1IHj/wUXfrxtdt+bl8KzJ1WZ0x0pKRHOPbA1H/3qEPrv04Ci0ih3DJvBqQ+OYtaKgrDLkyRJkhJHSmpwd8+Vo6HtACjdDJ/+CR47HJZ9G3Z1klQtGXRLUjy16hPM7jv8D5CWBXO/DE53jPgHlBaHXR0ALepm88yFvbnz1P2olZnG5EXrOfaekdz/xWxKy5wvKEmSJO20um3gvLfgxAcgqzYsmwKPDIDP/gwlm0MuTpKqF4NuSYq3tAw45Ea4YtS20x2f3wYPHwILx4RdHQCRSIQzD2jFx9cfwmEdGlJcFuX/PvqBkx8YxYzl+WGXJ0mSJCWOSAS6nwNXjYPOJ0KsDL66Cx46GBaMDrs6Sao2DLolKSz12wWnO055FLIbwKrp8MQgePc62LQ+5OICTWvX4InzD+Cu07uRm5XGd0vyOP7ekfz701mUeLpbkiRJ2nm1GsMZz8AZz0LNxsFl9U8eDe/fAJs9TCJJe8qgW5LCFIlA1zOCyyq7nxusTXgyuKxy6utV4rLKSCTCqT1b8On1h3Jk58aUlMX456czOeG+r5m6JC/s8iRJkqTE0vkEuOob6H5e8DzuMXigL8z8ONy6JCnBGXRLUlWQXQ9OvB/Ofx/q7wMbVsJrF8Lzp8G6+WFXB0Cj3CweOa8n/z5rf+pmpzN9WT4n3f81d338A0WlZWGXJ0mSJCWOGnXhxPtgyNvBHO/8xfDC6fD6JbBhTdjVSVJCMuiWpKqkzcFwxdcw4GZIzYDZn8L9B8LIf0FZSdjVEYlEOHH/5nz8q0P5xX5NKI3GuPfz2Rx/70imLFofdnmSJElSYmk7ILi7p+/VEEmB716B+w+A716rEm93SlIiicRiyfUnZ35+PrVr1yYvL4/c3Nywy5Gkn7d6Frz3K5j/VfDceF84/t/Qole4dW1n2HfL+MNbU1mzoZiUCFx6SDuuG7gPWempYZcmKQnZ5yUv915StbB4ArxzNaycFjzvMwiOuxtqtwi3LkkK0a70eZ7olqSqqsE+MPRdOPGB4NXGFVPhsYHw/o1V5rKaX+zXlE+uP5QTujUjGoOHhs/h2Hu+YsKCdWGXJkmSJCWWFj3h0uFw2O8hJR1mfRS83TnuMYh6Ebwk/S8G3ZJUlUUi0P0cuHo8dD0LiMG4R+H+3jDtnSrxOmO9nAzuGdydR87rScNamcxZtYHTHhrF7e9NY1Oxs7slSZKknZaWAYf+Bi4fCS16Q3EBvH8DPHUsrJ4ddnWSVKUZdEtSIshpAKc8HFxWU68tFCyDV86DFwfD+kVhVwfAUV2a8OmvDuXUHi2IxeCxkfM45t8j+Gaul+lIkiRJu6RRR7jwQzj6TkjPgYWj4MF+8NXdVeLuHkmqigy6JSmRtB0AV4yGQ34dvM448wO4vw+MfgDKSsOujtrZ6dx1RjeePP8AmuRmMX/NRs58ZAzXvzyZZXmbwi5PkiRJShwpqXDg5XDlaGh3OJQVwWe3wqOHwbIpYVcnSVWOl1FKUqJaOQPevRYWjQmem3YLLqts1j3curbI31zCHe9P56VxwYnzrPQULj2kHZcf2pbsjLSQq5NUHdnnJS/3XlK1F4vBlJfgw5tg83qIpMJBv4RDfwvpNcKuTpIqza70eQbdkpTIolGY9Ax88kfYnAeRFOhzeXCBTWbNsKsDYMqi9dz+/jTGzQ8uqGycm8mvB3XklO7NSUmJhFydpOrEPi95ufeSkkbhSvjgN/D9m8FzvXZwwr3Q5qBw65KkSmLQXQ6bYEnVUuFK+PBmmPpa8JzbAo79B3Q4Jty6tojFYnwwdTl//WA6i9YGI0z2bZ7L/zu2Mwe2rR9ydZKqC/u85OXeS0o6M94PLqksWBY897oQBt4KWf4ZKKl6Meguh02wpGpt1qfw/vWwfkHw3Ol4OObvkNss3Lq2KCot46mv53Pf57MpKApmig/q0pibj+lEmwY5IVcnKdHZ5yUv915SUtq0Pnizc+LTwXNuczj2buhwdKhlSVJFMuguh02wpGqveCMMvxNG3QuxMsioBQP/FJzySEkNuzoA1hQW8c9PZ/LCNwuJxiA9NcLQvm245oh9qF0jPezyJCUo+7zk5d5LSmrzRsA7v4R184LnfU+DY+6EnAbh1iVJFcCguxw2wZKSxvKpwWWVS8YHz817wfH/gib7hVrW9mauKOAv709n+MxVANTNTue6ge05u08r0lNTQq5OUqKxz0te7r2kpFe8Eb78K4y+D2JRqFEvCLv3Ox0i3osjKXEZdJfDJlhSUomWwfgn4LM/Q1F+cDt736tgwE2QUXVGhXz5w0r+8v50Zq0sBKBdwxz+37GdGdChIREbc0k7yT4vebn3krTFkonwzjWwYmrwvPeRcNw/oU7LcOuSpN1k0F0Om2BJSSl/GXz4W5j2dvBcpxUc+0/YZ2C4dW2ntCzKi+MW8c9PZrJ2QzEA/fdpwO+P7UTHJv55Lel/s89LXu69JG2nrAS+/hcM/zuUFUNGTRh4C/S6CFJ8a1JSYjHoLodNsKSk9sOHMOxGyFsUPHc5BY7+G9RqHG5d28nfXML9n8/mya/nU1wWJSUCZx7QiuuPbE/DWplhlyepCrPPS17uvST9hFU/BKe7F30TPLfqC8ffAw3bh1uXJO0Cg+5y2ARLSnpFhcH8vjEPBPP7smrDwFuhx9AqdcJj4ZqN/O3D6Qz7bjkANTPTuPKwdlx40F5kpVeNSzUlVS32ecnLvZeknxGNwrjH4LNbobgQUjPg0N/CQddCqpfAS6r6DLrLYRMsSVssnRxcVrlscvDc8sDgsspGnUIs6r+Nm7+W296bxreL8wBoXqcGNx3TkeO6NnV+t6Qd2OclL/dekv6H9QvhvV/B7E+D58b7wYn3QrPu4dYlSf+DQXc5bIIlaTvRMhj7CHx+e3DCIyUtON1xyK8hvUbY1W0VjcZ4a/IS/v7hDyzP3wxAz9Z1+cNxndm/ZZ1wi5NUZdjnJS/3XpJ2QiwG374S3N2zaR1EUqDv1TDgZsjIDrs6SfpJBt3lsAmWpJ+QtxiG/Rp+GBY8190ruJ293WHh1vUfNhWX8ciIuTw0fA6bSsoAOHH/Zvzm6I40r1N1gnlJ4bDPS17uvSTtgsJVQdg99fXguV7bYHb3Xv3DrUuSfoJBdzlsgiWpHNPfhWG/gYKlwXPXM+Gov0DNhuHW9R9W5G/m/z76gdcnLiYWg8y0FC7p35YrBrQjJzMt7PIkhcQ+L3m595K0G374AN67flvv3/N8OPLPwR0+klRF7EqfV3VuHZMkha/T8XDVN9D7MiAC374M9x8AE58NXnWsIhrnZvGP07vx7tUH02evehSVRrnvi9kM+MeXvDxuIWXRqlOrJEmSVCV1OAauGgM9LwieJzwF9/eBGcNCLUuSdpcnuiVJP23xhOCyyhXfBc+tD4Lj/gUN24da1n+KxWJ89P0K/vrBdBas2QhAp6a5/OHYTvTbu0HI1UmKJ/u85OXeS9Iemj8S3rkG1s4NnrucDMf8HWo2CrcuSUnP0SXlsAmWpF1QVgrfPAhf3AElGyE1Aw6+Hg7+FaRnhV3dDopLozwzej7//mwWBZtLARjYqTG/+0VH2jasGXJ1kuLBPi95ufeSVAFKNsGXf4NR90KsDGrUhUF/hW5nQSQSdnWSkpRBdzlsgiVpN6xbAMNuhFkfB8/19w5Od1fBC2vWbijm35/O5LlvghEmaSkRzuvbmmuP2Ic62RlhlyepEtnnJS/3XpIq0NLJ8M7VsHzLm53tjoDj/wV1WoVZlaQkZdBdDptgSdpNsRhMews++C0UrgjW9j8XjroNsuuFWtpPmb2ykDuGTefzGSsBqF0jnWuP2Ifz+rYmPdUrKqTqyD4vebn3klTBykpg1D3w5Z1QVgTpOTDwT3DAxZCSGnZ1kpKIQXc5bIIlaQ9tWg+f/RnGPwHEILs+DLoDup5ZJV9p/GrWKv7y/nRmLC8AoG2DHG7+RScGdmpEpArWK2n32eclL/dekirJ6lnB7O6Fo4PnFr3hhHuhUcdw65KUNAy6y2ETLEkVZNHY4LLKldOC570OheP+CfXbhVvXTyiLxnh53CLu/uQHVhcWA9CvXX1+f2wnujSrHXJ1kiqKfV7ycu8lqRJFozDhCfjkT1BcGNzbc8ivod8vq9y9PZKqH4PuctgES1IFKisJLqsZfieUbobUTDj019DvWkirevOwCzaX8OCXc3hs5DyKS6NEInBGz5bccFR7GuXapEuJzj4vebn3khQHeYvhveth1kfBc51WMPBW6HJylXyzU1L1YNBdDptgSaoEa+cGTe/cL4Lnhh2Dyypb9w21rJ+zaO1G7vxwBu99uwyA7IxUrhzQjov7tyUr3ZmDUqKyz0te7r0kxUksBlNfh4//HxQEvTQtegejDFseEG5tkqolg+5y2ARLUiWJxeC71+DDm2Dj6mCt5/kw8BaoUTfMyn7WhAXruO29aUxetB6AZrWz+O0xHTmhWzPnd0sJyD4vebn3khRnxRtg1H3w9b+gZGOwtu9pwYWVdVqFWpqk6sWguxw2wZJUyTauhU//BBOfCZ5zGsHhv4f9z4XUtHBr+wnRaIx3v13KnR/MYGneZgD2b1mHPxzXiZ6t64VcnaRdYZ+XvNx7SQpJ/jL4/HaY/DwQC0YZ9r0SDr4esvzzWNKeM+guh02wJMXJ/K/hvetg9czguUGH4HR3h2Oq5Ay/zSVlPD5yHg98MZsNxWUAHNu1KTcd3ZGW9bJDrk7SzrDPS17uvSSFbNkU+Oj3MP+r4Dm7QXDYpfuQKnnYRVLiMOguh02wJMVRaTGMfxyG/x02rQ3WWvWDo26DFr3Cre1nrCzYzF0fzeSVCYuIxSAjLYWLDt6LKwe0o1ZWetjlSSqHfV7ycu8lqQqIxeCHD+CTP8Ca2cFaw04w6HbYe2C4tUlKWAbd5bAJlqQQbM6Dkf+CMQ9AaTAehM4nwhF/gvrtQi3t50xbms/t709j1Jw1ADSomcH1R3bgjF4tSEtNCbk6ST/FPi95ufeSVIWUlcD4J+DLv8KmdcHa3gPhqNuhUadwa5OUcAy6y2ETLEkhylsCX94Bk7bM8EtJg54XwKG/hZoNw67uv8RiMT6bvpI7hk1n7uoNAHRoXIv/d1wn+u9T9eqVkp19XvJy7yWpCtq0Dkb8A755GKIlEEmBHkPhsN9BzUZhVycpQRh0l8MmWJKqgBXfw6e3wKyPg+eMmnDQtdD3KsjICbW0n1JcGuW5MQv492ezyNtUAsBhHRry+2M7sXejWiFXJ+lH9nnJy72XpCpszZzgsvrp7wbPGbWg//Vw4JWQnhVubZKqPIPuctgES1IVMm8EfPJHWDopeK7ZBAbcBN3Pq5KX1qzfWMw9n83mmdHzKY3GSE2JcE6fVlw3sD31cjLCLk9KevZ5ycu9l6QEMP9r+Oh3sGxy8Fy7FQz8E+x7apW8rF5S1WDQXQ6bYEmqYqJRmPYmfHorrF8QrDVoDwNvhQ7HVMmmd+6qQu4YNoNPp68AoFZWGtcesQ9D+rYhI8353VJY7POSl3svSQkiGoXvXoXPboX8JcFaiwNg0B3Qsne4tUmqkgy6y2ETLElVVGlxcGnN8Dth09pgrVU/OOo2aNEr3Np+xqjZq7nt/elMX5YPQOv62dx8TCcGdWlMpAoG9FJ1Z5+XvNx7SUowxRth9P0w8p9QEtyFQ5dTghPedduEWpqkqsWguxw2wZJUxW3Og5H/gjEPQOnmYK3ziXDEn6B+u1BL+yll0RivT1jM/338A6sKigDos1c9/nBcZ/ZtXjvk6qTkYp+XvNx7SUpQBcvh89th0nNADFIz4MAroP8NkGUvLcmgu1w2wZKUIPKWwJd3wOQXIBaFlDToeQEc+luo2TDs6v5LYVEpD305h0e/mktRaZRIBE7p3oJfD+pAk9pesiPFg31e8nLvJSnBLf8OPvo9zBsePGfXh8N+Bz3Or5J390iKH4PuctgES1KCWTENPr0FZn0UPGfUhIOuhb5XQUZOqKX9lCXrN/F/H87grclLAaiRnso5fVpxySFtaZxr4C1VJvu85OXeS1I1EIvBrI+DwHvNrGCtQQcY9BfYe2CVvLtHUuUz6C6HTbAkJah5X8Enf4Clk4Lnmo1hwM3Q/bwqecpj0sJ13P7+dCYsWAdARmoKp/dqweWHtqNlveyQq5OqJ/u85OXeS1I1UlYCE56CL+7YdndPu8PhqNuhcZdQS5MUfwbd5bAJlqQEFo3CtDfh01th/YJgrUF7GHgrdDimyp3yiMVifDlzFfd/PpvxWwLv1JQIJ3ZrxhUD2rFP41ohVyhVL/Z5ycu9l6RqaNN6+OofMOYhiJZAJCU45HLY76FW47CrkxQnBt3lsAmWpGqgtBjGPwHD79x2yqNVXzjyNmh5QLi1/YRYLMbYeWu574vZfDVrNRBk8oM6N+Gqw/ZmvxZetCNVBPu85OXeS1I1tnZuMMpw2tvBc0ZNOPhXwSjD9Bqhliap8hl0l8MmWJKqkc158PW/YfT9ULo5WOt8IhzxJ6jfLtzafsa3i9dz/xez+ej7FVvXDmnfkKsGtKNP2/ohViYlPvu85OXeS1ISWDAaPvodLJ0YPOe2gIG3wL6nQkpKqKVJqjwG3eWwCZakaihvCXx5B0x+AWJRSEmDnhfAob+Fmg3Dru4nzVxRwINfzuGdKUspiwb/V3xAm7pcedjeDGjfkEgVG8MiJQL7vOTl3ktSkohGYeprwSjD/MXBWvOeMOgOaHVguLVJqhQG3eWwCZakamzFtOC1xlkfBc8ZNeGga4PXGjNyQi3t5yxcs5GHRszhtfGLKS6LAtClWS5XHbY3R3dpQkqKgbe0s+zzkpd7L0lJpmRT8FbnyH9CcWGw1vmk4IR3vb3CrExSBTPoLodNsCQlgXlfwSd/3PZaY83GMODm4PKa1LRwa/sZy/M289hXc3n+m4VsKikDoF3DHK4csDcn7N+M9FRfx5T+F/u85OXeS1KSKlgBX/wFJj0bvNmZmgF9Lof+N0CNOmFXJ6kCGHSXwyZYkpJELAbfvwmf3Qrr5gdrDdoHpzw6/CK4DbIKWruhmKe+nsdTo+aTv7kUgBZ1a3DZoe04vWcLstJTQ65Qqrrs85KXey9JSW75VPj49zD3y+A5u35w0KXn+ZCaHmZlkvaQQXc5bIIlKcmUFsP4J2D4nbBpbbDWqi8ceRu0PCDc2spRsLmE58Ys5PGRc1ldWAxAw1qZXNJ/L87u05qamVXzZLoUJvu85OXeS5KIxWDWJ/Dx/4PVPwRrDdrDUbfDPkdV2YMuksq3K32e70FLkqq3tAw48HK4dnLwCmNaDVg4Gh4fCC+fB6tnh13hT6qVlc4VA9rx1W8O59YTutCsdharCoq4Y9gMDvrb5/zr05ms31gcdpmS9F9uueUWIpHIDl8dO3Ys9+e8+uqrdOzYkaysLPbbbz+GDRsWp2olSdVGJALtj4IrRsGxdwWnulfPhBfOgGdPCk59S6rWDLolSckhqzYc8Uf45cRgVnckBaa/Aw/0gfdvgMKVYVf4k2pkpDK0Xxu+/PVh/P3UruzVIIe8TSX869NZHPS3z/nrsOmsLNgcdpmStIMuXbqwbNmyrV8jR4782e8dNWoUgwcP5qKLLmLSpEmcdNJJnHTSSUydaiAhSdoNqWlwwMXwy0nBxfSpGcFIk4cOhneuCeZ6S6qWQg26Pe0hSYq73GZw4n1w+dewzyCIlsK4x+Ce7jD871C8IewKf1JGWgpnHNCST68/lHsHd6djk1psKC7j4RFzOfjOL/jDW1NZtHZj2GVKEgBpaWk0adJk61eDBg1+9nv//e9/c/TRR/PrX/+aTp06cdttt9GjRw/uu+++OFYsSap2smrDkX+Gq8dBl5OBGEx8Zkvf/39QbO8sVTehn+j2tIckKRSNO8M5r8DQ96BZDyguDG5sv6c7jH8SykrDrvAnpaZEOL5bMz64tj+PD+1F91Z1KC6N8uyYBRz2jy+54ZUpzF5ZGHaZkpLcrFmzaNasGW3btuWcc85h4cKFP/u9o0ePZuDAgTusDRo0iNGjR//szykqKiI/P3+HL0mSflLdNnD6U3Dhx9C8J5RsgC9uh/t6wZSXIRoNu0JJFST0oNvTHpKkUO3VHy75HE57MmiCC1fAe9fBg31hxvvBpTZVUCQS4YhOjXnjin68cEkfDt67AaXRGK9PXMyR/xzOlc9PYOqSvLDLlJSE+vTpw1NPPcWHH37Igw8+yLx58+jfvz8FBQU/+f3Lly+ncePGO6w1btyY5cuX/+xn/PWvf6V27dpbv1q2bFmhvwdJUjXUqg9c9Cmc+jjUbgn5S+DNS+Gxw2HBqLCrk1QBQg+6K/u0hyRJ/1MkAvueAleNg2P+vu3impfOhiePgUXjwq7wZ0UiEfq1a8BzF/fhzSv7cWTnxsRiMOy75Rx370jOf3Is4+evDbtMSUnkmGOO4fTTT6dr164MGjSIYcOGsX79el555ZUK+4ybb76ZvLy8rV+LFi2qsF9bklSNpaTAfqcF40yO+BNk1IKlk4Ke/+XzYO3csCuUtAdCDbrjcdrD1xolSTstLQP6XBZcXNP/BkirAQtHw+MDg8Z39eywKyxX91Z1eXRILz68rj8n7t+MlAh8+cMqTntoNGc8PJoRM1cRq6In1CVVX3Xq1KF9+/bMnv3Tf4Y2adKEFSt2vBhsxYoVNGnS5Gd/zczMTHJzc3f4kiRpp6XXgP7XBxfV97xg20X19/WGj34Pm9aFXaGk3RBq0B2P0x6+1ihJ2mVZteGIPwaNb/fztjW+D/SB92+AwpVhV1iujk1y+fdZ3fn8hgGcdUBL0lMjjJ23liFPjOXE+7/mw6nLiUYNvCXFR2FhIXPmzKFp06Y/+ff79u3LZ599tsPaJ598Qt++feNRniQpmdVsBMf/K7iovt3hEC2B0fcF9/Z88zCUlYRdoaRdEProku1VxmkPX2uUJO223GZw4n1wxShofzRES2HcY0Hj++WdUFS1L31s0yCHv53alRG/OYwLDmpDVnoK3y7O4/LnJjDoXyN4c9JiSsu8fEdSxbrxxhsZPnw48+fPZ9SoUZx88smkpqYyePBgAIYMGcLNN9+89fuvvfZaPvzwQ+666y5mzJjBLbfcwvjx47n66qvD+i1IkpJN485w3ptwzuvQsGNwovuD38ADfeGHD6rsvT2SdlSlgu7KOO3ha42SpD3WqBOc/TKc/z406wHFhfDlHXBvDxj/JJSVhl1huZrWrsGfju/C1789nKsOa0etzDRmrSzkVy9P4bC7vuT5bxZQVFoWdpmSqonFixczePBgOnTowBlnnEH9+vUZM2YMDRs2BGDhwoUsW7Zs6/f369ePF154gUceeYRu3brx2muv8dZbb7HvvvuG9VuQJCWrfQYGp7uPvRuyG8CaWfDiWfDMCbDs27Crk/Q/RGIhDuu88cYbOf7442ndujVLly7lT3/6E5MnT2batGk0bNiQIUOG0Lx5c/76178CMGrUKA499FD+9re/ceyxx/LSSy9xxx13MHHixJ1uhPPz86lduzZ5eXmG3pKkXReLwfdvwme3wrr5wVqD9jDwFujwi+Biyyouf3MJz45ewOMj57F2QzEAjXMzuaR/W87u04rsjLSQK5R2j31e8nLvJUkVbnMefHU3jHkQyoqACHQ/Bw77f5D70wc0JVW8XenzQj3R7WkPSVLCiURg31PgqnFwzN8huz6sngkvnR3c1r5oXNgV/k+5WelcddjefP3bw/njcZ1pkpvFivwibn9/Ogf97XPu+WwWeRudRyhJkqQkllUbjrwVrh4H+54KxGDSc8FbnV/eCUUFYVco6T+EeqI7DJ72kCRVqM358PW/YfT9ULopWOt0AhzxJ2iwd7i17aSi0jLenLiEB4fPYcGajQDUzEzj3ANbc9HBe9GwVmbIFUo7xz4vebn3kqRKt2gsfPQ7WLzlYEuNutD3Kuh9aRCKS6oUu9LnGXRLklQR8pfCF3fA5OchFoWUNOh5Phz62+A29wRQWhbl/e+W8cAXc/hhRXBCJTMthbMOaMmlh7ajeZ0aIVcolc8+L3m595KkuIjF4Ps3gr5/zexgLas2HHgV9LkMatQJtTypOjLoLodNsCSpUq2cDp/eAjM/DJ4zasIBF0HfqxMm8I5GY3w2YyX3fTGbKYvWA5CWEuHk7s25YkA72jasGW6B0s+wz0te7r0kKa6iZTD1DRjx92CMIUBmbTjwcuhzOWTXC7c+qRox6C6HTbAkKS7mj4SP/wBLJwbPaVnQYwj0+yXUaRlubTspFosxas4a7vt8NqPnrgEgJQK/2K8pVw7Ym87N/P9RVS32ecnLvZckhSJaBtPeguH/B6umB2sZtYLT3X2vMvCWKoBBdzlsgiVJcROLwcyP4Kt/bJvll5IG3c6Cg6+H+u3CrW8XTFiwjge+mM1nM1ZuXTuiYyOuPGxverauG2Jl0jb2ecnLvZckhSoahenvwPC/w8rvg7WMmtD7Euh7DeTUD7c+KYEZdJfDJliSFHexGMwbEQTe80YEa5EU6HwS9L8Bmuwbanm7YtrSfB74cjbvf7eMHzuIvm3rc9Vhe3PQ3vWJRCLhFqikZp+XvNx7SVKVEI3CD+/D8Dth+XfBWnpOMMqw3y+hZsNw65MSkEF3OWyCJUmhWjQOvroLZn6wba39MXDIjdCiV3h17aK5qwp5aPgc3pi4hNJo0Ep0a1mHqwa0Y2CnxqSkGHgr/uzzkpd7L0mqUmIx+OEDGP43WDYlWEursS3wrtU43PqkBGLQXQ6bYElSlbB8ahB4f/8msOX/ivc6NDjhvdchkCAno5es38SjI+by4tiFFJVGAejQuBZXHtaOY/drSlpqSsgVKpnY5yUv916SVCXFYjDrY/jybzve3dPrQjjoWqjVJNz6pARg0F0Om2BJUpWyejaM/Cd8+xJES4O1FgdA/xuh/aCECbxXFRTxxNfzeHb0AgqLgt9H6/rZXHFoO07q3pys9NSQK1QysM9LXu69JKlKi8Vg9mfBCe8f7+5JzYSe58PB10FuszCrk6o0g+5y2ARLkqqk9Ytg1D0w8Rko3RysNd4P+l8PnU+ElMQIivM2lvDM6Pk88fU81m0sAaBeTgZnHdCScw5sTfM6NUKuUNWZfV7ycu8lSQkhFoO5X8CXd8KiMcFaagb0GAIH/wpqtwi3PqkKMuguh02wJKlKK1wJo++DcY9DcWGwVn/voPHteiakpodb307aUFTKi2MX8sTIeSzNC4L7lAgc1bkJQ/q1pm9bL65UxbPPS17uvSQpofx4Wf3wO2HB18FaSjp0Pzc46FKnVbj1SVWIQXc5bIIlSQlh41oY+yh88yBsWhes1W4ZzPLrfi6kJ8bJ6NKyKJ9OX8HToxYweu6arevtG9dkSN82nNy9OTmZaSFWqOrEPi95ufeSpIQ176sg8J7/VfCckgb7nx3c3VO3TailSVWBQXc5bIIlSQmlqADGPxmc8i5cEazlNIJ+VweX2GTWCre+XfDD8gKeGT2fNyYuYVNJGQC1stI4vWdLhvRtTZsGOSFXqERnn5e83HtJUsKb/3UQeM8bHjynpEG3s4LAu17bcGuTQmTQXQ6bYElSQirZDJOeha/vgbyFwVpWHehzOfS5DLLrhVrersjbVMJrExbz7Oj5zF+zcev6gA4NGdqvDYfu05CUFMeaaNfZ5yUv916SVG0sHBME3nM+D54jqcEIw0NuhPrtwq1NCoFBdzlsgiVJCa2sBL57Fb66G9bMCtYyaganu/teDbUah1vfLohGYwyftYqnR83nyx9WbV1vUz+b8/q24bSeLahdIzFmkqtqsM9LXu69JKnaWTQuCLxnfxI8R1Jgv9Oh/43QsH24tUlxZNBdDptgSVK1EC2D6e/AiLtgxXfBWmom9DgvmOOdYBfYzF+9gWdGL+DVCYso2FwKQHZGKid3b86Qvm3o0CRxRrQoPPZ5ycu9lyRVW0smwPC/w8wPtyxEYN9T4ZBfQ6OOoZYmxYNBdzlsgiVJ1UosBrM+hhH/gMVjg7WUtOD1xoN/BQ32Cbe+XbShqJQ3Jy3hmdHzmbmicOt637b1GdqvNQM7NSYtNSXEClWV2eclL/deklTtLZ0cBN4/vL9lIQJdToJDfgONO4dYmFS5DLrLYRMsSaqWYjGYPxK++gfM/XLL4pbmt/8N0GS/EIvbdbFYjNFz1/DMqAV8PG050S3dSrPaWZxzYGsG925FvZyMcItUlWOfl7zce0lS0lj2LYz4O0x/d9tapxPg0N9Ck33Dq0uqJAbd5bAJliRVe4vHw1d3wQ/Dtq3tMyi4wKZl7/Dq2k1L1m/i+TELeGncItZuKAYgIy2FE7o1Y2jfNuzXonbIFaqqsM9LXu69JCnpLJ8KI/4Ppr0NbIn2Oh4Hh/4GmnYLtTSpIhl0l8MmWJKUNFZ8H1xa+f0bEIsGa236B4H3XodCJBJufbtoc0kZ7327jKdHzee7JXlb13u0qsPQfm04Zt+mZKQ51iSZ2eclL/dekpS0Vk4PAu+pb7A18G5/DAz4LTTrHmppUkUw6C6HTbAkKemsmQMj/wlTXoJoSbDWvFcw0qTDMQkXeMdiMSYtWs/To+Yz7LtllJQFrUyDmpmc3acV5/RpRePcrJCrVBjs85KXey9JSnqrfgju7Zn62rZDLvsMCkaatOgZbm3SHjDoLodNsCQpaeUthq/vgYlPQ+nmYK1RF+h/PXQ5GVJSw61vN6ws2MyL3yzi+W8WsLKgCIC0lAhH79uE8/u1oWfrukQSLMjX7rPPS17uvSRJW6yeFQTe372yLfDee2AQeCfgGEPJoLscNsGSpKRXuArG3A9jH4PigmCtXjs4+FfQ9UxIS7xLHkvKonw4dTnPjJ7PuPnrtq53bprL+f3acML+zchKT7wgX7vGPi95ufeSJP2HNXOCe3umvASxsmCt7WFB4N26b7i1SbvAoLscNsGSJG2xaR2MfRTGPBD8GCC3BRz0S+gxBNJrhFvfbpq6JI9nRy/grclLKCoNTrHUyU7nzANacm6f1rSslx1yhaos9nnJy72XJOlnrJ23JfB+EaKlwdpeh8ChN0Gbg8KtTdoJBt3lsAmWJOk/FBXChCdh1L1QuCJYy2kIfa+CXhdBVmL+/+W6DcW8Mn4Rz45ZwOJ1mwBIicARnRoztG8bDtq7vmNNqhn7vOTl3kuS9D+sWwAj74ZJz2+7t6f1wcGllW36J9y9PUoeBt3lsAmWJOlnlGyGyc/D1/+C9QuDtaza0Ofy4Cu7Xqjl7a6yaIzPZ6zk6VHzGTl79db1dg1zGNqvDaf0aEHNzLQQK1RFsc9LXu69JEk7af2i4KL6Sc9CWXGw1qofHPobaDvAwFtVjkF3OWyCJUn6H8pK4LvXghMfq2cGa+k50OsC6HcN1GoSbn17YPbKAp4ZvYDXJyxmQ3Ewq7BmZhqn9WzBeX1b065hzZAr1J6wz0te7r0kSbsob0lwwGXC01AWXOpOyz5B4N3uCANvVRkG3eWwCZYkaSdFozD9nWCm3/Jvg7XUTOh+Lhx0LdRtHW59e6BgcwmvT1jMM6MXMHf1hq3r/fdpwPn92jCgQyNSU2zuE419XvJy7yVJ2k35S+Hrf8OEp6B0c7DWvFdwaeU+Rxp4K3QG3eWwCZYkaRfFYjD7UxjxD1g0JliLpELXM+Dg66Fh+3Dr2wPRaIyRs1fzzOj5fDZjJT92Ra3qZXPega05o1dLamenh1ukdpp9XvJy7yVJ2kMFy+Hre2D8E1Aa3G9Dsx5B4N1+kIG3QmPQXQ6bYEmSdlMsBgu+DgLvuV9sWYxA5xOg/w3QtFuo5e2phWs28tw3C3h53CLyNgUX9GSlp3By9+YM6duGTk3tG6o6+7zk5d5LklRBClfCqHtg3ONQsjFYa9otCLw7/MLAW3Fn0F0Om2BJkirAkgnw1d0w471ta/scBf1vhFZ9wqurAmwqLuPtyUt4atR8Ziwv2Lree696DO3bhqO6NCY9NSXECvVz7POSl3svSVIF27AaRt0LYx+Fki2j/hrvF8zw7ngcpNgPKz4MusthEyxJUgVaMS24tHLq6xCLBmutD4ZDboC2hyX0iY9YLMa4+et4etR8Pvx+OWXRoGVqkpvFOX1aMbhPKxrUzAy5Sm3PPi95ufeSJFWSDWtgzP3wzSNQvOUQSKPOcOCVsN9pkF4j3PpU7Rl0l8MmWJKkSrBmTnBr++QXIRqM/aBZDzjkRmh/TMKf+Fiet5nnv1nAi2MXsrqwGICM1BSO7dqUof3asH/LOuEWKMA+L5m595IkVbKNa2HMg/DNQ1CUH6zVqAc9hsABF0OdluHWp2rLoLscNsGSJFWivCXBK44Tntp2iU3dNtDrQtj/XMipH2Z1e6yotIxh3y3j6VELmLxo/db1bi1qM7RfG47t2pTMtNTwCkxy9nnJy72XJClONq2Dic/A2Mcgb2GwFkkJ5nf3uQza9E/otzpV9Rh0l8MmWJKkOChcBWMegPGPw+a8YC01E7qcHJz4aNEr4RvgKYvW8/To+bw3ZRnFZcHYlvo5GQzu3YpzDmxF09q+xhlv9nnJy72XJCnOomUw80P45mGYN3zbeqPO0PsS6HomZOSEV5+qDYPuctgES5IUR8Ubg/nd4x6DZZO3rTfpCgdcBPudnvAN8OrCIl4et4jnxixgWd5mAFJTIgzq0pghfdvQZ696RBI81E8U9nnJy72XJClEK2fA2EdgykvbLq7Mqg3dzwsOudTbK9z6lNAMusthEyxJUkiWTIBxjwfBd2kQCJNZG/YfDL0ugobtw61vD5WWRflk2gqeGjWfb+at3bretmEOp/dsySk9mtM4NyvECqs/+7zk5d5LklQFbFoPk18IQu9187YsRqD9IOh9KbQ7POHf6lT8GXSXwyZYkqSQbVwLk58PQu+tDTDBPL8DLoaOx0Jqenj1VYAZy/N5etQC3pq0hE0lZQCkRGBAh0ac3rMFR3RqTEZaYl/QWRXZ5yUv916SpCokGoXZn8LYh4O//qj+PkHgvf9gyKwVXn1KKAbd5bAJliSpiohGYe4XQeA98wOIBXOuqdkEep4PPYdCbrNQS9xThUWlDPt2Ga+MX8T4Beu2rtfLyeDE/Ztxes+WdG5mP1JR7POSl3svSVIVtXo2jHsUJj0PxQXBWkYt2P/sIPRusHe49anKM+guh02wJElV0PpFMPFpmPA0bFgZrEVSoeMvglPeex2a8K85zllVyGsTFvP6hMWsLCjaur5v81zO6NWSE7o1o052RogVJj77vOTl3kuSVMUVFQQzvMc+AqtnbltvdwT0uQz2PhJSfONR/82guxw2wZIkVWGlxTDjXRj3BCwYuW29/j7Q68LgNccadcOrrwKUlkX5atZqXp2wiE+mraCkLGjFMlJTOKpLY07v1ZKD925AakpiB/thsM9LXu69JEkJIhYL3ur85hGY+SGwJZasuxf0vgT2Pwdq1AmzQlUxBt3lsAmWJClBrJwejDWZ8tK21xzTasB+p8EBF0Gz7uHWVwHWbijm7clLeGX8YqYvy9+63rR2Fqf2aMFpPVvQpkFOiBUmFvu85OXeS5KUgNbOg3GPwaRnYXNesJaeDd3OCsaaNOoUbn2qEgy6y2ETLElSgikqgG9fCULvld9vW2/eMxhr0uVkSK8RXn0VZOqSPF4dv4i3Ji8lb1PJ1vXee9Xj9J4t+MV+TcnJTAuxwqrPPi95ufeSJCWw4g1Bvz/2EVg5bdv6XodA78ugwzGQkhpefQqVQXc5bIIlSUpQsRgs+iY49fH9WxDdEgbXqBu84tjrQqjfLtQSK8LmkjI+nb6CV8cvZsSsVfzYqeVkpHJs16ac0aslPVvXJZLgM8srg31e8nLvJUmqBmIxWPA1fPMwzHhv22X1tVsGb3T2GArZ9cKtUXFn0F0Om2BJkqqBwlXBK47jn4S8hdvW2x0RnPJuP6hanPpYlreJNyYu4dXxi5i/ZuPW9bYNcjitVwtO7dGCxrlZIVZYtdjnJS/3XpKkamb9Ihj/eHBZ/aa1wVpaVjDGsPdl0LRruPUpbgy6y2ETLElSNRItg1mfBKe8Z3/K1stscltAr/ODUx81G4VZYYWIxWKMm7+OV8YvYth3y9hYXAZASgQObd+Q03u15IhOjchMS/xwf0/Y5yUv916SpGqqZBNMfQPGPgzLpmxbb9U3mOPd6XhITQ+vPlU6g+5y2ARLklRNrZ0HE56Eic9uO/WRkg6dT4BeF0HrflANxn0UFpUy7NtlvDphEePmr9u6Xjc7nRP3b84ZvVrSuVly9jj2ecnLvZckqZqLxWDR2CDwnvY2REuD9VrNghGGPc+Hmg1DLVGVw6C7HDbBkiRVcyWbYdpbweWVi8duW2/YKZjt1/VMyKoePcDcVYW8NmExr09czIr8oq3rXZrlckavlpy4fzPqZGeEWGF82eclL/dekqQkkr8sOOAy/knYsDJYS82ALqdAn0uDS+tVbRh0l8MmWJKkJLJsShB4f/cqlGyZcZ1RE7qeEZzybrJvuPVVkLJojBGzVvHa+MV8PG05JWVBe5eRmsKRXRpzes8W9N+nIakpiX+ivTz2ecnLvZckKQmVFgWnu795GJaM37bevBf0uQw6nwRpyXPoo7oy6C6HTbAkSUlocx5MeSmY5b165rb1lgcGl1d2PgHSMsOrrwKt21DM25OX8Mr4xUxblr91vWntLE7p0ZzTe7akTYOcECusPPZ5ycu9lyQpyS2ZAN88At+/AWXFwVpOI+h1AfS8AHKbhlufdptBdzlsgiVJSmKxGMz/Kgi8Z7y/bbZfdgPoMSSY7Ve3daglVqSpS/J4bcJi3pq8hPUbS7au925Tj9N7teAX+zUlJzMtxAorln1e8nLvJUkSAIUrYcLTMP5xKFgWrKWkQecTofdl0LJ3tbi3J5kYdJfDJliSJAHBbL+JzwTz/X5sgolA+0HBKe92R0BKSqglVpSi0jI+nbaSVycsYsTMVUS3dH/ZGakc17Upp/dqSa/WdYkkeNNvn5e83HtJkrSDshKY/i6MfQQWjt623rRbEHjveyqkZ4VXn3aaQXc5bIIlSdIOykph5gfBKe+5X25br9smuMF9/3Mhp35Y1VW45XmbeX3iYl4dv4j5azZuXd+rQQ6n9WzBqT1a0KR2Yjb99nnJy72XJEk/a9mUIPD+7jUo3RysZdeHHkODy+prtwi3PpXLoLscNsGSJOlnrZ4F45+Ayc8Hc70BUjOhy8nBKe8WvarNq46xWIzxC9bxyrhFvP/dMjYWlwGQEoFD2jfkjF4tOaJTIzLTUkOudOfZ5yUv916SJP1PG9fCxKeDy+rzFgVrkVToeGxweWXrg6pNr1+dGHSXwyZYkiT9T8UbYerrMO7R4ATIj5rsFwTe+50OGdXnQscNRaW8/90yXhu/mLHz125dr5Odzkn7N+f0Xi3o0qx2iBXuHPu85OXeS5KknfbjG53fPBzc3/OjRl2gz6Ww3xmQkR1efdqBQXc5bIIlSdJOi8VgycTgMpupr2971TEzF7oNDl51bNgh3Bor2LzVG3htwiJen7CE5fmbt653aZbL6T1bcOL+zambkxFihT/PPi95ufeSJGm3rJgWjDX59mUo2TLWL6sO9DgvOOBSt02Y1QmD7nLZBEuSpN2ycW0w0mTc47Bu3rb1Nv2DJrjjsZCaHl59FawsGuOrWat4dfxiPpm2guKyKAAZqSkc2bkxp/dqQf99GpKaUnVe77TPS17uvSRJ2iOb1sGk54M3OtfN37IYgQ7HQO9Loe0Ax5qExKC7HDbBkiRpj0SjMPeLIPCe+QHEggCYmk2g59DgUpvazcOtsYKt21DM25OX8OqExXy/NH/repPcLE7p0ZzTe7Vkrwbhj3Kxz0te7r0kSaoQ0TKY9UlwynvOZ9vWG3SA3pdAt7Mgs1Z49SUhg+5y2ARLkqQKs35RcKHNhKdhw8pgLZIKHX8BvS6qlic/vl+ax6vjF/P25CWs21iydf2ANnU5vVdLjt2vKTmZaaHUZp+XvNx7SZJU4VbPCgLvyS9AcWGwlpkL+58NPS+ARh3DrS9JGHSXwyZYkiRVuNJimPFucMp7wdfb1uvvDT2GQNezoFbj8OqrBEWlZXw2fSWvjl/E8JmriG7pKLMzUjl2v6ac3qslB7SpSySOQb99XvJy7yVJUqXZnA9TXgxC7zWzt6237BO8zdnlpGp1UX1VY9BdDptgSZJUqVZMg/FPwJSXoLggWIukwj5HQfdzof2gajXLG2B53mbemLSYV8cvZt7qDVvX92qQw/n92jC0X5u41GGfl7zce0mSVOl+HGE4/gn44QOIlQXrmbmw32lB6N1s/1BLrI4MusthEyxJkuKiqACmvh5carN47Lb1nIbQ9cwg9G7UKbz6KkEsFmPCgnW8Mn4R73+7jA3FZQzt25pbT9w3Lp9vn5e83HtJkhRXBcuDi+onPrPd5ZVA025B4L3faZBVO7TyqhOD7nLYBEuSpLhb9QNMei445f3jLG+A5j2DwHvfU6tdI7yhqJRh3y1j/5Z12KdxfC7ssc9LXu69JEkKRTQK878K7u2Z/i6UFQfr6dnQ5eQg9G7Zu9rd2xNPBt3lsAmWJEmhKSuB2Z8GoffMDyFaGqynZUGnE4LQu01/SEkJt84EZZ+XvNx7SZIUuo1rg4MtE5+GVTO2rTfsuO3enpz64dWXoAy6y2ETLEmSqoTCVfDty0HovWr6tvU6rWD/c4Lb3Ou0Cq++BGSfl7zce0mSVGXEYrBobDDW5Ps3oGRjsJ6aAR2Pg55Doc0hHm7ZSQbd5bAJliRJVUosBksnBoH3d69BUf6WvxGBtofC/udCp+MgvUaoZSYC+7zk5d5LkqQqaXNe0ONPfAaWTd62XrcNdD8veKOzVpOwqksIBt3lsAmWJElVVvFGmPEeTHoW5o3Ytp5ZO7jQpvs50KyHM/5+hn1e8nLvJUlSlbdsCkx4Gr57ddvhlkgqtD86GG2y90BITQu3xirIoLscNsGSJCkhrJsPk18MbnPPW7RtvVHn4ORH1zMhp0Fo5VVF9nnJy72XJEkJo3gjTHsrCL0Xjdm2XqtZ0Od3Pxfqtg6tvKrGoLscNsGSJCmhRKMwf0Qw2mT6u1C6OVhPSQtOf3Q/z9MfW9jnJS/3XpIkJaSVM4K3OSe/AJvWblmMQLvDoMdQ6PALSMsItcSwGXSXwyZYkiQlrE3rYerrQei9dOK29ZqNodtZwTzvhu1DKy9s9nnJy72XJEkJrbQoGGE48RmY++W29ewGsP/gIPRusE9o5YXJoLscNsGSJKlaWPE9THoevn0ZNq7ett6yT/C6Y5eTIbNWePWFwD4vebn3kiSp2lg7LzjlPel5KFy+bb1VP+g5FDqfmFQX1Rt0l8MmWJIkVSulxTDro+CU96xPIFYWrKdnQ+eTgtC7db+kuMDSPi95ufeSJKnaKSuFWR/DxKeDv8aiwXpW7eC+nh5Docm+4dYYBwbd5bAJliRJ1VbBcpjyUhB6r5m1bb3uXtD9HOh2NtRuHl59lcw+L3m595IkqVrLWxLM8Z74DOQt3LberEdwynvfU6vt25wG3eWwCZYkSdVeLAaLxwWvPE59A4oLg/VICrQ7HPY/BzoeC2mZ4dZZwezzkpd7L0mSkkI0CnO/CE55zxgG0ZJgPT0H9j0Fep4PzXtWq7c5DbrLYRMsSZKSSvEGmPZOcMp7wcht6zXqwn5nBCe9m3YLr74KZJ+XvNx7SZKUdApXwZQXg1Pe27/N2agL9BgCXc+A7Hrh1VdBDLrLYRMsSZKS1po5wSuPU16E/CXb1pvsB93Pg/1OT+hm2D4vebn3kiQpacVisHA0THgapr0FpZuD9dTM4OLKHkOgzcEJe8rboLscNsGSJCnpRcuCVx4nPQcz3oey4mA9NQM6/CIIvdsdBimp4da5i+zzkpd7L0mSBGxaB9+9FoTeK77btl6vXRB473821GwUXn27waC7HDbBkiRJ29m4NmiGJz0Ly7/dtl6rGew/OJjnXb9dePXtAvu85OXeS5IkbScWg6UTg8B76uvb7uxJSYMOx0CP8xPmYItBdzlsgiVJkn7Gsm9h8vPw7cvBaZAftT4oCLw7nwiZNcOr73+wz0te7r0kSdLPKCqE798IQu8l47et124J3c8Nvmq3CK++/8Gguxw2wZIkSf9DaRH8MAwmPQ9zPoNYNFjPqAldTg5Gm7TsXeXm/NnnJS/3XpIkaSes+D64vHLKS7B5/ZbFCOw9EHoOhfZHQ2p6mBX+F4PuctgES5Ik7YK8JcHllZOfh7Vzt63X3we6nwPdBkOtJuHVtx37vOTl3kuSJO2Cks0w/V2Y+DTM/2rbes3GwRzv7udVmfGFBt3lsAmWJEnaDT/e5j7pOfj+LSjZEKxHUoMTIN3PDU6ApGWEVqJ9XvJy7yVJknbTmjlB4D35Bdiwatt6m/7Q83zoeBykZ4VWnkF3OWyCJUmS9lBRQRB2T3oOFo3Ztp5dH7qeGYTejbvEvSz7vOTl3kuSJO2hshL44YMg9J79GbAlMq5RF7qeFYw2adQp7mUZdJfDJliSJKkCrZ4VjDWZ/CIULt+23qx7EHjvexrUqBOXUuzzkpd7L0mSVIHWLwoOtUx6DvIXb1tvcQD0GAr7ngIZOXEpxaC7HDbBkiRJlaCsNLi4ctJzwUmQaEmw3vYwGPJWXEqwz0te7r0kSVIliJYFp7snPh30+LGyYL3rmXDKI3EpYVf6vLS4VCRJkqTqLTUN2g8Kvjashm9fCULvbmeFXZkkSZKk3ZGSCu2PCr4KVgRvck58JriQvgryRLckSZIqRywWfKWkxOXj7POSl3svSZIUJ9EoRCLBVxx4oluSJEnhi2MDLEmSJCkO4nSIZXdU3cokSZIkSZIkSdoJBt2SJEmSJEmSpIRm0C1JkiRJkiRJSmgG3ZIkSZIkSZKkhGbQLUmSJEmSJElKaAbdkiRJkiRJkqSEZtAtSZIkSZIkSUpoBt2SJEmSJEmSpIRm0C1JkiRJkiRJSmgG3ZIkSZIkSZKkhGbQLUmSJEmSJElKaAbdkiRJkiRJkqSEZtAtSZIkSZIkSUpoBt2SJEmSJEmSpIRm0C1JkiRJkiRJSmgG3ZIkSZIkSZKkhGbQLUmSJEmSJElKaAbdkiRJkiRJkqSEZtAtSZIkSZIkSUpoBt2SJEmSJEmSpIRm0C1JkiRJkiRJSmgG3ZIkSZIkSZKkhGbQLUmSJEmSJElKaAbdkiRJkiRJkqSElhZ2AfEWi8UAyM/PD7kSSZIkVaQf+7sf+z0lD3t8SZKk6mlXevykC7oLCgoAaNmyZciVSJIkqTIUFBRQu3btsMtQHNnjS5IkVW870+NHYkl25CUajbJ06VJq1apFJBKJy2fm5+fTsmVLFi1aRG5ublw+U1WH+5/c3P/k5v4nN/c//mKxGAUFBTRr1oyUFCf0JRN7fMWb+5/c3P/k5v4nN/c//nalx0+6E90pKSm0aNEilM/Ozc31H4Ik5v4nN/c/ubn/yc39jy9Pcicne3yFxf1Pbu5/cnP/k5v7H1872+N71EWSJEmSJEmSlNAMuiVJkiRJkiRJCc2gOw4yMzP505/+RGZmZtilKATuf3Jz/5Ob+5/c3H+pevOf8eTm/ic39z+5uf/Jzf2v2pLuMkpJkiRJkiRJUvXiiW5JkiRJkiRJUkIz6JYkSZIkSZIkJTSDbkmSJEmSJElSQjPoliRJkiRJkiQlNIPuOLj//vtp06YNWVlZ9OnTh7Fjx4ZdkuLgr3/9KwcccAC1atWiUaNGnHTSSfzwww9hl6WQ/O1vfyMSiXDdddeFXYriZMmSJZx77rnUr1+fGjVqsN9++zF+/Piwy1IclJWV8Yc//IG99tqLGjVq0K5dO2677Ta8/1uqXuzxk5M9vrZnj5987PGTlz1+YjDormQvv/wy119/PX/605+YOHEi3bp1Y9CgQaxcuTLs0lTJhg8fzlVXXcWYMWP45JNPKCkp4aijjmLDhg1hl6Y4GzduHA8//DBdu3YNuxTFybp16zjooINIT0/ngw8+YNq0adx1113UrVs37NIUB3feeScPPvgg9913H9OnT+fOO+/k73//O/fee2/YpUmqIPb4ycseXz+yx08+9vjJzR4/MURi/qeHStWnTx8OOOAA7rvvPgCi0SgtW7bkmmuu4aabbgq5OsXTqlWraNSoEcOHD+eQQw4JuxzFSWFhIT169OCBBx7g9ttvZ//99+df//pX2GWpkt100018/fXXfPXVV2GXohAcd9xxNG7cmMcff3zr2qmnnkqNGjV47rnnQqxMUkWxx9eP7PGTkz1+crLHT272+InBE92VqLi4mAkTJjBw4MCtaykpKQwcOJDRo0eHWJnCkJeXB0C9evVCrkTxdNVVV3Hsscfu8OeAqr933nmHXr16cfrpp9OoUSO6d+/Oo48+GnZZipN+/frx2WefMXPmTACmTJnCyJEjOeaYY0KuTFJFsMfX9uzxk5M9fnKyx09u9viJIS3sAqqz1atXU1ZWRuPGjXdYb9y4MTNmzAipKoUhGo1y3XXXcdBBB7HvvvuGXY7i5KWXXmLixImMGzcu7FIUZ3PnzuXBBx/k+uuv53e/+x3jxo3jl7/8JRkZGQwdOjTs8lTJbrrpJvLz8+nYsSOpqamUlZXxl7/8hXPOOSfs0iRVAHt8/cgePznZ4ycve/zkZo+fGAy6pTi46qqrmDp1KiNHjgy7FMXJokWLuPbaa/nkk0/IysoKuxzFWTQapVevXtxxxx0AdO/enalTp/LQQw/ZBCeBV155heeff54XXniBLl26MHnyZK677jqaNWvm/ktSNWKPn3zs8ZObPX5ys8dPDAbdlahBgwakpqayYsWKHdZXrFhBkyZNQqpK8Xb11Vfz3nvvMWLECFq0aBF2OYqTCRMmsHLlSnr06LF1raysjBEjRnDfffdRVFREampqiBWqMjVt2pTOnTvvsNapUyf+f3v3F1p13ccB/P0zc21rhinpCipFEZNSamXLLiwvUkEoDDGGbAaJpBJJUUmW0b+LwCSkgaHelAYqMwkrcN4JYRfOdmHWlQQyLLqxRd3sPBfBHs5jz0NPenb287xe8INzvr+z7f29e/Phd747fPhwnRIxll588cW8/PLLWbNmTZLk7rvvzvnz5/Puu+8qwXAN0PFJdPxGpeM3Nh2/sen45eCM7hqaNGlS7rvvvvT394+ujYyMpL+/P52dnXVMxlioVCrZtGlT+vr6cuLEicycObPekRhDS5cuzeDgYAYGBkavjo6OdHV1ZWBgQAG+xi1evDjnzp2rWvv+++9zxx131CkRY+m3337LhAnVFeu6667LyMhInRIBV5OO39h0/Mam4zc2Hb+x6fjl4InuGtuyZUu6u7vT0dGRBx54IDt37szw8HDWrVtX72jU2MaNG7N///589tlnaWtry9DQUJLkpptuSnNzc53TUWttbW2XndXY2tqaqVOnOsOxATz//PN56KGH8s4772T16tU5depUdu/end27d9c7GmNg5cqVefvtt3P77bdn/vz5OX36dHbs2JGnn3663tGAq0THb1w6fmPT8Rubjt/YdPxyKCqVSqXeIa51u3btynvvvZehoaEsXLgwH3zwQRYtWlTvWNRYURR/ub5v37709PSMbRjGhSVLlmThwoXZuXNnvaMwBj7//PO88sor+eGHHzJz5sxs2bIlzzzzTL1jMQYuXbqUbdu2pa+vLxcvXsytt96ap556Kq+99lomTZpU73jAVaLjNyYdn/+k4zcWHb9x6fjlYNANAAAAAECpOaMbAAAAAIBSM+gGAAAAAKDUDLoBAAAAACg1g24AAAAAAErNoBsAAAAAgFIz6AYAAAAAoNQMugEAAAAAKDWDbgAuUxRFjhw5Uu8YAADAVaLjA9c6g26AcaanpydFUVx2LVu2rN7RAACAf0DHB6i9ifUOAMDlli1bln379lWtNTU11SkNAABwpXR8gNryRDfAONTU1JQZM2ZUXVOmTEny51cOe3t7s3z58jQ3N2fWrFk5dOhQ1c8PDg7m0UcfTXNzc6ZOnZr169fn119/rfrM3r17M3/+/DQ1NaW9vT2bNm2quv/zzz/niSeeSEtLS+bMmZOjR4/WdtMAAHAN0/EBasugG6CEtm3bllWrVuXMmTPp6urKmjVrcvbs2STJ8PBwHnvssUyZMiXffPNNDh48mOPHj1eV3N7e3mzcuDHr16/P4OBgjh49mtmzZ1f9jTfeeCOrV6/Ot99+mxUrVqSrqyu//PLLmO4TAAAahY4PcGWKSqVSqXcIAP6tp6cnH3/8cW644Yaq9a1bt2br1q0piiIbNmxIb2/v6L0HH3ww9957bz788MN89NFHeemll/Ljjz+mtbU1SXLs2LGsXLkyFy5cyPTp03Pbbbdl3bp1eeutt/4yQ1EUefXVV/Pmm28m+bNY33jjjfniiy+cIwgAAP8nHR+g9pzRDTAOPfLII1UlN0luvvnm0dednZ1V9zo7OzMwMJAkOXv2bBYsWDBagJNk8eLFGRkZyblz51IURS5cuJClS5f+zwz33HPP6OvW1tZMnjw5Fy9e/KdbAgCAhqbjA9SWQTfAONTa2nrZ1wyvlubm5r/1ueuvv77qfVEUGRkZqUUkAAC45un4ALXljG6AEvr6668vez9v3rwkybx583LmzJkMDw+P3j958mQmTJiQuXPnpq2tLXfeeWf6+/vHNDMAAPDf6fgAV8YT3QDj0B9//JGhoaGqtYkTJ2batGlJkoMHD6ajoyMPP/xwPvnkk5w6dSp79uxJknR1deX1119Pd3d3tm/fnp9++imbN2/O2rVrM3369CTJ9u3bs2HDhtxyyy1Zvnx5Ll26lJMnT2bz5s1ju1EAAGgQOj5AbRl0A4xDX375Zdrb26vW5s6dm++++y7Jn/8t/dNPP82zzz6b9vb2HDhwIHfddVeSpKWlJV999VWee+653H///WlpacmqVauyY8eO0d/V3d2d33//Pe+//35eeOGFTJs2LU8++eTYbRAAABqMjg9QW0WlUqnUOwQAf19RFOnr68vjjz9e7ygAAMBVoOMDXDlndAMAAAAAUGoG3QAAAAAAlJqjSwAAAAAAKDVPdAMAAAAAUGoG3QAAAAAAlJpBNwAAAAAApWbQDQAAAABAqRl0AwAAAABQagbdAAAAAACUmkE3AAAAAAClZtANAAAAAECpGXQDAAAAAFBq/wKlIQuNZVDxRQAAAABJRU5ErkJggg==\n"},"metadata":{}},{"name":"stdout","text":"Translation using (LSTM)\n==================================================\n0    politicians do not have permission to do what ...\n1           I'd like to tell you about one such child,\n2    This percentage is even greater than the perce...\n3    what we really mean is that they're bad at not...\n4    .The ending portion of these Vedas is called U...\nName: english_sentence, dtype: object\n\nEnglish: politicians do not have permission to do what needs to be done.\nHindi: संघटक सम्प्रभु के लिए कोई भी नहीं है कि वो कोई भी नहीं है।\n\nEnglish: I'd like to tell you about one such child,\nHindi: मैं एक एक कहानी चाहता हूँ\n\nEnglish: This percentage is even greater than the percentage in India.\nHindi: यह भारत में भारत में सबसे महत्वपूर्ण है।\n\nEnglish: what we really mean is that they're bad at not paying attention.\nHindi: हम जानते हैं कि हम सभी चीजों को भी नहीं जानते हैं।\n\nEnglish: .The ending portion of these Vedas is called Upanishad.\nHindi: इन मुद्राओं के लिए इनकी संख्या अठारह हैं।\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### This model can be further improved by using Transformers for better prediction","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}}]}