{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a85b1775",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-29T19:10:47.577547Z",
     "iopub.status.busy": "2025-10-29T19:10:47.577108Z",
     "iopub.status.idle": "2025-10-29T19:31:39.424201Z",
     "shell.execute_reply": "2025-10-29T19:31:39.423254Z"
    },
    "papermill": {
     "duration": 1251.854683,
     "end_time": "2025-10-29T19:31:39.425598",
     "exception": false,
     "start_time": "2025-10-29T19:10:47.570915",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(127607, 3)\n",
      "\n",
      "Preparing dictionary...\n",
      "\n",
      "No. of unique words:  116145\n",
      "Initial 10 words      words  Index\n",
      "0        !      0\n",
      "1        #      1\n",
      "2        $      2\n",
      "3  $0.04US      3\n",
      "4       $1      4\n",
      "5    $1.16      5\n",
      "6     $1.2      6\n",
      "7     $1.3      7\n",
      "8     $1.5      8\n",
      "9    $1.50      9\n",
      "\n",
      "No. of unique words:  93923\n",
      "Initial 10 words        words  Index\n",
      "0          \u0014      0\n",
      "1          !      1\n",
      "2         !!      2\n",
      "3         !]      3\n",
      "4  !वॉशिंगटन      4\n",
      "5         !”      5\n",
      "6          #      6\n",
      "7         #a      7\n",
      "8      #a%ma      8\n",
      "9        #aD      9\n",
      "\n",
      "Preparing train-test dataset\n",
      "English vocab: 116145 Hindi vocab: 93923\n",
      "\n",
      "Training for 10 epochs...\n",
      "Epoch 1/10: Train Loss = 6.9623, Test Loss = 6.4707\n",
      "Epoch 2/10: Train Loss = 6.2272, Test Loss = 6.1571\n",
      "Epoch 3/10: Train Loss = 5.8730, Test Loss = 5.9955\n",
      "Epoch 4/10: Train Loss = 5.6140, Test Loss = 5.8824\n",
      "Epoch 5/10: Train Loss = 5.4041, Test Loss = 5.8030\n",
      "Epoch 6/10: Train Loss = 5.2267, Test Loss = 5.7336\n",
      "Epoch 7/10: Train Loss = 5.0751, Test Loss = 5.6877\n",
      "Epoch 8/10: Train Loss = 4.9453, Test Loss = 5.6418\n",
      "Epoch 9/10: Train Loss = 4.8302, Test Loss = 5.6152\n",
      "Epoch 10/10: Train Loss = 4.7291, Test Loss = 5.5763\n",
      "\n",
      "Training for 10 epochs...\n",
      "Epoch 1/10: Train Loss = 6.9086, Test Loss = 6.3482\n",
      "Epoch 2/10: Train Loss = 6.1013, Test Loss = 6.0335\n",
      "Epoch 3/10: Train Loss = 5.7391, Test Loss = 5.8752\n",
      "Epoch 4/10: Train Loss = 5.4834, Test Loss = 5.7847\n",
      "Epoch 5/10: Train Loss = 5.2798, Test Loss = 5.7013\n",
      "Epoch 6/10: Train Loss = 5.1115, Test Loss = 5.6433\n",
      "Epoch 7/10: Train Loss = 4.9700, Test Loss = 5.5826\n",
      "Epoch 8/10: Train Loss = 4.8449, Test Loss = 5.5390\n",
      "Epoch 9/10: Train Loss = 4.7329, Test Loss = 5.5004\n",
      "Epoch 10/10: Train Loss = 4.6355, Test Loss = 5.4656\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Translation using (LSTM)\n",
      "==================================================\n",
      "0    politicians do not have permission to do what ...\n",
      "1           I'd like to tell you about one such child,\n",
      "2    This percentage is even greater than the perce...\n",
      "3    what we really mean is that they're bad at not...\n",
      "4    .The ending portion of these Vedas is called U...\n",
      "Name: english_sentence, dtype: object\n",
      "\n",
      "English: politicians do not have permission to do what needs to be done.\n",
      "Hindi: कि कोई भी कोई चीज नहीं बल्कि बल्कि कोई भी नहीं था\n",
      "\n",
      "English: I'd like to tell you about one such child,\n",
      "Hindi: आप जानते हैं न, आप को एक बार\n",
      "\n",
      "English: This percentage is even greater than the percentage in India.\n",
      "Hindi: यह भारत में भारत में सबसे अधिक लोकप्रिय है।\n",
      "\n",
      "English: what we really mean is that they're bad at not paying attention.\n",
      "Hindi: तो हम जानते हैं कि हम अपने बच्चे को नहीं कर रहे हैं,\n",
      "\n",
      "English: .The ending portion of these Vedas is called Upanishad.\n",
      "Hindi: इस प्रकार का सबसे बड़ा (जनसंख्या का सबसे बड़ा है।\n"
     ]
    }
   ],
   "source": [
    "# Sequence to Sequence Learning using RNN --  machine translation -- Hindi English\n",
    "'''\n",
    "Used LSTM and GRU, showed performance with LSTM only\n",
    "'''\n",
    "\n",
    "\n",
    "## Import libraries\n",
    "from itertools import islice\n",
    "import numpy as np\n",
    "import torch\n",
    "from torch import nn\n",
    "from sklearn.model_selection import train_test_split\n",
    "from torch.utils.data import DataLoader, TensorDataset\n",
    "\n",
    "device = 'cuda'\n",
    "\n",
    "# Process data\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv(\"/kaggle/input/hindienglish-corpora/Hindi_English_Truncated_Corpus.csv\")\n",
    "print(df.shape)\n",
    "\n",
    "df = df.iloc[:,1:] # subset 50% samples only\n",
    "\n",
    "\n",
    "## Prepare vocabulary\n",
    "\n",
    "def prepare_dict(df, col=0):\n",
    "\n",
    "    words = []\n",
    "    for inx in range(len(df)):\n",
    "        sent =  df.iloc[inx,col]\n",
    "        sent = \" \".join(str(sent).split())  # normalize whitespace\n",
    "        sent = str(sent).split(\" \")\n",
    "        words.extend(sent)\n",
    "\n",
    "    words.extend([\"<START>\",\"<END>\",\"<PAD>\",\"<UNK>\"])\n",
    "\n",
    "    uniq_words = pd.DataFrame()\n",
    "    uniq_words[\"words\"] = sorted(set(words))\n",
    "    uniq_words[\"Index\"] = range(len(uniq_words)) # Words and index\n",
    "\n",
    "\n",
    "    print(\"\\nNo. of unique words: \",len(uniq_words))\n",
    "\n",
    "    print(\"Initial 10 words\",uniq_words[:10])\n",
    "\n",
    "    word2vec = dict(zip(uniq_words[\"words\"],uniq_words[\"Index\"]))\n",
    "    vec2word = dict(zip(uniq_words[\"Index\"],uniq_words[\"words\"]))\n",
    "    return  word2vec, vec2word\n",
    "\n",
    "\n",
    "print(\"\\nPreparing dictionary...\")\n",
    "Eng_word2vec, Eng_vec2word = prepare_dict(df, col=0)\n",
    "# print(Eng_Inx2vec.items())\n",
    "\n",
    "Hin_word2vec, Hin_vec2word = prepare_dict(df, col=1)\n",
    "# print(\"\\nPrinting inital 5 dict items: \",dict(islice(Hin_Inx2vec.items(),5)))\n",
    "\n",
    "\n",
    "\n",
    "## Truncate and Padding the sentences\n",
    "### Token preparation\n",
    "\n",
    "max_len = 20\n",
    "\n",
    "def sent2index(sentence,max_len, word2vec):\n",
    "    tokens = [\"<START>\"] +  str(sentence).split(\" \") + [\"<END>\"]\n",
    "    indices = [ word2vec.get(token,word2vec[\"<UNK>\"]) for token in tokens]\n",
    "    end_inx = indices[-1]\n",
    "\n",
    "    if len(indices) >= max_len:\n",
    "        indices = indices[:max_len-1]\n",
    "        indices.extend([end_inx])\n",
    "    else:\n",
    "        pad_indx = word2vec.get(\"<PAD>\")\n",
    "        indices.extend([pad_indx for x in range((max_len - len(indices)))]) ## Filling the blanks\n",
    "    return indices\n",
    "\n",
    "\n",
    "## Prepare dataset for train and test\n",
    "\n",
    "X = []\n",
    "y = []\n",
    "for i in range(len(df)):\n",
    "\n",
    "    #English\n",
    "    query=df.iloc[i, 0]\n",
    "    X.append(sent2index(sentence=query, max_len=20, word2vec=Eng_word2vec))\n",
    "\n",
    "    #Hindi\n",
    "    target = df.iloc[i, 1]\n",
    "    y.append(sent2index(sentence=target, max_len=20, word2vec=Hin_word2vec))\n",
    "\n",
    "## Prepare dataset\n",
    "print(\"\\nPreparing train-test dataset\")\n",
    "X_train, X_test, y_train, y_test= train_test_split(X,y,test_size=0.33)\n",
    "\n",
    "X_tr = torch.LongTensor(X_train)\n",
    "y_tr = torch.LongTensor(y_train)\n",
    "\n",
    "X_te = torch.LongTensor(X_test)\n",
    "y_te = torch.LongTensor(y_test)\n",
    "\n",
    "\n",
    "train_loader = DataLoader(TensorDataset(X_tr,y_tr), batch_size=32,shuffle=True)\n",
    "test_loader = DataLoader(TensorDataset(X_te,y_te), batch_size=32,shuffle=True)\n",
    "\n",
    "\n",
    "## Prepare encoder block\n",
    "'''Model was overfitting so added regularization method such as Dropouts'''\n",
    "class encoder(nn.Module):\n",
    "    def __init__(self,vocab_size, embed_dim, hid_dim, rnn_type=\"LSTM\"):\n",
    "        super().__init__()\n",
    "\n",
    "        self.embeddings = nn.Embedding(vocab_size,embed_dim)\n",
    "        self.dropout= nn.Dropout(0.5)\n",
    "\n",
    "\n",
    "        if rnn_type==\"LSTM\":\n",
    "            self.rnn = nn.LSTM(embed_dim, hid_dim,batch_first=True)\n",
    "        else:\n",
    "            self.rnn = nn.GRU(embed_dim, hid_dim,batch_first=True)\n",
    "\n",
    "    def forward(self,x):\n",
    "        embedded = self.embeddings(x)\n",
    "        embedded = self.dropout(embedded)\n",
    "\n",
    "        out, hid = self.rnn(embedded)\n",
    "\n",
    "        return hid\n",
    "\n",
    "## Prepare decoder block\n",
    "class decoder(nn.Module):\n",
    "    def __init__(self,vocab_size, embed_dim, hid_dim, rnn_type=\"LSTM\"):\n",
    "        super().__init__()\n",
    "        self.rnn_type = rnn_type\n",
    "        self.embeddings = nn.Embedding(vocab_size, embed_dim)\n",
    "        self.dropout= nn.Dropout(0.5)\n",
    "\n",
    "\n",
    "        if rnn_type==\"LSTM\":\n",
    "            self.rnn = nn.LSTM(embed_dim,hid_dim,batch_first=True)\n",
    "        else:\n",
    "            self.rnn = nn.GRU(embed_dim,hid_dim,batch_first=True)\n",
    "\n",
    "        self.fc = nn.Linear(hid_dim, vocab_size)\n",
    "\n",
    "    def forward(self,x, hid):\n",
    "        embedded = self.embeddings(x)\n",
    "        embedded = self.dropout(embedded)\n",
    "\n",
    "        out, hid = self.rnn(embedded,hid)\n",
    "        preds = self.fc(out)\n",
    "\n",
    "        return preds, hid\n",
    "\n",
    "## main model\n",
    "class seq2sq_model(nn.Module):\n",
    "    def __init__(self, encoder, decoder):\n",
    "        super().__init__()\n",
    "\n",
    "        self.encoder = encoder\n",
    "        self.decoder = decoder\n",
    "\n",
    "    def forward(self, source_seq, target_seq):\n",
    "        hidden = self.encoder(source_seq)\n",
    "        out, hidden = self.decoder(target_seq[:,:-1],hidden) ## Removing last token\n",
    "\n",
    "        return out\n",
    "\n",
    "\n",
    "### training loop\n",
    "def training_loop(dataloader, model, loss_func, optimizer):\n",
    "    model.train()\n",
    "    total_loss = 0\n",
    "    for X_data,Y_data in train_loader:\n",
    "        X_data,Y_data = X_data.to(device), Y_data.to(device)\n",
    "\n",
    "        optimizer.zero_grad()\n",
    "        outputs = model(X_data,Y_data)\n",
    "\n",
    "        loss = loss_func(outputs.view(-1, vocab_size_hin), Y_data[:, 1:].reshape(-1)) # removing <START> token\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        total_loss += loss.item()\n",
    "    # print(f\"Epoch {epoch+1}, Loss: {total_loss/len(train_loader):.4f}\")\n",
    "\n",
    "    return total_loss / len(dataloader)\n",
    "\n",
    "### test loop\n",
    "def eval_loop(dataloader, model, loss_func):\n",
    "    model.eval()\n",
    "    total_loss = 0\n",
    "    with torch.no_grad():\n",
    "        for X_data, Y_data in dataloader:\n",
    "            X_data, Y_data = X_data.to(device), Y_data.to(device)\n",
    "\n",
    "            outputs = model(X_data, Y_data)\n",
    "\n",
    "            loss = loss_func(outputs.view(-1, vocab_size_hin), Y_data[:, 1:].reshape(-1))  # removing <START> token\n",
    "            total_loss += loss.item()\n",
    "        # print(f\"Epoch {epoch + 1}, Loss: {total_loss / len(train_loader):.4f}\")\n",
    "\n",
    "    return total_loss / len(dataloader)\n",
    "\n",
    "\n",
    "## Training with LSTM\n",
    "epoch=10\n",
    "vocab_size_eng = len(Eng_word2vec)\n",
    "vocab_size_hin = len(Hin_word2vec)\n",
    "print(\"English vocab:\", vocab_size_eng, \"Hindi vocab:\", vocab_size_hin)\n",
    "\n",
    "\n",
    "rnn_type='LSTM'\n",
    "enc_model = encoder(vocab_size_eng,embed_dim=64, hid_dim=128, rnn_type=rnn_type)\n",
    "deco_model = decoder(vocab_size_hin,embed_dim=64, hid_dim=128,rnn_type=rnn_type)\n",
    "\n",
    "model = seq2sq_model(enc_model,deco_model).to(device)\n",
    "optimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n",
    "loss_func = nn.CrossEntropyLoss(ignore_index=Hin_word2vec[\"<PAD>\"])\n",
    "\n",
    "train_loss_hist = []\n",
    "test_loss_hist = []\n",
    "\n",
    "print(f\"\\nTraining for {epoch} epochs...\")\n",
    "for ep in range(epoch):\n",
    "    train_loss = training_loop(train_loader, model, loss_func, optimizer)\n",
    "    test_loss = eval_loop(test_loader, model, loss_func)\n",
    "\n",
    "    train_loss_hist.append(train_loss)\n",
    "    test_loss_hist.append(test_loss)\n",
    "\n",
    "    if (ep + 1) % 1 == 0:\n",
    "        print(f\"Epoch {ep + 1}/{epoch}: Train Loss = {train_loss:.4f}, Test Loss = {test_loss:.4f}\")\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "## Training with GRU\n",
    "rnn_type='GRU'\n",
    "\n",
    "enc_model = encoder(vocab_size_eng,embed_dim=64, hid_dim=128, rnn_type=rnn_type)\n",
    "deco_model = decoder(vocab_size_hin ,embed_dim=64, hid_dim=128,rnn_type=rnn_type)\n",
    "\n",
    "model = seq2sq_model(enc_model,deco_model).to(device)\n",
    "optimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n",
    "loss_func = nn.CrossEntropyLoss(ignore_index=Hin_word2vec[\"<PAD>\"])\n",
    "\n",
    "train_loss_hist_gru = []\n",
    "test_loss_hist_gru = []\n",
    "\n",
    "print(f\"\\nTraining for {epoch} epochs...\")\n",
    "for ep in range(epoch):\n",
    "    train_loss = training_loop(train_loader, model, loss_func, optimizer)\n",
    "    test_loss = eval_loop(test_loader, model, loss_func)\n",
    "\n",
    "    train_loss_hist_gru.append(train_loss)\n",
    "    test_loss_hist_gru.append(test_loss)\n",
    "\n",
    "    if (ep + 1) % 1 == 0:\n",
    "        print(f\"Epoch {ep + 1}/{epoch}: Train Loss = {train_loss:.4f}, Test Loss = {test_loss:.4f}\")\n",
    "\n",
    "\n",
    "\n",
    "## Plotting\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots(1,2,figsize=(18,8))\n",
    "ax[0].plot(train_loss_hist, label='LSTM')\n",
    "ax[0].plot(train_loss_hist_gru, label='GRU')\n",
    "ax[0].set_xlabel('Epoch')\n",
    "ax[0].set_ylabel('Loss')\n",
    "ax[0].legend()\n",
    "ax[0].set_title(f\"Train loss: {rnn_type}\")\n",
    "\n",
    "\n",
    "ax[1].plot(test_loss_hist, label='LSTM')\n",
    "ax[1].plot(train_loss_hist_gru, label='GRU')\n",
    "ax[1].set_xlabel('Epoch')\n",
    "ax[1].set_ylabel('Loss')\n",
    "ax[1].legend()\n",
    "ax[1].set_title(f\"Test loss: {rnn_type}\")\n",
    "fig.suptitle(f\"Train-test Loss in RNN\")\n",
    "\n",
    "plt.savefig(\"rnn_lstm_gru_performance.png\")\n",
    "plt.show()\n",
    "\n",
    "\n",
    "## Translate\n",
    "\n",
    "def translate_sentence(model, sentence, Eng_word2vec, Hin_vec2word, max_len=20):\n",
    "    model.eval()\n",
    "    with torch.no_grad():\n",
    "        # 1. Convert English input sentence to indices\n",
    "        src_indices = sent2index(sentence, max_len, Eng_word2vec)\n",
    "        src_tensor = torch.LongTensor(src_indices).unsqueeze(0).to(device)  # add batch dimension\n",
    "\n",
    "        # 2. Encode\n",
    "        hidden = model.encoder(src_tensor)\n",
    "\n",
    "        # 3. Initialize decoder input with <START> token\n",
    "        start_token = Eng_word2vec.get(\"<START>\")\n",
    "        dec_input = torch.LongTensor([[start_token]]).to(device)\n",
    "\n",
    "        translated_tokens = []\n",
    "\n",
    "        # 4. Iteratively predict next tokens\n",
    "        for _ in range(max_len):\n",
    "            output, hidden = model.decoder(dec_input, hidden)\n",
    "            pred_token = output.argmax(2)[:, -1].item()  # take the last token prediction\n",
    "            word = Hin_vec2word.get(pred_token, \"<UNK>\")\n",
    "\n",
    "            if word == \"<END>\":\n",
    "                break\n",
    "            translated_tokens.append(word)\n",
    "            dec_input = torch.LongTensor([[pred_token]]).to(device)\n",
    "\n",
    "        return \" \".join(translated_tokens)\n",
    "\n",
    "\n",
    "# Test Translation\n",
    "print(\"Translation using (LSTM)\")\n",
    "print(\"=\" * 50)\n",
    "\n",
    "test_sentences = df.iloc[:5,0]\n",
    "\n",
    "print(test_sentences)\n",
    "\n",
    "for s in test_sentences:\n",
    "    translation = translate_sentence(model, s, Eng_word2vec, Hin_vec2word=Hin_vec2word)\n",
    "    print(f\"\\nEnglish: {s}\")\n",
    "    print(f\"Hindi: {translation}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "87a2492a",
   "metadata": {
    "papermill": {
     "duration": 0.003363,
     "end_time": "2025-10-29T19:31:39.433119",
     "exception": false,
     "start_time": "2025-10-29T19:31:39.429756",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "74ba790b",
   "metadata": {
    "papermill": {
     "duration": 0.003204,
     "end_time": "2025-10-29T19:31:39.439788",
     "exception": false,
     "start_time": "2025-10-29T19:31:39.436584",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### This model can be further improved by using Transformers for better prediction"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "941383bb",
   "metadata": {
    "papermill": {
     "duration": 0.003193,
     "end_time": "2025-10-29T19:31:39.446407",
     "exception": false,
     "start_time": "2025-10-29T19:31:39.443214",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 200079,
     "sourceId": 441417,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31154,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1258.528356,
   "end_time": "2025-10-29T19:31:42.003869",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-29T19:10:43.475513",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
